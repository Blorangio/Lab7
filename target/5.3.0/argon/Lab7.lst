
/Users/admin/Documents/CTD_2023/Labs/Lab7/target/5.3.0/argon/Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000062ac  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ba2cc  000ba2cc  0000a2cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000ba2d4  000ba2d4  0000a2d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  2003e550  000ba2f8  0000e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000234  2003e5c0  2003e5c0  0001e5c0  2**3
                  ALLOC
  7 .backup       00000004  2003f400  000ba364  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000ba368  000ba368  0001a368  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000ba36e  000ba36e  0001a36e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000ba392  000ba392  0001a392  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   00165f6f  00000000  00000000  0001a396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00018a4a  00000000  00000000  00180305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0004b541  00000000  00000000  00198d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003600  00000000  00000000  001e4290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000c378  00000000  00000000  001e7890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044575  00000000  00000000  001f3c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00057065  00000000  00000000  0023817d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149aad  00000000  00000000  0028f1e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a3b8  00000000  00000000  003d8c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_uldivmod>:
   b490c:	b953      	cbnz	r3, b4924 <__aeabi_uldivmod+0x18>
   b490e:	b94a      	cbnz	r2, b4924 <__aeabi_uldivmod+0x18>
   b4910:	2900      	cmp	r1, #0
   b4912:	bf08      	it	eq
   b4914:	2800      	cmpeq	r0, #0
   b4916:	bf1c      	itt	ne
   b4918:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b491c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4920:	f000 b992 	b.w	b4c48 <__aeabi_idiv0>
   b4924:	f1ad 0c08 	sub.w	ip, sp, #8
   b4928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b492c:	f000 f824 	bl	b4978 <__udivmoddi4>
   b4930:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4938:	b004      	add	sp, #16
   b493a:	4770      	bx	lr

000b493c <__aeabi_d2ulz>:
   b493c:	b5d0      	push	{r4, r6, r7, lr}
   b493e:	4b0c      	ldr	r3, [pc, #48]	; (b4970 <__aeabi_d2ulz+0x34>)
   b4940:	2200      	movs	r2, #0
   b4942:	4606      	mov	r6, r0
   b4944:	460f      	mov	r7, r1
   b4946:	f7ff fd27 	bl	b4398 <__aeabi_dmul>
   b494a:	f7ff ffbf 	bl	b48cc <__aeabi_d2uiz>
   b494e:	4604      	mov	r4, r0
   b4950:	f7ff fca8 	bl	b42a4 <__aeabi_ui2d>
   b4954:	4b07      	ldr	r3, [pc, #28]	; (b4974 <__aeabi_d2ulz+0x38>)
   b4956:	2200      	movs	r2, #0
   b4958:	f7ff fd1e 	bl	b4398 <__aeabi_dmul>
   b495c:	4602      	mov	r2, r0
   b495e:	460b      	mov	r3, r1
   b4960:	4630      	mov	r0, r6
   b4962:	4639      	mov	r1, r7
   b4964:	f7ff fb60 	bl	b4028 <__aeabi_dsub>
   b4968:	f7ff ffb0 	bl	b48cc <__aeabi_d2uiz>
   b496c:	4621      	mov	r1, r4
   b496e:	bdd0      	pop	{r4, r6, r7, pc}
   b4970:	3df00000 	.word	0x3df00000
   b4974:	41f00000 	.word	0x41f00000

000b4978 <__udivmoddi4>:
   b4978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b497c:	9d08      	ldr	r5, [sp, #32]
   b497e:	4604      	mov	r4, r0
   b4980:	468e      	mov	lr, r1
   b4982:	2b00      	cmp	r3, #0
   b4984:	d14d      	bne.n	b4a22 <__udivmoddi4+0xaa>
   b4986:	428a      	cmp	r2, r1
   b4988:	4694      	mov	ip, r2
   b498a:	d969      	bls.n	b4a60 <__udivmoddi4+0xe8>
   b498c:	fab2 f282 	clz	r2, r2
   b4990:	b152      	cbz	r2, b49a8 <__udivmoddi4+0x30>
   b4992:	fa01 f302 	lsl.w	r3, r1, r2
   b4996:	f1c2 0120 	rsb	r1, r2, #32
   b499a:	fa20 f101 	lsr.w	r1, r0, r1
   b499e:	fa0c fc02 	lsl.w	ip, ip, r2
   b49a2:	ea41 0e03 	orr.w	lr, r1, r3
   b49a6:	4094      	lsls	r4, r2
   b49a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b49ac:	0c21      	lsrs	r1, r4, #16
   b49ae:	fbbe f6f8 	udiv	r6, lr, r8
   b49b2:	fa1f f78c 	uxth.w	r7, ip
   b49b6:	fb08 e316 	mls	r3, r8, r6, lr
   b49ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b49be:	fb06 f107 	mul.w	r1, r6, r7
   b49c2:	4299      	cmp	r1, r3
   b49c4:	d90a      	bls.n	b49dc <__udivmoddi4+0x64>
   b49c6:	eb1c 0303 	adds.w	r3, ip, r3
   b49ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b49ce:	f080 811f 	bcs.w	b4c10 <__udivmoddi4+0x298>
   b49d2:	4299      	cmp	r1, r3
   b49d4:	f240 811c 	bls.w	b4c10 <__udivmoddi4+0x298>
   b49d8:	3e02      	subs	r6, #2
   b49da:	4463      	add	r3, ip
   b49dc:	1a5b      	subs	r3, r3, r1
   b49de:	b2a4      	uxth	r4, r4
   b49e0:	fbb3 f0f8 	udiv	r0, r3, r8
   b49e4:	fb08 3310 	mls	r3, r8, r0, r3
   b49e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b49ec:	fb00 f707 	mul.w	r7, r0, r7
   b49f0:	42a7      	cmp	r7, r4
   b49f2:	d90a      	bls.n	b4a0a <__udivmoddi4+0x92>
   b49f4:	eb1c 0404 	adds.w	r4, ip, r4
   b49f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b49fc:	f080 810a 	bcs.w	b4c14 <__udivmoddi4+0x29c>
   b4a00:	42a7      	cmp	r7, r4
   b4a02:	f240 8107 	bls.w	b4c14 <__udivmoddi4+0x29c>
   b4a06:	4464      	add	r4, ip
   b4a08:	3802      	subs	r0, #2
   b4a0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4a0e:	1be4      	subs	r4, r4, r7
   b4a10:	2600      	movs	r6, #0
   b4a12:	b11d      	cbz	r5, b4a1c <__udivmoddi4+0xa4>
   b4a14:	40d4      	lsrs	r4, r2
   b4a16:	2300      	movs	r3, #0
   b4a18:	e9c5 4300 	strd	r4, r3, [r5]
   b4a1c:	4631      	mov	r1, r6
   b4a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a22:	428b      	cmp	r3, r1
   b4a24:	d909      	bls.n	b4a3a <__udivmoddi4+0xc2>
   b4a26:	2d00      	cmp	r5, #0
   b4a28:	f000 80ef 	beq.w	b4c0a <__udivmoddi4+0x292>
   b4a2c:	2600      	movs	r6, #0
   b4a2e:	e9c5 0100 	strd	r0, r1, [r5]
   b4a32:	4630      	mov	r0, r6
   b4a34:	4631      	mov	r1, r6
   b4a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a3a:	fab3 f683 	clz	r6, r3
   b4a3e:	2e00      	cmp	r6, #0
   b4a40:	d14a      	bne.n	b4ad8 <__udivmoddi4+0x160>
   b4a42:	428b      	cmp	r3, r1
   b4a44:	d302      	bcc.n	b4a4c <__udivmoddi4+0xd4>
   b4a46:	4282      	cmp	r2, r0
   b4a48:	f200 80f9 	bhi.w	b4c3e <__udivmoddi4+0x2c6>
   b4a4c:	1a84      	subs	r4, r0, r2
   b4a4e:	eb61 0303 	sbc.w	r3, r1, r3
   b4a52:	2001      	movs	r0, #1
   b4a54:	469e      	mov	lr, r3
   b4a56:	2d00      	cmp	r5, #0
   b4a58:	d0e0      	beq.n	b4a1c <__udivmoddi4+0xa4>
   b4a5a:	e9c5 4e00 	strd	r4, lr, [r5]
   b4a5e:	e7dd      	b.n	b4a1c <__udivmoddi4+0xa4>
   b4a60:	b902      	cbnz	r2, b4a64 <__udivmoddi4+0xec>
   b4a62:	deff      	udf	#255	; 0xff
   b4a64:	fab2 f282 	clz	r2, r2
   b4a68:	2a00      	cmp	r2, #0
   b4a6a:	f040 8092 	bne.w	b4b92 <__udivmoddi4+0x21a>
   b4a6e:	eba1 010c 	sub.w	r1, r1, ip
   b4a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4a76:	fa1f fe8c 	uxth.w	lr, ip
   b4a7a:	2601      	movs	r6, #1
   b4a7c:	0c20      	lsrs	r0, r4, #16
   b4a7e:	fbb1 f3f7 	udiv	r3, r1, r7
   b4a82:	fb07 1113 	mls	r1, r7, r3, r1
   b4a86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4a8a:	fb0e f003 	mul.w	r0, lr, r3
   b4a8e:	4288      	cmp	r0, r1
   b4a90:	d908      	bls.n	b4aa4 <__udivmoddi4+0x12c>
   b4a92:	eb1c 0101 	adds.w	r1, ip, r1
   b4a96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4a9a:	d202      	bcs.n	b4aa2 <__udivmoddi4+0x12a>
   b4a9c:	4288      	cmp	r0, r1
   b4a9e:	f200 80cb 	bhi.w	b4c38 <__udivmoddi4+0x2c0>
   b4aa2:	4643      	mov	r3, r8
   b4aa4:	1a09      	subs	r1, r1, r0
   b4aa6:	b2a4      	uxth	r4, r4
   b4aa8:	fbb1 f0f7 	udiv	r0, r1, r7
   b4aac:	fb07 1110 	mls	r1, r7, r0, r1
   b4ab0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4ab4:	fb0e fe00 	mul.w	lr, lr, r0
   b4ab8:	45a6      	cmp	lr, r4
   b4aba:	d908      	bls.n	b4ace <__udivmoddi4+0x156>
   b4abc:	eb1c 0404 	adds.w	r4, ip, r4
   b4ac0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4ac4:	d202      	bcs.n	b4acc <__udivmoddi4+0x154>
   b4ac6:	45a6      	cmp	lr, r4
   b4ac8:	f200 80bb 	bhi.w	b4c42 <__udivmoddi4+0x2ca>
   b4acc:	4608      	mov	r0, r1
   b4ace:	eba4 040e 	sub.w	r4, r4, lr
   b4ad2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4ad6:	e79c      	b.n	b4a12 <__udivmoddi4+0x9a>
   b4ad8:	f1c6 0720 	rsb	r7, r6, #32
   b4adc:	40b3      	lsls	r3, r6
   b4ade:	fa22 fc07 	lsr.w	ip, r2, r7
   b4ae2:	ea4c 0c03 	orr.w	ip, ip, r3
   b4ae6:	fa20 f407 	lsr.w	r4, r0, r7
   b4aea:	fa01 f306 	lsl.w	r3, r1, r6
   b4aee:	431c      	orrs	r4, r3
   b4af0:	40f9      	lsrs	r1, r7
   b4af2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4af6:	fa00 f306 	lsl.w	r3, r0, r6
   b4afa:	fbb1 f8f9 	udiv	r8, r1, r9
   b4afe:	0c20      	lsrs	r0, r4, #16
   b4b00:	fa1f fe8c 	uxth.w	lr, ip
   b4b04:	fb09 1118 	mls	r1, r9, r8, r1
   b4b08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4b0c:	fb08 f00e 	mul.w	r0, r8, lr
   b4b10:	4288      	cmp	r0, r1
   b4b12:	fa02 f206 	lsl.w	r2, r2, r6
   b4b16:	d90b      	bls.n	b4b30 <__udivmoddi4+0x1b8>
   b4b18:	eb1c 0101 	adds.w	r1, ip, r1
   b4b1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4b20:	f080 8088 	bcs.w	b4c34 <__udivmoddi4+0x2bc>
   b4b24:	4288      	cmp	r0, r1
   b4b26:	f240 8085 	bls.w	b4c34 <__udivmoddi4+0x2bc>
   b4b2a:	f1a8 0802 	sub.w	r8, r8, #2
   b4b2e:	4461      	add	r1, ip
   b4b30:	1a09      	subs	r1, r1, r0
   b4b32:	b2a4      	uxth	r4, r4
   b4b34:	fbb1 f0f9 	udiv	r0, r1, r9
   b4b38:	fb09 1110 	mls	r1, r9, r0, r1
   b4b3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4b40:	fb00 fe0e 	mul.w	lr, r0, lr
   b4b44:	458e      	cmp	lr, r1
   b4b46:	d908      	bls.n	b4b5a <__udivmoddi4+0x1e2>
   b4b48:	eb1c 0101 	adds.w	r1, ip, r1
   b4b4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4b50:	d26c      	bcs.n	b4c2c <__udivmoddi4+0x2b4>
   b4b52:	458e      	cmp	lr, r1
   b4b54:	d96a      	bls.n	b4c2c <__udivmoddi4+0x2b4>
   b4b56:	3802      	subs	r0, #2
   b4b58:	4461      	add	r1, ip
   b4b5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4b5e:	fba0 9402 	umull	r9, r4, r0, r2
   b4b62:	eba1 010e 	sub.w	r1, r1, lr
   b4b66:	42a1      	cmp	r1, r4
   b4b68:	46c8      	mov	r8, r9
   b4b6a:	46a6      	mov	lr, r4
   b4b6c:	d356      	bcc.n	b4c1c <__udivmoddi4+0x2a4>
   b4b6e:	d053      	beq.n	b4c18 <__udivmoddi4+0x2a0>
   b4b70:	b15d      	cbz	r5, b4b8a <__udivmoddi4+0x212>
   b4b72:	ebb3 0208 	subs.w	r2, r3, r8
   b4b76:	eb61 010e 	sbc.w	r1, r1, lr
   b4b7a:	fa01 f707 	lsl.w	r7, r1, r7
   b4b7e:	fa22 f306 	lsr.w	r3, r2, r6
   b4b82:	40f1      	lsrs	r1, r6
   b4b84:	431f      	orrs	r7, r3
   b4b86:	e9c5 7100 	strd	r7, r1, [r5]
   b4b8a:	2600      	movs	r6, #0
   b4b8c:	4631      	mov	r1, r6
   b4b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4b92:	f1c2 0320 	rsb	r3, r2, #32
   b4b96:	40d8      	lsrs	r0, r3
   b4b98:	fa0c fc02 	lsl.w	ip, ip, r2
   b4b9c:	fa21 f303 	lsr.w	r3, r1, r3
   b4ba0:	4091      	lsls	r1, r2
   b4ba2:	4301      	orrs	r1, r0
   b4ba4:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4ba8:	fa1f fe8c 	uxth.w	lr, ip
   b4bac:	fbb3 f0f7 	udiv	r0, r3, r7
   b4bb0:	fb07 3610 	mls	r6, r7, r0, r3
   b4bb4:	0c0b      	lsrs	r3, r1, #16
   b4bb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4bba:	fb00 f60e 	mul.w	r6, r0, lr
   b4bbe:	429e      	cmp	r6, r3
   b4bc0:	fa04 f402 	lsl.w	r4, r4, r2
   b4bc4:	d908      	bls.n	b4bd8 <__udivmoddi4+0x260>
   b4bc6:	eb1c 0303 	adds.w	r3, ip, r3
   b4bca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4bce:	d22f      	bcs.n	b4c30 <__udivmoddi4+0x2b8>
   b4bd0:	429e      	cmp	r6, r3
   b4bd2:	d92d      	bls.n	b4c30 <__udivmoddi4+0x2b8>
   b4bd4:	3802      	subs	r0, #2
   b4bd6:	4463      	add	r3, ip
   b4bd8:	1b9b      	subs	r3, r3, r6
   b4bda:	b289      	uxth	r1, r1
   b4bdc:	fbb3 f6f7 	udiv	r6, r3, r7
   b4be0:	fb07 3316 	mls	r3, r7, r6, r3
   b4be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4be8:	fb06 f30e 	mul.w	r3, r6, lr
   b4bec:	428b      	cmp	r3, r1
   b4bee:	d908      	bls.n	b4c02 <__udivmoddi4+0x28a>
   b4bf0:	eb1c 0101 	adds.w	r1, ip, r1
   b4bf4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4bf8:	d216      	bcs.n	b4c28 <__udivmoddi4+0x2b0>
   b4bfa:	428b      	cmp	r3, r1
   b4bfc:	d914      	bls.n	b4c28 <__udivmoddi4+0x2b0>
   b4bfe:	3e02      	subs	r6, #2
   b4c00:	4461      	add	r1, ip
   b4c02:	1ac9      	subs	r1, r1, r3
   b4c04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4c08:	e738      	b.n	b4a7c <__udivmoddi4+0x104>
   b4c0a:	462e      	mov	r6, r5
   b4c0c:	4628      	mov	r0, r5
   b4c0e:	e705      	b.n	b4a1c <__udivmoddi4+0xa4>
   b4c10:	4606      	mov	r6, r0
   b4c12:	e6e3      	b.n	b49dc <__udivmoddi4+0x64>
   b4c14:	4618      	mov	r0, r3
   b4c16:	e6f8      	b.n	b4a0a <__udivmoddi4+0x92>
   b4c18:	454b      	cmp	r3, r9
   b4c1a:	d2a9      	bcs.n	b4b70 <__udivmoddi4+0x1f8>
   b4c1c:	ebb9 0802 	subs.w	r8, r9, r2
   b4c20:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4c24:	3801      	subs	r0, #1
   b4c26:	e7a3      	b.n	b4b70 <__udivmoddi4+0x1f8>
   b4c28:	4646      	mov	r6, r8
   b4c2a:	e7ea      	b.n	b4c02 <__udivmoddi4+0x28a>
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	e794      	b.n	b4b5a <__udivmoddi4+0x1e2>
   b4c30:	4640      	mov	r0, r8
   b4c32:	e7d1      	b.n	b4bd8 <__udivmoddi4+0x260>
   b4c34:	46d0      	mov	r8, sl
   b4c36:	e77b      	b.n	b4b30 <__udivmoddi4+0x1b8>
   b4c38:	3b02      	subs	r3, #2
   b4c3a:	4461      	add	r1, ip
   b4c3c:	e732      	b.n	b4aa4 <__udivmoddi4+0x12c>
   b4c3e:	4630      	mov	r0, r6
   b4c40:	e709      	b.n	b4a56 <__udivmoddi4+0xde>
   b4c42:	4464      	add	r4, ip
   b4c44:	3802      	subs	r0, #2
   b4c46:	e742      	b.n	b4ace <__udivmoddi4+0x156>

000b4c48 <__aeabi_idiv0>:
   b4c48:	4770      	bx	lr
   b4c4a:	bf00      	nop

000b4c4c <strcmp>:
   b4c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4c50:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4c54:	2a01      	cmp	r2, #1
   b4c56:	bf28      	it	cs
   b4c58:	429a      	cmpcs	r2, r3
   b4c5a:	d0f7      	beq.n	b4c4c <strcmp>
   b4c5c:	1ad0      	subs	r0, r2, r3
   b4c5e:	4770      	bx	lr

000b4c60 <strlen>:
   b4c60:	4603      	mov	r3, r0
   b4c62:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4c66:	2a00      	cmp	r2, #0
   b4c68:	d1fb      	bne.n	b4c62 <strlen+0x2>
   b4c6a:	1a18      	subs	r0, r3, r0
   b4c6c:	3801      	subs	r0, #1
   b4c6e:	4770      	bx	lr

000b4c70 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4c70:	4809      	ldr	r0, [pc, #36]	; (b4c98 <module_user_pre_init+0x28>)
   b4c72:	490a      	ldr	r1, [pc, #40]	; (b4c9c <module_user_pre_init+0x2c>)
   b4c74:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4c76:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4c78:	d005      	beq.n	b4c86 <module_user_pre_init+0x16>
   b4c7a:	4a09      	ldr	r2, [pc, #36]	; (b4ca0 <module_user_pre_init+0x30>)
   b4c7c:	4282      	cmp	r2, r0
   b4c7e:	d002      	beq.n	b4c86 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4c80:	1a12      	subs	r2, r2, r0
   b4c82:	f003 ff4d 	bl	b8b20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4c86:	4807      	ldr	r0, [pc, #28]	; (b4ca4 <module_user_pre_init+0x34>)
   b4c88:	4a07      	ldr	r2, [pc, #28]	; (b4ca8 <module_user_pre_init+0x38>)
   b4c8a:	2100      	movs	r1, #0
   b4c8c:	1a12      	subs	r2, r2, r0
   b4c8e:	f003 ff55 	bl	b8b3c <memset>
    return &link_global_data_start;
}
   b4c92:	4801      	ldr	r0, [pc, #4]	; (b4c98 <module_user_pre_init+0x28>)
   b4c94:	bd08      	pop	{r3, pc}
   b4c96:	bf00      	nop
   b4c98:	2003e550 	.word	0x2003e550
   b4c9c:	000ba2f8 	.word	0x000ba2f8
   b4ca0:	2003e5bc 	.word	0x2003e5bc
   b4ca4:	2003e5c0 	.word	0x2003e5c0
   b4ca8:	2003e7f4 	.word	0x2003e7f4

000b4cac <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4cac:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cae:	4e07      	ldr	r6, [pc, #28]	; (b4ccc <module_user_init+0x20>)
   b4cb0:	4c07      	ldr	r4, [pc, #28]	; (b4cd0 <module_user_init+0x24>)
    module_user_init_hook();
   b4cb2:	f003 fca3 	bl	b85fc <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cb6:	1ba4      	subs	r4, r4, r6
   b4cb8:	08a4      	lsrs	r4, r4, #2
   b4cba:	2500      	movs	r5, #0
   b4cbc:	42ac      	cmp	r4, r5
   b4cbe:	d100      	bne.n	b4cc2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4cc0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4cc2:	f856 3b04 	ldr.w	r3, [r6], #4
   b4cc6:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cc8:	3501      	adds	r5, #1
   b4cca:	e7f7      	b.n	b4cbc <module_user_init+0x10>
   b4ccc:	000ba2a8 	.word	0x000ba2a8
   b4cd0:	000ba2cc 	.word	0x000ba2cc

000b4cd4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4cd4:	f000 be6a 	b.w	b59ac <setup>

000b4cd8 <module_user_loop>:
}

void module_user_loop() {
   b4cd8:	b508      	push	{r3, lr}
    loop();
   b4cda:	f000 fdeb 	bl	b58b4 <loop>
    _post_loop();
}
   b4cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4ce2:	f003 bc43 	b.w	b856c <_post_loop>

000b4ce6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ce6:	f002 bb35 	b.w	b7354 <malloc>

000b4cea <_Znaj>:
   b4cea:	f002 bb33 	b.w	b7354 <malloc>

000b4cee <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4cee:	f002 bb39 	b.w	b7364 <free>
	...

000b4cf4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4cf4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4cf6:	4a03      	ldr	r2, [pc, #12]	; (b4d04 <__cxa_pure_virtual+0x10>)
   b4cf8:	4903      	ldr	r1, [pc, #12]	; (b4d08 <__cxa_pure_virtual+0x14>)
   b4cfa:	200c      	movs	r0, #12
   b4cfc:	f002 fa7e 	bl	b71fc <panic_>
  while (1);
   b4d00:	e7fe      	b.n	b4d00 <__cxa_pure_virtual+0xc>
   b4d02:	bf00      	nop
   b4d04:	000b6e7d 	.word	0x000b6e7d
   b4d08:	000b8dc8 	.word	0x000b8dc8

000b4d0c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4d0c:	7800      	ldrb	r0, [r0, #0]
   b4d0e:	fab0 f080 	clz	r0, r0
   b4d12:	0940      	lsrs	r0, r0, #5
   b4d14:	4770      	bx	lr

000b4d16 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4d16:	2301      	movs	r3, #1
   b4d18:	7003      	strb	r3, [r0, #0]
   b4d1a:	4770      	bx	lr
   b4d1c:	0000      	movs	r0, r0
	...

000b4d20 <_ZN11Temperature6updateEv>:
  {
    pin = PIN;
    pinMode(pin, INPUT);
    updates.push_back(std::bind(&Temperature::update, this));
  }
  void update()
   b4d20:	b510      	push	{r4, lr}
   b4d22:	4604      	mov	r4, r0
  {
    val = analogRead(pin);
   b4d24:	8b00      	ldrh	r0, [r0, #24]
   b4d26:	f003 fd16 	bl	b8756 <analogRead>
   b4d2a:	6020      	str	r0, [r4, #0]
    celcius = (((val * 3.3) / 4095.0) - 0.5) * 100;
   b4d2c:	f7ff faca 	bl	b42c4 <__aeabi_i2d>
   b4d30:	a316      	add	r3, pc, #88	; (adr r3, b4d8c <_ZN11Temperature6updateEv+0x6c>)
   b4d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d36:	f7ff fb2f 	bl	b4398 <__aeabi_dmul>
   b4d3a:	a316      	add	r3, pc, #88	; (adr r3, b4d94 <_ZN11Temperature6updateEv+0x74>)
   b4d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d40:	f7ff fc54 	bl	b45ec <__aeabi_ddiv>
   b4d44:	4b0e      	ldr	r3, [pc, #56]	; (b4d80 <_ZN11Temperature6updateEv+0x60>)
   b4d46:	2200      	movs	r2, #0
   b4d48:	f7ff f96e 	bl	b4028 <__aeabi_dsub>
   b4d4c:	4b0d      	ldr	r3, [pc, #52]	; (b4d84 <_ZN11Temperature6updateEv+0x64>)
   b4d4e:	2200      	movs	r2, #0
   b4d50:	f7ff fb22 	bl	b4398 <__aeabi_dmul>
   b4d54:	4602      	mov	r2, r0
   b4d56:	460b      	mov	r3, r1
   b4d58:	e9c4 2302 	strd	r2, r3, [r4, #8]
    fahrenheit = celcius * 1.8 + 32;
   b4d5c:	a306      	add	r3, pc, #24	; (adr r3, b4d78 <_ZN11Temperature6updateEv+0x58>)
   b4d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d62:	f7ff fb19 	bl	b4398 <__aeabi_dmul>
   b4d66:	4b08      	ldr	r3, [pc, #32]	; (b4d88 <_ZN11Temperature6updateEv+0x68>)
   b4d68:	2200      	movs	r2, #0
   b4d6a:	f7ff f95f 	bl	b402c <__adddf3>
   b4d6e:	e9c4 0104 	strd	r0, r1, [r4, #16]
  }
   b4d72:	bd10      	pop	{r4, pc}
   b4d74:	f3af 8000 	nop.w
   b4d78:	cccccccd 	.word	0xcccccccd
   b4d7c:	3ffccccc 	.word	0x3ffccccc
   b4d80:	3fe00000 	.word	0x3fe00000
   b4d84:	40590000 	.word	0x40590000
   b4d88:	40400000 	.word	0x40400000
   b4d8c:	66666666 	.word	0x66666666
   b4d90:	400a6666 	.word	0x400a6666
   b4d94:	00000000 	.word	0x00000000
   b4d98:	40affe00 	.word	0x40affe00

000b4d9c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4d9c:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4d9e:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4da0:	685a      	ldr	r2, [r3, #4]
   b4da2:	6899      	ldr	r1, [r3, #8]
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	1054      	asrs	r4, r2, #1
   b4da8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4dac:	07d2      	lsls	r2, r2, #31
   b4dae:	bf48      	it	mi
   b4db0:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4db2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4db6:	bf48      	it	mi
   b4db8:	58d3      	ldrmi	r3, [r2, r3]
   b4dba:	4718      	bx	r3

000b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
   b4dbc:	b513      	push	{r0, r1, r4, lr}
   b4dbe:	460a      	mov	r2, r1
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4dc0:	4603      	mov	r3, r0
   b4dc2:	b1b0      	cbz	r0, b4df2 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0+0x36>
    _Function_base() : _M_manager(nullptr) { }
   b4dc4:	2100      	movs	r1, #0
   b4dc6:	6081      	str	r1, [r0, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4dcc:	466c      	mov	r4, sp
   b4dce:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4dd6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4dda:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4dde:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4de2:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4de4:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4de6:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4de8:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dea:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4dec:	68d8      	ldr	r0, [r3, #12]
   b4dee:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4df0:	60d9      	str	r1, [r3, #12]
   b4df2:	b002      	add	sp, #8
   b4df4:	bd10      	pop	{r4, pc}

000b4df6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4df6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4df8:	b538      	push	{r3, r4, r5, lr}
   b4dfa:	4604      	mov	r4, r0
	switch (__op)
   b4dfc:	d102      	bne.n	b4e04 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4dfe:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4e00:	6023      	str	r3, [r4, #0]
	}
   b4e02:	e003      	b.n	b4e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4e04:	2a02      	cmp	r2, #2
   b4e06:	d003      	beq.n	b4e10 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4e08:	2a03      	cmp	r2, #3
   b4e0a:	d00d      	beq.n	b4e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4e0c:	2000      	movs	r0, #0
   b4e0e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e10:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4e12:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e14:	f7ff ff67 	bl	b4ce6 <_Znwj>
   b4e18:	4603      	mov	r3, r0
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	d0f0      	beq.n	b4e00 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4e26:	e7eb      	b.n	b4e00 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4e28:	6800      	ldr	r0, [r0, #0]
   b4e2a:	2800      	cmp	r0, #0
   b4e2c:	d0ee      	beq.n	b4e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b4e2e:	210c      	movs	r1, #12
   b4e30:	f7ff ff5d 	bl	b4cee <_ZdlPvj>
   b4e34:	e7ea      	b.n	b4e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b4e38 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4e38:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4e3a:	f002 f827 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4e3e:	4b03      	ldr	r3, [pc, #12]	; (b4e4c <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4e40:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4e46:	f002 ba15 	b.w	b7274 <spark_process>
   b4e4a:	bf00      	nop
   b4e4c:	2003e72c 	.word	0x2003e72c

000b4e50 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4e50:	b510      	push	{r4, lr}
      if (_M_manager)
   b4e52:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4e54:	4604      	mov	r4, r0
      if (_M_manager)
   b4e56:	b113      	cbz	r3, b4e5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4e58:	2203      	movs	r2, #3
   b4e5a:	4601      	mov	r1, r0
   b4e5c:	4798      	blx	r3
    }
   b4e5e:	4620      	mov	r0, r4
   b4e60:	bd10      	pop	{r4, pc}

000b4e62 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e62:	6803      	ldr	r3, [r0, #0]
   b4e64:	b12b      	cbz	r3, b4e72 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4e66:	6842      	ldr	r2, [r0, #4]
   b4e68:	4293      	cmp	r3, r2
   b4e6a:	d202      	bcs.n	b4e72 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4e6c:	4618      	mov	r0, r3
   b4e6e:	f003 be4f 	b.w	b8b10 <atoi>
   b4e72:	2000      	movs	r0, #0
   b4e74:	4770      	bx	lr

000b4e76 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4e76:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e78:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4e7a:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e7c:	b145      	cbz	r5, b4e90 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4e7e:	6843      	ldr	r3, [r0, #4]
   b4e80:	429d      	cmp	r5, r3
   b4e82:	d205      	bcs.n	b4e90 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4e84:	4628      	mov	r0, r5
   b4e86:	f7ff feeb 	bl	b4c60 <strlen>
   b4e8a:	3001      	adds	r0, #1
   b4e8c:	4405      	add	r5, r0
   b4e8e:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4e90:	4620      	mov	r0, r4
   b4e92:	bd38      	pop	{r3, r4, r5, pc}

000b4e94 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e96:	4604      	mov	r4, r0
   b4e98:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4e9a:	460d      	mov	r5, r1
   b4e9c:	b921      	cbnz	r1, b4ea8 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4e9e:	6803      	ldr	r3, [r0, #0]
   b4ea0:	1c7a      	adds	r2, r7, #1
   b4ea2:	6042      	str	r2, [r0, #4]
   b4ea4:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4ea8:	4608      	mov	r0, r1
   b4eaa:	f7ff fed9 	bl	b4c60 <strlen>
    if (len + l > buff_size)
   b4eae:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4eb0:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4eb2:	19f2      	adds	r2, r6, r7
   b4eb4:	429a      	cmp	r2, r3
   b4eb6:	d8f6      	bhi.n	b4ea6 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4eb8:	6820      	ldr	r0, [r4, #0]
   b4eba:	4632      	mov	r2, r6
   b4ebc:	4629      	mov	r1, r5
   b4ebe:	4438      	add	r0, r7
   b4ec0:	f003 fe2e 	bl	b8b20 <memcpy>
    len += l;
   b4ec4:	6860      	ldr	r0, [r4, #4]
   b4ec6:	4430      	add	r0, r6
   b4ec8:	6060      	str	r0, [r4, #4]
   b4eca:	e7ec      	b.n	b4ea6 <_ZN10BlynkParam3addEPKc+0x12>

000b4ecc <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4ecc:	b538      	push	{r3, r4, r5, lr}
   b4ece:	4604      	mov	r4, r0
   b4ed0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4ed2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4ed6:	6825      	ldr	r5, [r4, #0]
   b4ed8:	4a04      	ldr	r2, [pc, #16]	; (b4eec <_ZN10BlynkParam3addEi+0x20>)
   b4eda:	1a09      	subs	r1, r1, r0
   b4edc:	4428      	add	r0, r5
   b4ede:	f002 fa51 	bl	b7384 <snprintf>
   b4ee2:	6863      	ldr	r3, [r4, #4]
   b4ee4:	3001      	adds	r0, #1
   b4ee6:	4403      	add	r3, r0
   b4ee8:	6063      	str	r3, [r4, #4]
    }
   b4eea:	bd38      	pop	{r3, r4, r5, pc}
   b4eec:	000b8ddd 	.word	0x000b8ddd

000b4ef0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4ef0:	b538      	push	{r3, r4, r5, lr}
   b4ef2:	4604      	mov	r4, r0
   b4ef4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4ef6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4efa:	6825      	ldr	r5, [r4, #0]
   b4efc:	4a04      	ldr	r2, [pc, #16]	; (b4f10 <_ZN10BlynkParam3addEl+0x20>)
   b4efe:	1a09      	subs	r1, r1, r0
   b4f00:	4428      	add	r0, r5
   b4f02:	f002 fa3f 	bl	b7384 <snprintf>
   b4f06:	6863      	ldr	r3, [r4, #4]
   b4f08:	3001      	adds	r0, #1
   b4f0a:	4403      	add	r3, r0
   b4f0c:	6063      	str	r3, [r4, #4]
    }
   b4f0e:	bd38      	pop	{r3, r4, r5, pc}
   b4f10:	000b8de0 	.word	0x000b8de0

000b4f14 <_Z6updatev>:
};

void update()
{
   b4f14:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f16:	4d09      	ldr	r5, [pc, #36]	; (b4f3c <_Z6updatev+0x28>)
  for (uint i = 0; i < updates.size(); i++)
   b4f18:	2400      	movs	r4, #0
   b4f1a:	e9d5 0300 	ldrd	r0, r3, [r5]
   b4f1e:	1a1b      	subs	r3, r3, r0
   b4f20:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   b4f24:	d209      	bcs.n	b4f3a <_Z6updatev+0x26>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b4f26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4f2a:	6883      	ldr	r3, [r0, #8]
   b4f2c:	b90b      	cbnz	r3, b4f32 <_Z6updatev+0x1e>
	__throw_bad_function_call();
   b4f2e:	f003 fcd4 	bl	b88da <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f32:	68c3      	ldr	r3, [r0, #12]
   b4f34:	4798      	blx	r3
   b4f36:	3401      	adds	r4, #1
   b4f38:	e7ef      	b.n	b4f1a <_Z6updatev+0x6>
  {
    updates[i]();
  }
   b4f3a:	bd38      	pop	{r3, r4, r5, pc}
   b4f3c:	2003e6b0 	.word	0x2003e6b0

000b4f40 <_Z11printToOled6String>:
  printToOled((String)tempMonitor.celcius);
  display.display();
}

void printToOled(String msg)
{
   b4f40:	b510      	push	{r4, lr}
  display.setTextSize(1);
   b4f42:	2101      	movs	r1, #1
{
   b4f44:	4604      	mov	r4, r0
  display.setTextSize(1);
   b4f46:	4806      	ldr	r0, [pc, #24]	; (b4f60 <_Z11printToOled6String+0x20>)
   b4f48:	f001 f9af 	bl	b62aa <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4f4c:	4804      	ldr	r0, [pc, #16]	; (b4f60 <_Z11printToOled6String+0x20>)
  display.setTextColor(WHITE);
  display.println(msg);
   b4f4e:	6821      	ldr	r1, [r4, #0]
   b4f50:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b4f54:	6143      	str	r3, [r0, #20]
   b4f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.println(msg);
   b4f5a:	f002 bc72 	b.w	b7842 <_ZN5Print7printlnEPKc>
   b4f5e:	bf00      	nop
   b4f60:	2003e61c 	.word	0x2003e61c

000b4f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4f64:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4f66:	2300      	movs	r3, #0
   b4f68:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4f6a:	6800      	ldr	r0, [r0, #0]
   b4f6c:	f003 f92e 	bl	b81cc <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4f70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4f74:	f001 beb9 	b.w	b6cea <BlynkNoOpCbk>

000b4f78 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f7c:	e9d0 8b00 	ldrd	r8, fp, [r0]
   b4f80:	4607      	mov	r7, r0

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4f82:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f86:	ebab 0008 	sub.w	r0, fp, r8
	if (max_size() - size() < __n)
   b4f8a:	ebb3 1f20 	cmp.w	r3, r0, asr #4
   b4f8e:	468a      	mov	sl, r1
   b4f90:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f92:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (max_size() - size() < __n)
   b4f96:	d102      	bne.n	b4f9e <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4f98:	4824      	ldr	r0, [pc, #144]	; (b502c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xb4>)
   b4f9a:	f003 fc9b 	bl	b88d4 <_ZSt20__throw_length_errorPKc>
   b4f9e:	2a01      	cmp	r2, #1
   b4fa0:	4614      	mov	r4, r2
   b4fa2:	bf38      	it	cc
   b4fa4:	2401      	movcc	r4, #1
   b4fa6:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4fa8:	ebaa 0508 	sub.w	r5, sl, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4fac:	d21b      	bcs.n	b4fe6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fae:	b1e4      	cbz	r4, b4fea <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
   b4fb0:	429c      	cmp	r4, r3
   b4fb2:	bf28      	it	cs
   b4fb4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fb6:	0120      	lsls	r0, r4, #4
   b4fb8:	9101      	str	r1, [sp, #4]
   b4fba:	f7ff fe94 	bl	b4ce6 <_Znwj>
   b4fbe:	9901      	ldr	r1, [sp, #4]
   b4fc0:	4606      	mov	r6, r0
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
   b4fc2:	1970      	adds	r0, r6, r5
   b4fc4:	f7ff fefa 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fc8:	4645      	mov	r5, r8
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b4fca:	4630      	mov	r0, r6
      for (; __first != __last; ++__first, (void)++__cur)
   b4fcc:	45aa      	cmp	sl, r5
   b4fce:	f100 0910 	add.w	r9, r0, #16
   b4fd2:	d00c      	beq.n	b4fee <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
   b4fd4:	4629      	mov	r1, r5
   b4fd6:	f7ff fef1 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
    class function<_Res(_ArgTypes...)>
   b4fda:	4628      	mov	r0, r5
   b4fdc:	f7ff ff38 	bl	b4e50 <_ZNSt14_Function_baseD1Ev>
   b4fe0:	3510      	adds	r5, #16
   b4fe2:	4648      	mov	r0, r9
   b4fe4:	e7f2      	b.n	b4fcc <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4fe6:	461c      	mov	r4, r3
   b4fe8:	e7e5      	b.n	b4fb6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fea:	4626      	mov	r6, r4
   b4fec:	e7e9      	b.n	b4fc2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
   b4fee:	455d      	cmp	r5, fp
   b4ff0:	d00a      	beq.n	b5008 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>
   b4ff2:	4629      	mov	r1, r5
   b4ff4:	4648      	mov	r0, r9
   b4ff6:	f7ff fee1 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
   b4ffa:	4628      	mov	r0, r5
   b4ffc:	f7ff ff28 	bl	b4e50 <_ZNSt14_Function_baseD1Ev>
   b5000:	3510      	adds	r5, #16
   b5002:	f109 0910 	add.w	r9, r9, #16
   b5006:	e7f2      	b.n	b4fee <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
	if (__p)
   b5008:	f1b8 0f00 	cmp.w	r8, #0
   b500c:	d005      	beq.n	b501a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa2>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b500e:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5010:	4640      	mov	r0, r8
   b5012:	eba1 0108 	sub.w	r1, r1, r8
   b5016:	f7ff fe6a 	bl	b4cee <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b501a:	eb06 1404 	add.w	r4, r6, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b501e:	e9c7 6900 	strd	r6, r9, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5022:	60bc      	str	r4, [r7, #8]
    }
   b5024:	b003      	add	sp, #12
   b5026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b502a:	bf00      	nop
   b502c:	000b8de4 	.word	0x000b8de4

000b5030 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b5030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b5034:	eb01 0902 	add.w	r9, r1, r2
   b5038:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b503a:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b503c:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b5040:	4680      	mov	r8, r0
   b5042:	460d      	mov	r5, r1
   b5044:	4616      	mov	r6, r2
    if (it >= param.end())
   b5046:	f080 8092 	bcs.w	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b504a:	a805      	add	r0, sp, #20
   b504c:	880f      	ldrh	r7, [r1, #0]
   b504e:	f7ff ff12 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b5052:	6803      	ldr	r3, [r0, #0]
   b5054:	454b      	cmp	r3, r9
   b5056:	f080 808a 	bcs.w	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b505a:	a805      	add	r0, sp, #20
   b505c:	f7ff ff01 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b5060:	f247 2376 	movw	r3, #29302	; 0x7276
   b5064:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b5066:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b5068:	f000 80a9 	beq.w	b51be <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b506c:	d827      	bhi.n	b50be <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b506e:	f247 2361 	movw	r3, #29281	; 0x7261
   b5072:	429f      	cmp	r7, r3
   b5074:	d07e      	beq.n	b5174 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b5076:	f247 2364 	movw	r3, #29284	; 0x7264
   b507a:	429f      	cmp	r7, r3
   b507c:	d042      	beq.n	b5104 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b507e:	f646 5370 	movw	r3, #28016	; 0x6d70
   b5082:	429f      	cmp	r7, r3
   b5084:	d128      	bne.n	b50d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b5086:	4e63      	ldr	r6, [pc, #396]	; (b5214 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b5088:	4f63      	ldr	r7, [pc, #396]	; (b5218 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b508a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b522c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b508e:	9b05      	ldr	r3, [sp, #20]
   b5090:	4599      	cmp	r9, r3
   b5092:	d96c      	bls.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b5094:	a805      	add	r0, sp, #20
   b5096:	f7ff fee4 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>
   b509a:	b2c4      	uxtb	r4, r0
            ++it;
   b509c:	a805      	add	r0, sp, #20
   b509e:	f7ff feea 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b50a2:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b50a4:	4631      	mov	r1, r6
   b50a6:	4628      	mov	r0, r5
   b50a8:	f7ff fdd0 	bl	b4c4c <strcmp>
   b50ac:	4601      	mov	r1, r0
   b50ae:	b9e0      	cbnz	r0, b50ea <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b50b0:	4620      	mov	r0, r4
   b50b2:	f003 fb13 	bl	b86dc <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b50b6:	a805      	add	r0, sp, #20
   b50b8:	f7ff fedd 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b50bc:	e7e7      	b.n	b508e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b50be:	f247 7364 	movw	r3, #30564	; 0x7764
   b50c2:	429f      	cmp	r7, r3
   b50c4:	d03f      	beq.n	b5146 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b50c6:	f247 7376 	movw	r3, #30582	; 0x7776
   b50ca:	429f      	cmp	r7, r3
   b50cc:	f000 8087 	beq.w	b51de <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b50d0:	f247 7361 	movw	r3, #30561	; 0x7761
   b50d4:	429f      	cmp	r7, r3
   b50d6:	d05f      	beq.n	b5198 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b50d8:	2300      	movs	r3, #0
   b50da:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b50de:	2202      	movs	r2, #2
   b50e0:	9200      	str	r2, [sp, #0]
   b50e2:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b50e6:	4619      	mov	r1, r3
   b50e8:	e029      	b.n	b513e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b50ea:	4639      	mov	r1, r7
   b50ec:	4628      	mov	r0, r5
   b50ee:	f7ff fdad 	bl	b4c4c <strcmp>
   b50f2:	b128      	cbz	r0, b5100 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b50f4:	4641      	mov	r1, r8
   b50f6:	4628      	mov	r0, r5
   b50f8:	f7ff fda8 	bl	b4c4c <strcmp>
   b50fc:	2800      	cmp	r0, #0
   b50fe:	d1da      	bne.n	b50b6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b5100:	2101      	movs	r1, #1
   b5102:	e7d5      	b.n	b50b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5104:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b5106:	4945      	ldr	r1, [pc, #276]	; (b521c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b5108:	9307      	str	r3, [sp, #28]
   b510a:	a807      	add	r0, sp, #28
   b510c:	2310      	movs	r3, #16
   b510e:	2500      	movs	r5, #0
   b5110:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5114:	f7ff febe 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5118:	a807      	add	r0, sp, #28
   b511a:	4621      	mov	r1, r4
   b511c:	f7ff fed6 	bl	b4ecc <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b5120:	4620      	mov	r0, r4
   b5122:	f003 fb05 	bl	b8730 <digitalRead>
        rsp.add(analogRead(pin));
   b5126:	4601      	mov	r1, r0
   b5128:	a807      	add	r0, sp, #28
   b512a:	f7ff fee1 	bl	b4ef0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b512e:	9b08      	ldr	r3, [sp, #32]
   b5130:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5134:	3b01      	subs	r3, #1
   b5136:	9300      	str	r3, [sp, #0]
   b5138:	9b07      	ldr	r3, [sp, #28]
   b513a:	462a      	mov	r2, r5
   b513c:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b513e:	4640      	mov	r0, r8
   b5140:	f000 fa84 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b5144:	e013      	b.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b5146:	a805      	add	r0, sp, #20
   b5148:	f7ff fe95 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b514c:	6803      	ldr	r3, [r0, #0]
   b514e:	4599      	cmp	r9, r3
   b5150:	d90d      	bls.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b5152:	b2a4      	uxth	r4, r4
   b5154:	2101      	movs	r1, #1
   b5156:	4620      	mov	r0, r4
   b5158:	f003 fac0 	bl	b86dc <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b515c:	a805      	add	r0, sp, #20
   b515e:	f7ff fe80 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>
   b5162:	1e01      	subs	r1, r0, #0
   b5164:	bf18      	it	ne
   b5166:	2101      	movne	r1, #1
   b5168:	4620      	mov	r0, r4
   b516a:	f003 fac8 	bl	b86fe <digitalWrite>
    }
}
   b516e:	b00f      	add	sp, #60	; 0x3c
   b5170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5174:	ab0a      	add	r3, sp, #40	; 0x28
   b5176:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b5178:	a807      	add	r0, sp, #28
   b517a:	2310      	movs	r3, #16
   b517c:	4928      	ldr	r1, [pc, #160]	; (b5220 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b517e:	2500      	movs	r5, #0
   b5180:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5184:	f7ff fe86 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5188:	a807      	add	r0, sp, #28
   b518a:	4621      	mov	r1, r4
   b518c:	f7ff fe9e 	bl	b4ecc <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b5190:	4620      	mov	r0, r4
   b5192:	f003 fae0 	bl	b8756 <analogRead>
   b5196:	e7c6      	b.n	b5126 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b5198:	a805      	add	r0, sp, #20
   b519a:	f7ff fe6c 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b519e:	6803      	ldr	r3, [r0, #0]
   b51a0:	4599      	cmp	r9, r3
   b51a2:	d9e4      	bls.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b51a4:	b2a4      	uxth	r4, r4
   b51a6:	2101      	movs	r1, #1
   b51a8:	4620      	mov	r0, r4
   b51aa:	f003 fa97 	bl	b86dc <pinMode>
        analogWrite(pin, it.asInt());
   b51ae:	a805      	add	r0, sp, #20
   b51b0:	f7ff fe57 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>
   b51b4:	4601      	mov	r1, r0
   b51b6:	4620      	mov	r0, r4
   b51b8:	f003 fae4 	bl	b8784 <_Z11analogWritetm>
    } break;
   b51bc:	e7d7      	b.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b51be:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b51c0:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b51c4:	f001 fd92 	bl	b6cec <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b51c8:	4603      	mov	r3, r0
            handler(req);
   b51ca:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b51cc:	b123      	cbz	r3, b51d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b51ce:	4a15      	ldr	r2, [pc, #84]	; (b5224 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b51d0:	4293      	cmp	r3, r2
   b51d2:	d001      	beq.n	b51d8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b51d4:	4798      	blx	r3
   b51d6:	e7ca      	b.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b51d8:	f001 fd85 	bl	b6ce6 <BlynkWidgetRead>
        }
    }
   b51dc:	e7c7      	b.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b51de:	a805      	add	r0, sp, #20
   b51e0:	f7ff fe49 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b51e4:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b51e6:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b51ea:	1b5d      	subs	r5, r3, r5
   b51ec:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b51ee:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b51f0:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b51f4:	950c      	str	r5, [sp, #48]	; 0x30
   b51f6:	f001 fd83 	bl	b6d00 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b51fa:	4603      	mov	r3, r0
            handler(req, param);
   b51fc:	a90a      	add	r1, sp, #40	; 0x28
   b51fe:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b5200:	b123      	cbz	r3, b520c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b5202:	4a09      	ldr	r2, [pc, #36]	; (b5228 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b5204:	4293      	cmp	r3, r2
   b5206:	d001      	beq.n	b520c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b5208:	4798      	blx	r3
   b520a:	e7b0      	b.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b520c:	f001 fd6c 	bl	b6ce8 <BlynkWidgetWrite>
    } break;
   b5210:	e7ad      	b.n	b516e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b5212:	bf00      	nop
   b5214:	000b8dfe 	.word	0x000b8dfe
   b5218:	000b8e01 	.word	0x000b8e01
   b521c:	000b8e09 	.word	0x000b8e09
   b5220:	000b8e0c 	.word	0x000b8e0c
   b5224:	000b6ce7 	.word	0x000b6ce7
   b5228:	000b6ce9 	.word	0x000b6ce9
   b522c:	000b8e05 	.word	0x000b8e05

000b5230 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b5230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5234:	b08c      	sub	sp, #48	; 0x30
   b5236:	af04      	add	r7, sp, #16
   b5238:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b523a:	2205      	movs	r2, #5
   b523c:	6800      	ldr	r0, [r0, #0]
   b523e:	1d39      	adds	r1, r7, #4
   b5240:	f002 fc25 	bl	b7a8e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b5244:	b3a8      	cbz	r0, b52b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b5246:	2805      	cmp	r0, #5
   b5248:	d004      	beq.n	b5254 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b524a:	2000      	movs	r0, #0
}
   b524c:	3720      	adds	r7, #32
   b524e:	46bd      	mov	sp, r7
   b5250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b5254:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5258:	f001 fed0 	bl	b6ffc <inet_ntohs>
   b525c:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5260:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b5264:	f001 feca 	bl	b6ffc <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b5268:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b526c:	f8a7 0007 	strh.w	r0, [r7, #7]
   b5270:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b5272:	2b00      	cmp	r3, #0
   b5274:	d0e9      	beq.n	b524a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b5276:	793b      	ldrb	r3, [r7, #4]
   b5278:	bb23      	cbnz	r3, b52c4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b527a:	f001 fd32 	bl	b6ce2 <_Z11BlynkMillisv>
   b527e:	4602      	mov	r2, r0
   b5280:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b5282:	7f60      	ldrb	r0, [r4, #29]
   b5284:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5288:	b9c0      	cbnz	r0, b52bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b528a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b528e:	2901      	cmp	r1, #1
   b5290:	d114      	bne.n	b52bc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b5292:	2b09      	cmp	r3, #9
   b5294:	d00f      	beq.n	b52b6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b5296:	2bc8      	cmp	r3, #200	; 0xc8
   b5298:	d001      	beq.n	b529e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b529a:	2b04      	cmp	r3, #4
   b529c:	d1d6      	bne.n	b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b529e:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b52a0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b52a2:	4620      	mov	r0, r4
                state = CONNECTED;
   b52a4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b52a6:	f000 fa81 	bl	b57ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b52aa:	f7ff fdc5 	bl	b4e38 <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b52ae:	f001 fd1c 	bl	b6cea <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b52b2:	2001      	movs	r0, #1
   b52b4:	e7ca      	b.n	b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b52b6:	2303      	movs	r3, #3
   b52b8:	7763      	strb	r3, [r4, #29]
                break;
   b52ba:	e7c7      	b.n	b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b52bc:	1f58      	subs	r0, r3, #5
   b52be:	bf18      	it	ne
   b52c0:	2001      	movne	r0, #1
   b52c2:	e7c3      	b.n	b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b52c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b52c8:	d903      	bls.n	b52d2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b52ca:	4620      	mov	r0, r4
   b52cc:	f7ff fe4a 	bl	b4f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b52d0:	e7ef      	b.n	b52b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b52d2:	f100 0308 	add.w	r3, r0, #8
   b52d6:	f023 0307 	bic.w	r3, r3, #7
   b52da:	466e      	mov	r6, sp
   b52dc:	ebad 0d03 	sub.w	sp, sp, r3
   b52e0:	ad04      	add	r5, sp, #16
   b52e2:	4602      	mov	r2, r0
   b52e4:	4629      	mov	r1, r5
   b52e6:	6820      	ldr	r0, [r4, #0]
   b52e8:	f002 fbd1 	bl	b7a8e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b52ec:	4580      	cmp	r8, r0
   b52ee:	f04f 0000 	mov.w	r0, #0
   b52f2:	d17f      	bne.n	b53f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b52f4:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b52f8:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b52fa:	f001 fcf2 	bl	b6ce2 <_Z11BlynkMillisv>
    switch (hdr.type)
   b52fe:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b5300:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b5302:	2b14      	cmp	r3, #20
   b5304:	f000 80a6 	beq.w	b5454 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5308:	d848      	bhi.n	b539c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b530a:	2b0f      	cmp	r3, #15
   b530c:	f000 80a2 	beq.w	b5454 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5310:	d807      	bhi.n	b5322 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b5312:	2b02      	cmp	r3, #2
   b5314:	d048      	beq.n	b53a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b5316:	2b06      	cmp	r3, #6
   b5318:	d051      	beq.n	b53be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b531a:	4620      	mov	r0, r4
   b531c:	f7ff fe22 	bl	b4f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5320:	e058      	b.n	b53d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b5322:	2b11      	cmp	r3, #17
   b5324:	d1f9      	bne.n	b531a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b5326:	2300      	movs	r3, #0
   b5328:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b532a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b532e:	442b      	add	r3, r5
        if (it >= param.end())
   b5330:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b5332:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b5336:	d24d      	bcs.n	b53d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b5338:	f107 000c 	add.w	r0, r7, #12
   b533c:	f8d5 8000 	ldr.w	r8, [r5]
   b5340:	f7ff fd99 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5344:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b5346:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b534a:	1b5d      	subs	r5, r3, r5
   b534c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b534e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b5352:	687b      	ldr	r3, [r7, #4]
   b5354:	61fd      	str	r5, [r7, #28]
   b5356:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b535a:	8363      	strh	r3, [r4, #26]
   b535c:	4b64      	ldr	r3, [pc, #400]	; (b54f0 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b535e:	4598      	cmp	r8, r3
   b5360:	f000 80bf 	beq.w	b54e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b5364:	f200 808c 	bhi.w	b5480 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b5368:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b536c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5370:	4413      	add	r3, r2
   b5372:	4598      	cmp	r8, r3
   b5374:	f000 809d 	beq.w	b54b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5378:	d879      	bhi.n	b546e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b537a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b537e:	3b06      	subs	r3, #6
   b5380:	4598      	cmp	r8, r3
   b5382:	f000 809c 	beq.w	b54be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5386:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b538a:	3303      	adds	r3, #3
   b538c:	4598      	cmp	r8, r3
   b538e:	d16b      	bne.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b5390:	f107 0114 	add.w	r1, r7, #20
   b5394:	4638      	mov	r0, r7
   b5396:	f001 fca7 	bl	b6ce8 <BlynkWidgetWrite>
   b539a:	e065      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b539c:	2b29      	cmp	r3, #41	; 0x29
   b539e:	d01b      	beq.n	b53d8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b53a0:	2b37      	cmp	r3, #55	; 0x37
   b53a2:	d017      	beq.n	b53d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b53a4:	2b1d      	cmp	r3, #29
   b53a6:	d1b8      	bne.n	b531a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b53a8:	7f63      	ldrb	r3, [r4, #29]
   b53aa:	b943      	cbnz	r3, b53be <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b53ac:	2301      	movs	r3, #1
   b53ae:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b53b0:	4620      	mov	r0, r4
   b53b2:	f000 f9fb 	bl	b57ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b53b6:	f7ff fd3f 	bl	b4e38 <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b53ba:	f001 fc96 	bl	b6cea <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b53be:	2300      	movs	r3, #0
   b53c0:	21c8      	movs	r1, #200	; 0xc8
   b53c2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b53c6:	9100      	str	r1, [sp, #0]
   b53c8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b53cc:	4619      	mov	r1, r3
   b53ce:	4620      	mov	r0, r4
   b53d0:	f000 f93c 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b53d4:	2001      	movs	r0, #1
   b53d6:	e00d      	b.n	b53f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b53d8:	68a3      	ldr	r3, [r4, #8]
   b53da:	b91b      	cbnz	r3, b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b53dc:	2040      	movs	r0, #64	; 0x40
   b53de:	f001 ffb9 	bl	b7354 <malloc>
   b53e2:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b53e4:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b53e8:	44a8      	add	r8, r5
        if (it >= param.end())
   b53ea:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b53ec:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b53f0:	d302      	bcc.n	b53f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b53f2:	2000      	movs	r0, #0
   b53f4:	46b5      	mov	sp, r6
   b53f6:	e729      	b.n	b524c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b53f8:	4629      	mov	r1, r5
   b53fa:	2240      	movs	r2, #64	; 0x40
   b53fc:	68a0      	ldr	r0, [r4, #8]
   b53fe:	f003 fbd3 	bl	b8ba8 <strncpy>
        redir_serv[63] = '\0';
   b5402:	68a3      	ldr	r3, [r4, #8]
   b5404:	2500      	movs	r5, #0
   b5406:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b540a:	f107 0014 	add.w	r0, r7, #20
   b540e:	f7ff fd32 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b5412:	6803      	ldr	r3, [r0, #0]
   b5414:	4598      	cmp	r8, r3
   b5416:	d91b      	bls.n	b5450 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b5418:	6978      	ldr	r0, [r7, #20]
   b541a:	b120      	cbz	r0, b5426 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b541c:	69bb      	ldr	r3, [r7, #24]
   b541e:	4298      	cmp	r0, r3
   b5420:	d214      	bcs.n	b544c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b5422:	f003 fb79 	bl	b8b18 <atol>
            redir_port = it.asLong();
   b5426:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b5428:	6820      	ldr	r0, [r4, #0]
   b542a:	f002 fecf 	bl	b81cc <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b542e:	6823      	ldr	r3, [r4, #0]
   b5430:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b5432:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b5434:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b5436:	2300      	movs	r3, #0
   b5438:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b543a:	f001 fc52 	bl	b6ce2 <_Z11BlynkMillisv>
   b543e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b5442:	3808      	subs	r0, #8
   b5444:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b5448:	6160      	str	r0, [r4, #20]
   b544a:	e7c3      	b.n	b53d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b544c:	4628      	mov	r0, r5
   b544e:	e7ea      	b.n	b5426 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b5450:	2550      	movs	r5, #80	; 0x50
   b5452:	e7e9      	b.n	b5428 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b5454:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b5456:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b545a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b545e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b5460:	4629      	mov	r1, r5
   b5462:	4620      	mov	r0, r4
   b5464:	f7ff fde4 	bl	b5030 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5468:	2300      	movs	r3, #0
   b546a:	8363      	strh	r3, [r4, #26]
   b546c:	e7b2      	b.n	b53d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b546e:	4b21      	ldr	r3, [pc, #132]	; (b54f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b5470:	4598      	cmp	r8, r3
   b5472:	d1f9      	bne.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b5474:	f107 0114 	add.w	r1, r7, #20
   b5478:	4638      	mov	r0, r7
   b547a:	f001 fc35 	bl	b6ce8 <BlynkWidgetWrite>
   b547e:	e7f3      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5480:	4b1d      	ldr	r3, [pc, #116]	; (b54f8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b5482:	4598      	cmp	r8, r3
   b5484:	d021      	beq.n	b54ca <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5486:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b548a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b548e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b5492:	4598      	cmp	r8, r3
   b5494:	d01f      	beq.n	b54d6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b5496:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b549a:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b549e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b54a2:	4598      	cmp	r8, r3
   b54a4:	d1e0      	bne.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b54a6:	f107 0114 	add.w	r1, r7, #20
   b54aa:	4638      	mov	r0, r7
   b54ac:	f001 fc1c 	bl	b6ce8 <BlynkWidgetWrite>
   b54b0:	e7da      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b54b2:	f107 0114 	add.w	r1, r7, #20
   b54b6:	4638      	mov	r0, r7
   b54b8:	f001 fc16 	bl	b6ce8 <BlynkWidgetWrite>
   b54bc:	e7d4      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b54be:	f107 0114 	add.w	r1, r7, #20
   b54c2:	4638      	mov	r0, r7
   b54c4:	f001 fc10 	bl	b6ce8 <BlynkWidgetWrite>
   b54c8:	e7ce      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b54ca:	f107 0114 	add.w	r1, r7, #20
   b54ce:	4638      	mov	r0, r7
   b54d0:	f001 fc0a 	bl	b6ce8 <BlynkWidgetWrite>
   b54d4:	e7c8      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b54d6:	f107 0114 	add.w	r1, r7, #20
   b54da:	4638      	mov	r0, r7
   b54dc:	f001 fc04 	bl	b6ce8 <BlynkWidgetWrite>
   b54e0:	e7c2      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b54e2:	f107 0114 	add.w	r1, r7, #20
   b54e6:	4638      	mov	r0, r7
   b54e8:	f001 fbfe 	bl	b6ce8 <BlynkWidgetWrite>
   b54ec:	e7bc      	b.n	b5468 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b54ee:	bf00      	nop
   b54f0:	00736676 	.word	0x00736676
   b54f4:	00676264 	.word	0x00676264
   b54f8:	6e6f6361 	.word	0x6e6f6361

000b54fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b54fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5500:	4604      	mov	r4, r0
   b5502:	b08c      	sub	sp, #48	; 0x30
   b5504:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b5506:	f7ff fc97 	bl	b4e38 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b550a:	7f63      	ldrb	r3, [r4, #29]
   b550c:	2b02      	cmp	r3, #2
   b550e:	d01e      	beq.n	b554e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b5510:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b5512:	8b62      	ldrh	r2, [r4, #26]
   b5514:	3301      	adds	r3, #1
   b5516:	b2db      	uxtb	r3, r3
   b5518:	7723      	strb	r3, [r4, #28]
   b551a:	b9aa      	cbnz	r2, b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b551c:	2b02      	cmp	r3, #2
   b551e:	d813      	bhi.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b5520:	6820      	ldr	r0, [r4, #0]
   b5522:	f002 fd1b 	bl	b7f5c <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b5526:	b1a8      	cbz	r0, b5554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b5528:	b925      	cbnz	r5, b5534 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b552a:	6820      	ldr	r0, [r4, #0]
   b552c:	f002 fdf4 	bl	b8118 <_ZN9TCPClient9availableEv>
   b5530:	2800      	cmp	r0, #0
   b5532:	dd0f      	ble.n	b5554 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b5534:	4620      	mov	r0, r4
   b5536:	f7ff fe7b 	bl	b5230 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b553a:	2800      	cmp	r0, #0
   b553c:	d1f5      	bne.n	b552a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b553e:	6820      	ldr	r0, [r4, #0]
   b5540:	f002 fe44 	bl	b81cc <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b5544:	f001 fbd1 	bl	b6cea <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5548:	7f23      	ldrb	r3, [r4, #28]
   b554a:	3b01      	subs	r3, #1
   b554c:	7723      	strb	r3, [r4, #28]
}
   b554e:	b00c      	add	sp, #48	; 0x30
   b5550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b5554:	f001 fbc5 	bl	b6ce2 <_Z11BlynkMillisv>
   b5558:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b555a:	6820      	ldr	r0, [r4, #0]
   b555c:	f002 fcfe 	bl	b7f5c <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b5560:	7f67      	ldrb	r7, [r4, #29]
   b5562:	2f01      	cmp	r7, #1
   b5564:	4606      	mov	r6, r0
   b5566:	d124      	bne.n	b55b2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b5568:	b920      	cbnz	r0, b5574 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b556a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b556c:	4620      	mov	r0, r4
   b556e:	f7ff fcf9 	bl	b4f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b5572:	e7e9      	b.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b5574:	68e3      	ldr	r3, [r4, #12]
   b5576:	f24f 6218 	movw	r2, #63000	; 0xf618
   b557a:	1aeb      	subs	r3, r5, r3
   b557c:	4293      	cmp	r3, r2
   b557e:	d8f5      	bhi.n	b556c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5580:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5584:	4293      	cmp	r3, r2
   b5586:	d803      	bhi.n	b5590 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5588:	6923      	ldr	r3, [r4, #16]
   b558a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b558c:	4293      	cmp	r3, r2
   b558e:	d9db      	bls.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5590:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5592:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b5596:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5598:	4293      	cmp	r3, r2
   b559a:	d9d5      	bls.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b559c:	2300      	movs	r3, #0
   b559e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b55a2:	9300      	str	r3, [sp, #0]
   b55a4:	461a      	mov	r2, r3
   b55a6:	2106      	movs	r1, #6
   b55a8:	4620      	mov	r0, r4
   b55aa:	f000 f84f 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b55ae:	6165      	str	r5, [r4, #20]
                return false;
   b55b0:	e7ca      	b.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b55b2:	2f00      	cmp	r7, #0
   b55b4:	d1c8      	bne.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55b6:	6963      	ldr	r3, [r4, #20]
   b55b8:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b55ba:	b140      	cbz	r0, b55ce <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b55bc:	f241 7270 	movw	r2, #6000	; 0x1770
   b55c0:	4293      	cmp	r3, r2
   b55c2:	d9c1      	bls.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b55c4:	6820      	ldr	r0, [r4, #0]
   b55c6:	f002 fe01 	bl	b81cc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b55ca:	7767      	strb	r7, [r4, #29]
            return false;
   b55cc:	e7bc      	b.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b55ce:	f241 3288 	movw	r2, #5000	; 0x1388
   b55d2:	4293      	cmp	r3, r2
   b55d4:	d9b8      	bls.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b55d6:	6820      	ldr	r0, [r4, #0]
   b55d8:	f002 fdf8 	bl	b81cc <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b55dc:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b55e0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b55e4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b55e8:	f1be 0f00 	cmp.w	lr, #0
   b55ec:	d01b      	beq.n	b5626 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b55ee:	4633      	mov	r3, r6
   b55f0:	4642      	mov	r2, r8
   b55f2:	4671      	mov	r1, lr
   b55f4:	4660      	mov	r0, ip
   b55f6:	f002 fc33 	bl	b7e60 <_ZN9TCPClient7connectEPKctm>
   b55fa:	2801      	cmp	r0, #1
   b55fc:	d1d7      	bne.n	b55ae <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b55fe:	6863      	ldr	r3, [r4, #4]
   b5600:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b5602:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5604:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5606:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5608:	f7ff fb2a 	bl	b4c60 <strlen>
   b560c:	2200      	movs	r2, #0
   b560e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5612:	9b05      	ldr	r3, [sp, #20]
   b5614:	9000      	str	r0, [sp, #0]
   b5616:	462a      	mov	r2, r5
   b5618:	211d      	movs	r1, #29
   b561a:	4620      	mov	r0, r4
   b561c:	f000 f816 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b5620:	6923      	ldr	r3, [r4, #16]
   b5622:	6163      	str	r3, [r4, #20]
            return true;
   b5624:	e790      	b.n	b5548 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5626:	4b08      	ldr	r3, [pc, #32]	; (b5648 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b5628:	9306      	str	r3, [sp, #24]
   b562a:	f10c 0720 	add.w	r7, ip, #32
   b562e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5630:	ae07      	add	r6, sp, #28
   b5632:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5634:	683b      	ldr	r3, [r7, #0]
   b5636:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b5638:	4642      	mov	r2, r8
   b563a:	4673      	mov	r3, lr
   b563c:	a906      	add	r1, sp, #24
   b563e:	4660      	mov	r0, ip
   b5640:	f002 fcee 	bl	b8020 <_ZN9TCPClient7connectE9IPAddresstm>
   b5644:	e7d9      	b.n	b55fa <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b5646:	bf00      	nop
   b5648:	000b9eb4 	.word	0x000b9eb4

000b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b564c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5650:	b083      	sub	sp, #12
   b5652:	af00      	add	r7, sp, #0
   b5654:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b5656:	6800      	ldr	r0, [r0, #0]
   b5658:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b565a:	4688      	mov	r8, r1
   b565c:	4616      	mov	r6, r2
   b565e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b5660:	46eb      	mov	fp, sp
   b5662:	f002 fc7b 	bl	b7f5c <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b5666:	2800      	cmp	r0, #0
   b5668:	f000 8081 	beq.w	b576e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b566c:	f1b8 0f1d 	cmp.w	r8, #29
   b5670:	d804      	bhi.n	b567c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b5672:	4b4d      	ldr	r3, [pc, #308]	; (b57a8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5674:	fa23 f308 	lsr.w	r3, r3, r8
   b5678:	07db      	lsls	r3, r3, #31
   b567a:	d402      	bmi.n	b5682 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b567c:	7f63      	ldrb	r3, [r4, #29]
   b567e:	2b01      	cmp	r3, #1
   b5680:	d175      	bne.n	b576e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b5682:	b946      	cbnz	r6, b5696 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5684:	8b66      	ldrh	r6, [r4, #26]
   b5686:	b936      	cbnz	r6, b5696 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5688:	8b23      	ldrh	r3, [r4, #24]
   b568a:	3301      	adds	r3, #1
   b568c:	b29b      	uxth	r3, r3
   b568e:	2b00      	cmp	r3, #0
   b5690:	d072      	beq.n	b5778 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b5692:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b5694:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b5696:	f1a8 030c 	sub.w	r3, r8, #12
   b569a:	2b08      	cmp	r3, #8
   b569c:	d816      	bhi.n	b56cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b569e:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b56a2:	4293      	cmp	r3, r2
   b56a4:	bf38      	it	cc
   b56a6:	4613      	movcc	r3, r2
   b56a8:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b56ac:	f001 fb19 	bl	b6ce2 <_Z11BlynkMillisv>
   b56b0:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b56b4:	2800      	cmp	r0, #0
   b56b6:	db61      	blt.n	b577c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b56b8:	2100      	movs	r1, #0
   b56ba:	4620      	mov	r0, r4
   b56bc:	f7ff ff1e 	bl	b54fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b56c0:	f001 fb0f 	bl	b6ce2 <_Z11BlynkMillisv>
   b56c4:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b56c8:	2800      	cmp	r0, #0
   b56ca:	daf5      	bge.n	b56b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b56cc:	f1b9 0f00 	cmp.w	r9, #0
   b56d0:	d05b      	beq.n	b578a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b56d2:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b56d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b56d6:	2a00      	cmp	r2, #0
   b56d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b56da:	bf08      	it	eq
   b56dc:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b56de:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b56e2:	f10a 0307 	add.w	r3, sl, #7
   b56e6:	f023 0307 	bic.w	r3, r3, #7
   b56ea:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b56ee:	4630      	mov	r0, r6
    hdr->type = cmd;
   b56f0:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b56f4:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b56f8:	f001 fc88 	bl	b700c <inet_htons>
    hdr->length = htons(length+length2);
   b56fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b56fe:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b5702:	18e8      	adds	r0, r5, r3
   b5704:	b280      	uxth	r0, r0
   b5706:	f001 fc81 	bl	b700c <inet_htons>
   b570a:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b570e:	f1b9 0f00 	cmp.w	r9, #0
   b5712:	d03c      	beq.n	b578e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b5714:	2d00      	cmp	r5, #0
   b5716:	d03a      	beq.n	b578e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5718:	462a      	mov	r2, r5
   b571a:	4649      	mov	r1, r9
   b571c:	f10d 0005 	add.w	r0, sp, #5
   b5720:	f003 f9fe 	bl	b8b20 <memcpy>
        pos += length;
   b5724:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b5726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5728:	b13b      	cbz	r3, b573a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b572c:	b12b      	cbz	r3, b573a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b572e:	461a      	mov	r2, r3
   b5730:	687b      	ldr	r3, [r7, #4]
   b5732:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b5734:	4418      	add	r0, r3
   b5736:	f003 f9f3 	bl	b8b20 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b573a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b573c:	4555      	cmp	r5, sl
   b573e:	d22a      	bcs.n	b5796 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b5740:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b5744:	687b      	ldr	r3, [r7, #4]
   b5746:	6820      	ldr	r0, [r4, #0]
   b5748:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b574c:	bf28      	it	cs
   b574e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b5752:	1959      	adds	r1, r3, r5
   b5754:	f002 fab5 	bl	b7cc2 <_ZN9TCPClient5writeEPKhj>
   b5758:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b575a:	2000      	movs	r0, #0
   b575c:	f001 fabf 	bl	b6cde <_Z10BlynkDelaym>
        if (w == 0) {
   b5760:	b9be      	cbnz	r6, b5792 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b5762:	6820      	ldr	r0, [r4, #0]
   b5764:	f002 fd32 	bl	b81cc <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5768:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b576a:	f001 fabe 	bl	b6cea <BlynkNoOpCbk>
}
   b576e:	370c      	adds	r7, #12
   b5770:	46dd      	mov	sp, fp
   b5772:	46bd      	mov	sp, r7
   b5774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5778:	2301      	movs	r3, #1
   b577a:	e78a      	b.n	b5692 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b577c:	7f21      	ldrb	r1, [r4, #28]
   b577e:	2900      	cmp	r1, #0
   b5780:	d1a4      	bne.n	b56cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b5782:	4620      	mov	r0, r4
   b5784:	f7ff feba 	bl	b54fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5788:	e7a0      	b.n	b56cc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b578a:	2305      	movs	r3, #5
   b578c:	e7a2      	b.n	b56d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b578e:	2005      	movs	r0, #5
   b5790:	e7c9      	b.n	b5726 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b5792:	4435      	add	r5, r6
    while (wlen < full_length) {
   b5794:	e7d2      	b.n	b573c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b5796:	d003      	beq.n	b57a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b5798:	4620      	mov	r0, r4
   b579a:	f7ff fbe3 	bl	b4f64 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b579e:	e7e6      	b.n	b576e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b57a0:	f001 fa9f 	bl	b6ce2 <_Z11BlynkMillisv>
   b57a4:	6120      	str	r0, [r4, #16]
   b57a6:	e7e2      	b.n	b576e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b57a8:	20000045 	.word	0x20000045

000b57ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b57ac:	b530      	push	{r4, r5, lr}
   b57ae:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b57b0:	ab08      	add	r3, sp, #32
   b57b2:	4604      	mov	r4, r0
   b57b4:	9305      	str	r3, [sp, #20]
   b57b6:	2500      	movs	r5, #0
   b57b8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b57ba:	a805      	add	r0, sp, #20
   b57bc:	490b      	ldr	r1, [pc, #44]	; (b57ec <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b57be:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b57c2:	f7ff fb67 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        add(val);
   b57c6:	a805      	add	r0, sp, #20
   b57c8:	4909      	ldr	r1, [pc, #36]	; (b57f0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b57ca:	f7ff fb63 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b57ce:	9b06      	ldr	r3, [sp, #24]
   b57d0:	9302      	str	r3, [sp, #8]
   b57d2:	9b05      	ldr	r3, [sp, #20]
   b57d4:	9301      	str	r3, [sp, #4]
   b57d6:	2365      	movs	r3, #101	; 0x65
   b57d8:	9300      	str	r3, [sp, #0]
   b57da:	462a      	mov	r2, r5
   b57dc:	4b05      	ldr	r3, [pc, #20]	; (b57f4 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b57de:	2111      	movs	r1, #17
   b57e0:	4620      	mov	r0, r4
   b57e2:	f7ff ff33 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b57e6:	b019      	add	sp, #100	; 0x64
   b57e8:	bd30      	pop	{r4, r5, pc}
   b57ea:	bf00      	nop
   b57ec:	000b8e0f 	.word	0x000b8e0f
   b57f0:	000b8e14 	.word	0x000b8e14
   b57f4:	000b8ea5 	.word	0x000b8ea5

000b57f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA11_cA19_cEEvRKT_RKT0_>:
        cmd.add(event_name);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
    }

    template <typename NAME, typename DESCR>
    void logEvent(const NAME& event_name, const DESCR& description) {
   b57f8:	b570      	push	{r4, r5, r6, lr}
   b57fa:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b57fe:	ab08      	add	r3, sp, #32
   b5800:	4616      	mov	r6, r2
   b5802:	2400      	movs	r4, #0
   b5804:	4605      	mov	r5, r0
   b5806:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   b5808:	a805      	add	r0, sp, #20
   b580a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b580e:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b5812:	f7ff fb3f 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        cmd.add(description);
   b5816:	4631      	mov	r1, r6
   b5818:	a805      	add	r0, sp, #20
   b581a:	f7ff fb3b 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   b581e:	9b06      	ldr	r3, [sp, #24]
   b5820:	3b01      	subs	r3, #1
   b5822:	9300      	str	r3, [sp, #0]
   b5824:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5828:	9b05      	ldr	r3, [sp, #20]
   b582a:	4622      	mov	r2, r4
   b582c:	2140      	movs	r1, #64	; 0x40
   b582e:	4628      	mov	r0, r5
   b5830:	f7ff ff0c 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5834:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b5838:	bd70      	pop	{r4, r5, r6, pc}
	...

000b583c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b583c:	b570      	push	{r4, r5, r6, lr}
   b583e:	ed2d 8b02 	vpush	{d8}
   b5842:	eeb0 8a40 	vmov.f32	s16, s0
   b5846:	eef0 8a60 	vmov.f32	s17, s1
   b584a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
   b584e:	ab08      	add	r3, sp, #32
   b5850:	2400      	movs	r4, #0
   b5852:	4605      	mov	r5, r0
   b5854:	460e      	mov	r6, r1
   b5856:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b5858:	a805      	add	r0, sp, #20
   b585a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b585e:	4913      	ldr	r1, [pc, #76]	; (b58ac <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   b5860:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b5864:	f7ff fb16 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b5868:	4631      	mov	r1, r6
   b586a:	a805      	add	r0, sp, #20
   b586c:	f7ff fb2e 	bl	b4ecc <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   b5870:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   b5874:	9805      	ldr	r0, [sp, #20]
   b5876:	4a0e      	ldr	r2, [pc, #56]	; (b58b0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   b5878:	1ac9      	subs	r1, r1, r3
   b587a:	ed8d 8b00 	vstr	d8, [sp]
   b587e:	4418      	add	r0, r3
   b5880:	f001 fd80 	bl	b7384 <snprintf>
   b5884:	1c43      	adds	r3, r0, #1
   b5886:	9806      	ldr	r0, [sp, #24]
   b5888:	4403      	add	r3, r0
   b588a:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b588c:	3b01      	subs	r3, #1
   b588e:	9300      	str	r3, [sp, #0]
   b5890:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5894:	9b05      	ldr	r3, [sp, #20]
   b5896:	4622      	mov	r2, r4
   b5898:	2114      	movs	r1, #20
   b589a:	4628      	mov	r0, r5
   b589c:	f7ff fed6 	bl	b564c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b58a0:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b58a4:	ecbd 8b02 	vpop	{d8}
   b58a8:	bd70      	pop	{r4, r5, r6, pc}
   b58aa:	bf00      	nop
   b58ac:	000b8e22 	.word	0x000b8e22
   b58b0:	000b8e25 	.word	0x000b8e25

000b58b4 <loop>:
{
   b58b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  display.loop();
   b58b6:	4c35      	ldr	r4, [pc, #212]	; (b598c <loop+0xd8>)
  update(); // This is the classes update
   b58b8:	f7ff fb2c 	bl	b4f14 <_Z6updatev>
  Blynk.run();
   b58bc:	2100      	movs	r1, #0
   b58be:	4834      	ldr	r0, [pc, #208]	; (b5990 <loop+0xdc>)
   b58c0:	f7ff fe1c 	bl	b54fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  display.loop();
   b58c4:	4620      	mov	r0, r4
   b58c6:	f001 fa96 	bl	b6df6 <_ZN16OledWingAdafruit4loopEv>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b58ca:	2300      	movs	r3, #0
  display.clearDisplay();
   b58cc:	4620      	mov	r0, r4
   b58ce:	6123      	str	r3, [r4, #16]
   b58d0:	f000 fea4 	bl	b661c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if (display.pressedA())
   b58d4:	4620      	mov	r0, r4
   b58d6:	f001 faa7 	bl	b6e28 <_ZN16OledWingAdafruit8pressedAEv>
   b58da:	b1c0      	cbz	r0, b590e <loop+0x5a>
    display.clearDisplay();
   b58dc:	4620      	mov	r0, r4
   b58de:	f000 fe9d 	bl	b661c <_ZN16Adafruit_SSD130612clearDisplayEv>
    Blynk.logEvent(BUTTON_A_CLICKED_EVENT, BUTTON_A_CLICKED_MSG);
   b58e2:	4a2c      	ldr	r2, [pc, #176]	; (b5994 <loop+0xe0>)
   b58e4:	492c      	ldr	r1, [pc, #176]	; (b5998 <loop+0xe4>)
   b58e6:	482a      	ldr	r0, [pc, #168]	; (b5990 <loop+0xdc>)
   b58e8:	f7ff ff86 	bl	b57f8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA11_cA19_cEEvRKT_RKT0_>
    printToOled("Sent Notification");
   b58ec:	492b      	ldr	r1, [pc, #172]	; (b599c <loop+0xe8>)
   b58ee:	4668      	mov	r0, sp
   b58f0:	f002 f98d 	bl	b7c0e <_ZN6StringC1EPK19__FlashStringHelper>
   b58f4:	4668      	mov	r0, sp
   b58f6:	f7ff fb23 	bl	b4f40 <_Z11printToOled6String>
   b58fa:	4668      	mov	r0, sp
   b58fc:	f002 f93c 	bl	b7b78 <_ZN6StringD1Ev>
    display.display();
   b5900:	4620      	mov	r0, r4
   b5902:	f001 f8f9 	bl	b6af8 <_ZN16Adafruit_SSD13067displayEv>
    delay(5000);
   b5906:	f241 3088 	movw	r0, #5000	; 0x1388
   b590a:	f001 fd6b 	bl	b73e4 <delay>
  Blynk.virtualWrite(V0, tempMonitor.celcius);
   b590e:	4c24      	ldr	r4, [pc, #144]	; (b59a0 <loop+0xec>)
   b5910:	481f      	ldr	r0, [pc, #124]	; (b5990 <loop+0xdc>)
   b5912:	ed94 0b02 	vldr	d0, [r4, #8]
   b5916:	2100      	movs	r1, #0
   b5918:	f7ff ff90 	bl	b583c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  Blynk.virtualWrite(V2, tempMonitor.fahrenheit);
   b591c:	ed94 0b04 	vldr	d0, [r4, #16]
   b5920:	481b      	ldr	r0, [pc, #108]	; (b5990 <loop+0xdc>)
   b5922:	2102      	movs	r1, #2
   b5924:	f7ff ff8a 	bl	b583c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  printToOled("Fahrenheit:");
   b5928:	491e      	ldr	r1, [pc, #120]	; (b59a4 <loop+0xf0>)
   b592a:	4668      	mov	r0, sp
   b592c:	f002 f96f 	bl	b7c0e <_ZN6StringC1EPK19__FlashStringHelper>
   b5930:	4668      	mov	r0, sp
   b5932:	f7ff fb05 	bl	b4f40 <_Z11printToOled6String>
   b5936:	4668      	mov	r0, sp
   b5938:	f002 f91e 	bl	b7b78 <_ZN6StringD1Ev>
  printToOled((String)tempMonitor.fahrenheit); // One of the values of the Temperature class
   b593c:	ed94 0b04 	vldr	d0, [r4, #16]
   b5940:	2106      	movs	r1, #6
   b5942:	4668      	mov	r0, sp
   b5944:	f002 f989 	bl	b7c5a <_ZN6StringC1Edi>
   b5948:	4668      	mov	r0, sp
   b594a:	f7ff faf9 	bl	b4f40 <_Z11printToOled6String>
   b594e:	4668      	mov	r0, sp
   b5950:	f002 f912 	bl	b7b78 <_ZN6StringD1Ev>
  printToOled("Celcius:");
   b5954:	4914      	ldr	r1, [pc, #80]	; (b59a8 <loop+0xf4>)
   b5956:	4668      	mov	r0, sp
   b5958:	f002 f959 	bl	b7c0e <_ZN6StringC1EPK19__FlashStringHelper>
   b595c:	4668      	mov	r0, sp
   b595e:	f7ff faef 	bl	b4f40 <_Z11printToOled6String>
   b5962:	4668      	mov	r0, sp
   b5964:	f002 f908 	bl	b7b78 <_ZN6StringD1Ev>
  printToOled((String)tempMonitor.celcius);
   b5968:	ed94 0b02 	vldr	d0, [r4, #8]
   b596c:	2106      	movs	r1, #6
   b596e:	4668      	mov	r0, sp
   b5970:	f002 f973 	bl	b7c5a <_ZN6StringC1Edi>
   b5974:	4668      	mov	r0, sp
   b5976:	f7ff fae3 	bl	b4f40 <_Z11printToOled6String>
   b597a:	4668      	mov	r0, sp
   b597c:	f002 f8fc 	bl	b7b78 <_ZN6StringD1Ev>
  display.display();
   b5980:	4802      	ldr	r0, [pc, #8]	; (b598c <loop+0xd8>)
}
   b5982:	b004      	add	sp, #16
   b5984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  display.display();
   b5988:	f001 b8b6 	b.w	b6af8 <_ZN16Adafruit_SSD13067displayEv>
   b598c:	2003e61c 	.word	0x2003e61c
   b5990:	2003e5c0 	.word	0x2003e5c0
   b5994:	000b8e2b 	.word	0x000b8e2b
   b5998:	000b8e3e 	.word	0x000b8e3e
   b599c:	000b8e49 	.word	0x000b8e49
   b59a0:	2003e690 	.word	0x2003e690
   b59a4:	000b8e5b 	.word	0x000b8e5b
   b59a8:	000b8e67 	.word	0x000b8e67

000b59ac <setup>:
{
   b59ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    pin = PIN;
   b59ae:	4c32      	ldr	r4, [pc, #200]	; (b5a78 <setup+0xcc>)
   b59b0:	b085      	sub	sp, #20
   b59b2:	200f      	movs	r0, #15
    pinMode(pin, INPUT);
   b59b4:	2100      	movs	r1, #0
    pin = PIN;
   b59b6:	8320      	strh	r0, [r4, #24]
    _Function_base() : _M_manager(nullptr) { }
   b59b8:	2500      	movs	r5, #0
    pinMode(pin, INPUT);
   b59ba:	f002 fe8f 	bl	b86dc <pinMode>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59be:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b59c0:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59c2:	f7ff f990 	bl	b4ce6 <_Znwj>
   b59c6:	b118      	cbz	r0, b59d0 <setup+0x24>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b59c8:	4b2c      	ldr	r3, [pc, #176]	; (b5a7c <setup+0xd0>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b59ca:	6084      	str	r4, [r0, #8]
   b59cc:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b59d0:	4b2b      	ldr	r3, [pc, #172]	; (b5a80 <setup+0xd4>)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b59d2:	4c2c      	ldr	r4, [pc, #176]	; (b5a84 <setup+0xd8>)
   b59d4:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b59d6:	4b2c      	ldr	r3, [pc, #176]	; (b5a88 <setup+0xdc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b59d8:	9000      	str	r0, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b59da:	9302      	str	r3, [sp, #8]
   b59dc:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   b59e0:	4298      	cmp	r0, r3
   b59e2:	d033      	beq.n	b5a4c <setup+0xa0>
   b59e4:	4669      	mov	r1, sp
   b59e6:	f7ff f9e9 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
	    ++this->_M_impl._M_finish;
   b59ea:	6863      	ldr	r3, [r4, #4]
   b59ec:	3310      	adds	r3, #16
   b59ee:	6063      	str	r3, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b59f0:	4668      	mov	r0, sp
   b59f2:	f7ff fa2d 	bl	b4e50 <_ZNSt14_Function_baseD1Ev>
        this->authkey = auth;
   b59f6:	4c25      	ldr	r4, [pc, #148]	; (b5a8c <setup+0xe0>)

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b59f8:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b59fc:	f001 f96f 	bl	b6cde <_Z10BlynkDelaym>
   b5a00:	4b23      	ldr	r3, [pc, #140]	; (b5a90 <setup+0xe4>)
   b5a02:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b5a04:	f001 f96d 	bl	b6ce2 <_Z11BlynkMillisv>
   b5a08:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b5a0c:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b5a0e:	4a21      	ldr	r2, [pc, #132]	; (b5a94 <setup+0xe8>)
   b5a10:	635a      	str	r2, [r3, #52]	; 0x34
   b5a12:	3808      	subs	r0, #8
   b5a14:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b5a18:	2250      	movs	r2, #80	; 0x50
   b5a1a:	6160      	str	r0, [r4, #20]
   b5a1c:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b5a1e:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b5a20:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b5a24:	6820      	ldr	r0, [r4, #0]
   b5a26:	f002 fbd1 	bl	b81cc <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b5a2a:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b5a2c:	f001 f959 	bl	b6ce2 <_Z11BlynkMillisv>
   b5a30:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b5a32:	7f63      	ldrb	r3, [r4, #29]
   b5a34:	2b01      	cmp	r3, #1
   b5a36:	d012      	beq.n	b5a5e <setup+0xb2>
               (BlynkMillis() - started < timeout))
   b5a38:	f001 f953 	bl	b6ce2 <_Z11BlynkMillisv>
   b5a3c:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b5a3e:	42b8      	cmp	r0, r7
   b5a40:	d80a      	bhi.n	b5a58 <setup+0xac>
            run();
   b5a42:	2100      	movs	r1, #0
   b5a44:	4620      	mov	r0, r4
   b5a46:	f7ff fd59 	bl	b54fc <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b5a4a:	e7f2      	b.n	b5a32 <setup+0x86>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b5a4c:	4601      	mov	r1, r0
   b5a4e:	466a      	mov	r2, sp
   b5a50:	4620      	mov	r0, r4
   b5a52:	f7ff fa91 	bl	b4f78 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   b5a56:	e7cb      	b.n	b59f0 <setup+0x44>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b5a58:	7f63      	ldrb	r3, [r4, #29]
   b5a5a:	2b01      	cmp	r3, #1
   b5a5c:	d1e2      	bne.n	b5a24 <setup+0x78>
  display.setup();
   b5a5e:	480e      	ldr	r0, [pc, #56]	; (b5a98 <setup+0xec>)
   b5a60:	f001 f9a0 	bl	b6da4 <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b5a64:	480c      	ldr	r0, [pc, #48]	; (b5a98 <setup+0xec>)
   b5a66:	f000 fdd9 	bl	b661c <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b5a6a:	480b      	ldr	r0, [pc, #44]	; (b5a98 <setup+0xec>)
}
   b5a6c:	b005      	add	sp, #20
   b5a6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  display.display();
   b5a72:	f001 b841 	b.w	b6af8 <_ZN16Adafruit_SSD13067displayEv>
   b5a76:	bf00      	nop
   b5a78:	2003e690 	.word	0x2003e690
   b5a7c:	000b4d21 	.word	0x000b4d21
   b5a80:	000b4d9d 	.word	0x000b4d9d
   b5a84:	2003e6b0 	.word	0x2003e6b0
   b5a88:	000b4df7 	.word	0x000b4df7
   b5a8c:	2003e5c0 	.word	0x2003e5c0
   b5a90:	000b8e70 	.word	0x000b8e70
   b5a94:	000b8e91 	.word	0x000b8e91
   b5a98:	2003e61c 	.word	0x2003e61c

000b5a9c <_GLOBAL__sub_I_Blynk>:
   b5a9c:	b510      	push	{r4, lr}
        : domain(NULL), port(0)
   b5a9e:	4c10      	ldr	r4, [pc, #64]	; (b5ae0 <_GLOBAL__sub_I_Blynk+0x44>)
   b5aa0:	4620      	mov	r0, r4
   b5aa2:	f002 fbdd 	bl	b8260 <_ZN9TCPClientC1Ev>
   b5aa6:	f104 001c 	add.w	r0, r4, #28
   b5aaa:	f001 fd81 	bl	b75b0 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5aae:	4b0d      	ldr	r3, [pc, #52]	; (b5ae4 <_GLOBAL__sub_I_Blynk+0x48>)
   b5ab0:	2100      	movs	r1, #0
   b5ab2:	e9c3 4100 	strd	r4, r1, [r3]
   b5ab6:	e9c3 1102 	strd	r1, r1, [r3, #8]
   b5aba:	e9c3 1104 	strd	r1, r1, [r3, #16]
   b5abe:	6199      	str	r1, [r3, #24]
   b5ac0:	8399      	strh	r1, [r3, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5ac2:	4b09      	ldr	r3, [pc, #36]	; (b5ae8 <_GLOBAL__sub_I_Blynk+0x4c>)
   b5ac4:	6361      	str	r1, [r4, #52]	; 0x34
   b5ac6:	e9c3 1100 	strd	r1, r1, [r3]
   b5aca:	6099      	str	r1, [r3, #8]
SYSTEM_THREAD(ENABLED)
   b5acc:	2001      	movs	r0, #1
   b5ace:	8721      	strh	r1, [r4, #56]	; 0x38
   b5ad0:	f001 fbb4 	bl	b723c <system_thread_set_state>
   b5ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   b5ad8:	4804      	ldr	r0, [pc, #16]	; (b5aec <_GLOBAL__sub_I_Blynk+0x50>)
   b5ada:	2107      	movs	r1, #7
   b5adc:	f001 b934 	b.w	b6d48 <_ZN16OledWingAdafruitC1Ei>
   b5ae0:	2003e5e0 	.word	0x2003e5e0
   b5ae4:	2003e5c0 	.word	0x2003e5c0
   b5ae8:	2003e6b0 	.word	0x2003e6b0
   b5aec:	2003e61c 	.word	0x2003e61c

000b5af0 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5af4:	b085      	sub	sp, #20
   b5af6:	461f      	mov	r7, r3
   b5af8:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5afc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5b00:	eba8 0902 	sub.w	r9, r8, r2
   b5b04:	eba7 0a01 	sub.w	sl, r7, r1
   b5b08:	f1b9 0f00 	cmp.w	r9, #0
   b5b0c:	bfb8      	it	lt
   b5b0e:	f1c9 0900 	rsblt	r9, r9, #0
   b5b12:	f1ba 0f00 	cmp.w	sl, #0
   b5b16:	bfb8      	it	lt
   b5b18:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5b1c:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5b1e:	4683      	mov	fp, r0
   b5b20:	460c      	mov	r4, r1
   b5b22:	4615      	mov	r5, r2
    if (steep) {
   b5b24:	dd04      	ble.n	b5b30 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5b26:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5b28:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5b2a:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5b2c:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5b2e:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5b30:	42bc      	cmp	r4, r7
   b5b32:	dd05      	ble.n	b5b40 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5b34:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5b36:	4645      	mov	r5, r8
   b5b38:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5b3a:	4622      	mov	r2, r4
   b5b3c:	463c      	mov	r4, r7
   b5b3e:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5b40:	1b3e      	subs	r6, r7, r4
   b5b42:	b2b2      	uxth	r2, r6
   b5b44:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5b46:	eba8 0205 	sub.w	r2, r8, r5
   b5b4a:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5b4e:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5b52:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5b56:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5b5a:	4545      	cmp	r5, r8
   b5b5c:	bfb4      	ite	lt
   b5b5e:	2201      	movlt	r2, #1
   b5b60:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5b64:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5b66:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5b68:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5b6a:	42bc      	cmp	r4, r7
   b5b6c:	dc1c      	bgt.n	b5ba8 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5b6e:	f8db 2000 	ldr.w	r2, [fp]
   b5b72:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5b74:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5b76:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5b7a:	bfc7      	ittee	gt
   b5b7c:	4629      	movgt	r1, r5
   b5b7e:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5b80:	462a      	movle	r2, r5
   b5b82:	4621      	movle	r1, r4
   b5b84:	4658      	mov	r0, fp
   b5b86:	47c0      	blx	r8
        }
        err -= dy;
   b5b88:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5b8a:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5b8c:	1ab6      	subs	r6, r6, r2
   b5b8e:	b2b1      	uxth	r1, r6
   b5b90:	b236      	sxth	r6, r6
        if (err < 0) {
   b5b92:	2e00      	cmp	r6, #0
   b5b94:	da05      	bge.n	b5ba2 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5b96:	9a02      	ldr	r2, [sp, #8]
   b5b98:	4415      	add	r5, r2
            err += dx;
   b5b9a:	9a00      	ldr	r2, [sp, #0]
   b5b9c:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5b9e:	b22d      	sxth	r5, r5
            err += dx;
   b5ba0:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5ba2:	3401      	adds	r4, #1
   b5ba4:	b224      	sxth	r4, r4
   b5ba6:	e7e0      	b.n	b5b6a <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5ba8:	b005      	add	sp, #20
   b5baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5bae <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5bae:	4770      	bx	lr

000b5bb0 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5bb0:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5bb2:	6804      	ldr	r4, [r0, #0]
   b5bb4:	6924      	ldr	r4, [r4, #16]
   b5bb6:	46a4      	mov	ip, r4
}
   b5bb8:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5bbc:	4760      	bx	ip

000b5bbe <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5bbe:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5bc0:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5bc2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5bc6:	9502      	str	r5, [sp, #8]
   b5bc8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5bca:	46a4      	mov	ip, r4
}
   b5bcc:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5bce:	4760      	bx	ip

000b5bd0 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5bd0:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5bd2:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5bd4:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5bd8:	9502      	str	r5, [sp, #8]
   b5bda:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5bdc:	46a4      	mov	ip, r4
}
   b5bde:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5be0:	4760      	bx	ip

000b5be2 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5be2:	b470      	push	{r4, r5, r6}
   b5be4:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5be8:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5bec:	6804      	ldr	r4, [r0, #0]
   b5bee:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5bf2:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5bf4:	46a4      	mov	ip, r4
}
   b5bf6:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5bf8:	4760      	bx	ip

000b5bfa <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5bfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5bfe:	461c      	mov	r4, r3
    startWrite();
   b5c00:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5c02:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5c06:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5c08:	4605      	mov	r5, r0
   b5c0a:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5c0c:	3c01      	subs	r4, #1
   b5c0e:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5c10:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5c12:	b224      	sxth	r4, r4
    startWrite();
   b5c14:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5c16:	682b      	ldr	r3, [r5, #0]
   b5c18:	f8cd 8004 	str.w	r8, [sp, #4]
   b5c1c:	9400      	str	r4, [sp, #0]
   b5c1e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5c20:	4628      	mov	r0, r5
   b5c22:	463b      	mov	r3, r7
   b5c24:	4632      	mov	r2, r6
   b5c26:	4639      	mov	r1, r7
   b5c28:	47a0      	blx	r4
    endWrite();
   b5c2a:	682b      	ldr	r3, [r5, #0]
   b5c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c2e:	4628      	mov	r0, r5
}
   b5c30:	b002      	add	sp, #8
   b5c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5c36:	4718      	bx	r3

000b5c38 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5c38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5c3c:	461d      	mov	r5, r3
    startWrite();
   b5c3e:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5c40:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5c44:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5c46:	4604      	mov	r4, r0
   b5c48:	4617      	mov	r7, r2
   b5c4a:	460e      	mov	r6, r1
    startWrite();
   b5c4c:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5c4e:	e9cd 7800 	strd	r7, r8, [sp]
   b5c52:	6822      	ldr	r2, [r4, #0]
   b5c54:	1e6b      	subs	r3, r5, #1
   b5c56:	4433      	add	r3, r6
   b5c58:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5c5a:	4620      	mov	r0, r4
   b5c5c:	b21b      	sxth	r3, r3
   b5c5e:	463a      	mov	r2, r7
   b5c60:	4631      	mov	r1, r6
   b5c62:	47a8      	blx	r5
    endWrite();
   b5c64:	6823      	ldr	r3, [r4, #0]
   b5c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c68:	4620      	mov	r0, r4
}
   b5c6a:	b002      	add	sp, #8
   b5c6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5c70:	4718      	bx	r3

000b5c72 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5c72:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5c76:	461e      	mov	r6, r3
    startWrite();
   b5c78:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5c7a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5c7e:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5c80:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5c84:	460c      	mov	r4, r1
   b5c86:	4605      	mov	r5, r0
   b5c88:	4617      	mov	r7, r2
    startWrite();
   b5c8a:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5c8c:	4426      	add	r6, r4
   b5c8e:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5c90:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5c92:	da0b      	bge.n	b5cac <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5c94:	f8cd 8000 	str.w	r8, [sp]
   b5c98:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5c9c:	4621      	mov	r1, r4
   b5c9e:	464b      	mov	r3, r9
   b5ca0:	463a      	mov	r2, r7
   b5ca2:	4628      	mov	r0, r5
   b5ca4:	3401      	adds	r4, #1
   b5ca6:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5ca8:	b224      	sxth	r4, r4
   b5caa:	e7f0      	b.n	b5c8e <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cae:	4628      	mov	r0, r5
}
   b5cb0:	b002      	add	sp, #8
   b5cb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5cb6:	4718      	bx	r3

000b5cb8 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5cb8:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5cba:	6802      	ldr	r2, [r0, #0]
   b5cbc:	9101      	str	r1, [sp, #4]
   b5cbe:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5cc2:	9100      	str	r1, [sp, #0]
   b5cc4:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5cc6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5cca:	2200      	movs	r2, #0
   b5ccc:	4611      	mov	r1, r2
   b5cce:	47a0      	blx	r4
}
   b5cd0:	b002      	add	sp, #8
   b5cd2:	bd10      	pop	{r4, pc}

000b5cd4 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5cd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5cd8:	4299      	cmp	r1, r3
        uint16_t color) {
   b5cda:	4616      	mov	r6, r2
   b5cdc:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5ce0:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5ce4:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5ce6:	4680      	mov	r8, r0
   b5ce8:	460d      	mov	r5, r1
   b5cea:	461c      	mov	r4, r3
    if(x0 == x1){
   b5cec:	d113      	bne.n	b5d16 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5cee:	42be      	cmp	r6, r7
   b5cf0:	bfc8      	it	gt
   b5cf2:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5cf4:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5cf8:	bfc4      	itt	gt
   b5cfa:	463e      	movgt	r6, r7
   b5cfc:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5cfe:	1c7b      	adds	r3, r7, #1
   b5d00:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5d02:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d04:	b21b      	sxth	r3, r3
   b5d06:	4632      	mov	r2, r6
   b5d08:	4629      	mov	r1, r5
   b5d0a:	4640      	mov	r0, r8
   b5d0c:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5d0e:	b003      	add	sp, #12
   b5d10:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d14:	4760      	bx	ip
    } else if(y0 == y1){
   b5d16:	42be      	cmp	r6, r7
   b5d18:	d10a      	bne.n	b5d30 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5d1a:	4299      	cmp	r1, r3
   b5d1c:	bfc2      	ittt	gt
   b5d1e:	460b      	movgt	r3, r1
   b5d20:	4625      	movgt	r5, r4
   b5d22:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5d24:	1c63      	adds	r3, r4, #1
   b5d26:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5d2a:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5d2c:	1b5b      	subs	r3, r3, r5
   b5d2e:	e7e9      	b.n	b5d04 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5d30:	6953      	ldr	r3, [r2, #20]
   b5d32:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5d34:	e9cd 7900 	strd	r7, r9, [sp]
   b5d38:	f8d8 3000 	ldr.w	r3, [r8]
   b5d3c:	4640      	mov	r0, r8
   b5d3e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5d40:	4632      	mov	r2, r6
   b5d42:	4623      	mov	r3, r4
   b5d44:	4629      	mov	r1, r5
   b5d46:	47b8      	blx	r7
        endWrite();
   b5d48:	f8d8 3000 	ldr.w	r3, [r8]
   b5d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d4e:	4640      	mov	r0, r8
}
   b5d50:	b003      	add	sp, #12
   b5d52:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5d56:	4718      	bx	r3

000b5d58 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5d58:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5d5c:	461d      	mov	r5, r3
    startWrite();
   b5d5e:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5d60:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5d64:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5d66:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5d6a:	4604      	mov	r4, r0
   b5d6c:	460f      	mov	r7, r1
   b5d6e:	4616      	mov	r6, r2
    startWrite();
   b5d70:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5d72:	6823      	ldr	r3, [r4, #0]
   b5d74:	f8cd 8000 	str.w	r8, [sp]
   b5d78:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5d7c:	4632      	mov	r2, r6
   b5d7e:	462b      	mov	r3, r5
   b5d80:	4639      	mov	r1, r7
   b5d82:	4620      	mov	r0, r4
   b5d84:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5d86:	6823      	ldr	r3, [r4, #0]
   b5d88:	f8cd 8000 	str.w	r8, [sp]
   b5d8c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5d90:	4432      	add	r2, r6
   b5d92:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5d96:	4639      	mov	r1, r7
   b5d98:	462b      	mov	r3, r5
   b5d9a:	4620      	mov	r0, r4
   b5d9c:	b212      	sxth	r2, r2
   b5d9e:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5da0:	6823      	ldr	r3, [r4, #0]
   b5da2:	f8cd 8000 	str.w	r8, [sp]
   b5da6:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5daa:	4632      	mov	r2, r6
   b5dac:	464b      	mov	r3, r9
   b5dae:	4639      	mov	r1, r7
   b5db0:	4620      	mov	r0, r4
   b5db2:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5db4:	1e6b      	subs	r3, r5, #1
   b5db6:	19d9      	adds	r1, r3, r7
   b5db8:	6823      	ldr	r3, [r4, #0]
   b5dba:	f8cd 8000 	str.w	r8, [sp]
   b5dbe:	6a1d      	ldr	r5, [r3, #32]
   b5dc0:	4620      	mov	r0, r4
   b5dc2:	464b      	mov	r3, r9
   b5dc4:	4632      	mov	r2, r6
   b5dc6:	b209      	sxth	r1, r1
   b5dc8:	47a8      	blx	r5
    endWrite();
   b5dca:	6823      	ldr	r3, [r4, #0]
   b5dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5dce:	4620      	mov	r0, r4
}
   b5dd0:	b002      	add	sp, #8
   b5dd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5dd6:	4718      	bx	r3

000b5dd8 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5dd8:	4770      	bx	lr

000b5dda <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5dda:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5dde:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5de2:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5de4:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5de6:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5dea:	bf59      	ittee	pl
   b5dec:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5dee:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5df0:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5df2:	81c3      	strhmi	r3, [r0, #14]
}
   b5df4:	4770      	bx	lr
	...

000b5df8 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5df8:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5dfa:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5dfc:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5dfe:	4a07      	ldr	r2, [pc, #28]	; (b5e1c <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5e00:	4d07      	ldr	r5, [pc, #28]	; (b5e20 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5e02:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b5e04:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5e06:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5e0c:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5e10:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5e12:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5e14:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5e16:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5e18:	6204      	str	r4, [r0, #32]
}
   b5e1a:	bd30      	pop	{r4, r5, pc}
   b5e1c:	01000101 	.word	0x01000101
   b5e20:	000b9414 	.word	0x000b9414

000b5e24 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e28:	b089      	sub	sp, #36	; 0x24
   b5e2a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5e2e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e30:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5e34:	9304      	str	r3, [sp, #16]
   b5e36:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5e3a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5e3c:	9305      	str	r3, [sp, #20]
   b5e3e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5e42:	4604      	mov	r4, r0
    startWrite();
   b5e44:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5e46:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5e4a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5e4e:	bf48      	it	mi
   b5e50:	f108 020e 	addmi.w	r2, r8, #14
   b5e54:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5e58:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5e5a:	4635      	mov	r5, r6
   b5e5c:	9b03      	ldr	r3, [sp, #12]
   b5e5e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5e60:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5e64:	189a      	adds	r2, r3, r2
   b5e66:	9b05      	ldr	r3, [sp, #20]
   b5e68:	428b      	cmp	r3, r1
   b5e6a:	b212      	sxth	r2, r2
   b5e6c:	dd27      	ble.n	b5ebe <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e6e:	9b04      	ldr	r3, [sp, #16]
   b5e70:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5e72:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e76:	9306      	str	r3, [sp, #24]
   b5e78:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5e7c:	4580      	cmp	r8, r0
   b5e7e:	fa1f f189 	uxth.w	r1, r9
   b5e82:	dd17      	ble.n	b5eb4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5e84:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e86:	bf05      	ittet	eq
   b5e88:	9b06      	ldreq	r3, [sp, #24]
   b5e8a:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5e8c:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e8e:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5e90:	bf18      	it	ne
   b5e92:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5e94:	062b      	lsls	r3, r5, #24
   b5e96:	d50a      	bpl.n	b5eae <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5e98:	9b02      	ldr	r3, [sp, #8]
   b5e9a:	6820      	ldr	r0, [r4, #0]
   b5e9c:	9207      	str	r2, [sp, #28]
   b5e9e:	4419      	add	r1, r3
   b5ea0:	6983      	ldr	r3, [r0, #24]
   b5ea2:	b209      	sxth	r1, r1
   b5ea4:	461f      	mov	r7, r3
   b5ea6:	4620      	mov	r0, r4
   b5ea8:	4653      	mov	r3, sl
   b5eaa:	47b8      	blx	r7
   b5eac:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5eae:	f109 0901 	add.w	r9, r9, #1
   b5eb2:	e7e1      	b.n	b5e78 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5eb4:	9b01      	ldr	r3, [sp, #4]
   b5eb6:	3301      	adds	r3, #1
   b5eb8:	9301      	str	r3, [sp, #4]
   b5eba:	445e      	add	r6, fp
   b5ebc:	e7ce      	b.n	b5e5c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5ebe:	6823      	ldr	r3, [r4, #0]
   b5ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ec2:	4620      	mov	r0, r4
}
   b5ec4:	b009      	add	sp, #36	; 0x24
   b5ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5eca:	4718      	bx	r3

000b5ecc <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5ed0:	ed2d 8b02 	vpush	{d8}
   b5ed4:	b091      	sub	sp, #68	; 0x44
   b5ed6:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5ed8:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5eda:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5ede:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5ee2:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5ee6:	9103      	str	r1, [sp, #12]
   b5ee8:	461f      	mov	r7, r3
   b5eea:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5eee:	9304      	str	r3, [sp, #16]
   b5ef0:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5ef2:	2a00      	cmp	r2, #0
   b5ef4:	f040 80c5 	bne.w	b6082 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5ef8:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5efc:	428b      	cmp	r3, r1
   b5efe:	f340 814c 	ble.w	b619a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5f02:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5f06:	42b3      	cmp	r3, r6
   b5f08:	f340 8147 	ble.w	b619a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5f0c:	2306      	movs	r3, #6
   b5f0e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5f12:	2b00      	cmp	r3, #0
   b5f14:	f340 8141 	ble.w	b619a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5f18:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5f1c:	2b00      	cmp	r3, #0
   b5f1e:	f340 813c 	ble.w	b619a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5f22:	7f03      	ldrb	r3, [r0, #28]
   b5f24:	b91b      	cbnz	r3, b5f2e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5f26:	2faf      	cmp	r7, #175	; 0xaf
   b5f28:	bf84      	itt	hi
   b5f2a:	3701      	addhi	r7, #1
   b5f2c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5f2e:	f8db 3000 	ldr.w	r3, [fp]
   b5f32:	4658      	mov	r0, fp
   b5f34:	695b      	ldr	r3, [r3, #20]
   b5f36:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f38:	2205      	movs	r2, #5
   b5f3a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5f3c:	2200      	movs	r2, #0
   b5f3e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f40:	4a98      	ldr	r2, [pc, #608]	; (b61a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5f42:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5f46:	18d3      	adds	r3, r2, r3
   b5f48:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5f4a:	b2b3      	uxth	r3, r6
   b5f4c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5f4e:	9a05      	ldr	r2, [sp, #20]
   b5f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5f52:	5c9b      	ldrb	r3, [r3, r2]
   b5f54:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5f56:	b2ab      	uxth	r3, r5
   b5f58:	930b      	str	r3, [sp, #44]	; 0x2c
   b5f5a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5f5e:	9308      	str	r3, [sp, #32]
   b5f60:	9b03      	ldr	r3, [sp, #12]
   b5f62:	fb02 f905 	mul.w	r9, r2, r5
   b5f66:	fa19 f983 	uxtah	r9, r9, r3
   b5f6a:	fa0f f389 	sxth.w	r3, r9
   b5f6e:	ee08 3a10 	vmov	s16, r3
   b5f72:	2308      	movs	r3, #8
   b5f74:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5f76:	9b03      	ldr	r3, [sp, #12]
   b5f78:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5f7c:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5f80:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5f84:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5f86:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5f8a:	07d2      	lsls	r2, r2, #31
   b5f8c:	d552      	bpl.n	b6034 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5f8e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5f90:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5f94:	d13e      	bne.n	b6014 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5f96:	2c01      	cmp	r4, #1
   b5f98:	d13c      	bne.n	b6014 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5f9a:	699b      	ldr	r3, [r3, #24]
   b5f9c:	9906      	ldr	r1, [sp, #24]
   b5f9e:	461f      	mov	r7, r3
   b5fa0:	9b04      	ldr	r3, [sp, #16]
   b5fa2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5fa4:	b212      	sxth	r2, r2
   b5fa6:	4651      	mov	r1, sl
   b5fa8:	4658      	mov	r0, fp
   b5faa:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5fac:	f109 0301 	add.w	r3, r9, #1
   b5fb0:	fa4f f983 	sxtb.w	r9, r3
   b5fb4:	9b07      	ldr	r3, [sp, #28]
   b5fb6:	085b      	lsrs	r3, r3, #1
   b5fb8:	9307      	str	r3, [sp, #28]
   b5fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5fbc:	3b01      	subs	r3, #1
   b5fbe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5fc2:	930a      	str	r3, [sp, #40]	; 0x28
   b5fc4:	d1de      	bne.n	b5f84 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5fc6:	9f05      	ldr	r7, [sp, #20]
   b5fc8:	3701      	adds	r7, #1
   b5fca:	b27b      	sxtb	r3, r7
   b5fcc:	9305      	str	r3, [sp, #20]
   b5fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5fd0:	3b01      	subs	r3, #1
   b5fd2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5fd6:	9309      	str	r3, [sp, #36]	; 0x24
   b5fd8:	d1b9      	bne.n	b5f4e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5fda:	9b04      	ldr	r3, [sp, #16]
   b5fdc:	4543      	cmp	r3, r8
   b5fde:	d00f      	beq.n	b6000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5fe0:	2d01      	cmp	r5, #1
   b5fe2:	f8db 3000 	ldr.w	r3, [fp]
   b5fe6:	d13b      	bne.n	b6060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5fe8:	2c01      	cmp	r4, #1
   b5fea:	d139      	bne.n	b6060 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5fec:	9908      	ldr	r1, [sp, #32]
   b5fee:	f8cd 8000 	str.w	r8, [sp]
   b5ff2:	3105      	adds	r1, #5
   b5ff4:	6a1c      	ldr	r4, [r3, #32]
   b5ff6:	4632      	mov	r2, r6
   b5ff8:	2308      	movs	r3, #8
   b5ffa:	b209      	sxth	r1, r1
   b5ffc:	4658      	mov	r0, fp
   b5ffe:	47a0      	blx	r4
        endWrite();
   b6000:	f8db 3000 	ldr.w	r3, [fp]
   b6004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6006:	4658      	mov	r0, fp
}
   b6008:	b011      	add	sp, #68	; 0x44
   b600a:	ecbd 8b02 	vpop	{d8}
   b600e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6012:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6014:	9906      	ldr	r1, [sp, #24]
   b6016:	fb14 f202 	smulbb	r2, r4, r2
   b601a:	440a      	add	r2, r1
   b601c:	9904      	ldr	r1, [sp, #16]
   b601e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6020:	9400      	str	r4, [sp, #0]
   b6022:	69db      	ldr	r3, [r3, #28]
   b6024:	ee18 1a10 	vmov	r1, s16
   b6028:	461f      	mov	r7, r3
   b602a:	b212      	sxth	r2, r2
   b602c:	462b      	mov	r3, r5
   b602e:	4658      	mov	r0, fp
   b6030:	47b8      	blx	r7
   b6032:	e7bb      	b.n	b5fac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6034:	9a04      	ldr	r2, [sp, #16]
   b6036:	4542      	cmp	r2, r8
   b6038:	d0b8      	beq.n	b5fac <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b603a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b603c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6040:	d107      	bne.n	b6052 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6042:	2c01      	cmp	r4, #1
   b6044:	d105      	bne.n	b6052 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b6046:	699b      	ldr	r3, [r3, #24]
   b6048:	9906      	ldr	r1, [sp, #24]
   b604a:	461f      	mov	r7, r3
   b604c:	440a      	add	r2, r1
   b604e:	4643      	mov	r3, r8
   b6050:	e7a8      	b.n	b5fa4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6052:	9906      	ldr	r1, [sp, #24]
   b6054:	f8cd 8004 	str.w	r8, [sp, #4]
   b6058:	fb14 f202 	smulbb	r2, r4, r2
   b605c:	440a      	add	r2, r1
   b605e:	e7df      	b.n	b6020 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b6060:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6062:	f8cd 8004 	str.w	r8, [sp, #4]
   b6066:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b606a:	9a08      	ldr	r2, [sp, #32]
   b606c:	00e4      	lsls	r4, r4, #3
   b606e:	440a      	add	r2, r1
   b6070:	4611      	mov	r1, r2
   b6072:	9400      	str	r4, [sp, #0]
   b6074:	69dc      	ldr	r4, [r3, #28]
   b6076:	4632      	mov	r2, r6
   b6078:	462b      	mov	r3, r5
   b607a:	b209      	sxth	r1, r1
   b607c:	4658      	mov	r0, fp
   b607e:	47a0      	blx	r4
        endWrite();
   b6080:	e7be      	b.n	b6000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6082:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b6084:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b6086:	6812      	ldr	r2, [r2, #0]
   b6088:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b608a:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b608c:	b2ff      	uxtb	r7, r7
   b608e:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b6092:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b6096:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6098:	789a      	ldrb	r2, [r3, #2]
   b609a:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b609c:	78da      	ldrb	r2, [r3, #3]
   b609e:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b60a0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b60a2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b60a6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b60aa:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b60ac:	d801      	bhi.n	b60b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b60ae:	2c01      	cmp	r4, #1
   b60b0:	d957      	bls.n	b6162 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b60b2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b60b6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b60b8:	fa0f f38a 	sxth.w	r3, sl
   b60bc:	9307      	str	r3, [sp, #28]
        startWrite();
   b60be:	f8db 3000 	ldr.w	r3, [fp]
   b60c2:	4658      	mov	r0, fp
   b60c4:	695b      	ldr	r3, [r3, #20]
   b60c6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60c8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b60ca:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60ce:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60d0:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b60d4:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b60d6:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60d8:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b60da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b60dc:	429f      	cmp	r7, r3
   b60de:	d28f      	bcs.n	b6000 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60e0:	9b07      	ldr	r3, [sp, #28]
   b60e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b60e4:	443b      	add	r3, r7
   b60e6:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b60ea:	2200      	movs	r2, #0
   b60ec:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60f0:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60f2:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60f6:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60fa:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b60fe:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6100:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6102:	9905      	ldr	r1, [sp, #20]
   b6104:	4291      	cmp	r1, r2
   b6106:	d241      	bcs.n	b618c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b6108:	1c5a      	adds	r2, r3, #1
   b610a:	b2d2      	uxtb	r2, r2
   b610c:	075b      	lsls	r3, r3, #29
   b610e:	920d      	str	r2, [sp, #52]	; 0x34
   b6110:	d107      	bne.n	b6122 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6112:	9b06      	ldr	r3, [sp, #24]
   b6114:	9906      	ldr	r1, [sp, #24]
   b6116:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6118:	3301      	adds	r3, #1
   b611a:	b29b      	uxth	r3, r3
   b611c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6120:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6122:	f019 0f80 	tst.w	r9, #128	; 0x80
   b6126:	d012      	beq.n	b614e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b6128:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b612a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b612e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6132:	d11a      	bne.n	b616a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6134:	2c01      	cmp	r4, #1
   b6136:	d118      	bne.n	b616a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b613a:	699b      	ldr	r3, [r3, #24]
   b613c:	4411      	add	r1, r2
   b613e:	9a05      	ldr	r2, [sp, #20]
   b6140:	4411      	add	r1, r2
   b6142:	461e      	mov	r6, r3
   b6144:	4652      	mov	r2, sl
   b6146:	9b04      	ldr	r3, [sp, #16]
   b6148:	b209      	sxth	r1, r1
   b614a:	4658      	mov	r0, fp
   b614c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b614e:	9e05      	ldr	r6, [sp, #20]
   b6150:	3601      	adds	r6, #1
   b6152:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6154:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b6158:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b615a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b615e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6160:	e7ce      	b.n	b6100 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b6162:	2300      	movs	r3, #0
   b6164:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6168:	e7a9      	b.n	b60be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b616a:	9805      	ldr	r0, [sp, #20]
   b616c:	9a08      	ldr	r2, [sp, #32]
   b616e:	4402      	add	r2, r0
   b6170:	fb02 1105 	mla	r1, r2, r5, r1
   b6174:	9a04      	ldr	r2, [sp, #16]
   b6176:	e9cd 4200 	strd	r4, r2, [sp]
   b617a:	69db      	ldr	r3, [r3, #28]
   b617c:	ee18 2a10 	vmov	r2, s16
   b6180:	461e      	mov	r6, r3
   b6182:	b209      	sxth	r1, r1
   b6184:	462b      	mov	r3, r5
   b6186:	4658      	mov	r0, fp
   b6188:	47b0      	blx	r6
   b618a:	e7e0      	b.n	b614e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b618c:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b618e:	3701      	adds	r7, #1
   b6190:	4498      	add	r8, r3
   b6192:	fa5f f888 	uxtb.w	r8, r8
   b6196:	b2ff      	uxtb	r7, r7
   b6198:	e79f      	b.n	b60da <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b619a:	b011      	add	sp, #68	; 0x44
   b619c:	ecbd 8b02 	vpop	{d8}
   b61a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b61a4:	000b8f0c 	.word	0x000b8f0c

000b61a8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b61a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b61aa:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b61ac:	b085      	sub	sp, #20
   b61ae:	4604      	mov	r4, r0
   b61b0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b61b2:	2a00      	cmp	r2, #0
   b61b4:	d134      	bne.n	b6220 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b61b6:	290a      	cmp	r1, #10
   b61b8:	d108      	bne.n	b61cc <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b61ba:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b61bc:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b61be:	7e42      	ldrb	r2, [r0, #25]
   b61c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b61c4:	8263      	strh	r3, [r4, #18]
}
   b61c6:	2001      	movs	r0, #1
   b61c8:	b005      	add	sp, #20
   b61ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b61cc:	290d      	cmp	r1, #13
   b61ce:	d0fa      	beq.n	b61c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b61d0:	7ee1      	ldrb	r1, [r4, #27]
   b61d2:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b61d4:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b61d6:	b171      	cbz	r1, b61f6 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b61d8:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b61dc:	2106      	movs	r1, #6
   b61de:	fb11 6100 	smlabb	r1, r1, r0, r6
   b61e2:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b61e6:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b61e8:	bfc1      	itttt	gt
   b61ea:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b61ee:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b61f0:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b61f4:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b61f6:	8ae2      	ldrh	r2, [r4, #22]
   b61f8:	9201      	str	r2, [sp, #4]
   b61fa:	8aa2      	ldrh	r2, [r4, #20]
   b61fc:	9200      	str	r2, [sp, #0]
   b61fe:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6202:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6206:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b620a:	4620      	mov	r0, r4
   b620c:	f7ff fe5e 	bl	b5ecc <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6210:	7e23      	ldrb	r3, [r4, #24]
   b6212:	8a22      	ldrh	r2, [r4, #16]
   b6214:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6218:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b621c:	8223      	strh	r3, [r4, #16]
   b621e:	e7d2      	b.n	b61c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6220:	290a      	cmp	r1, #10
   b6222:	d107      	bne.n	b6234 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6224:	2300      	movs	r3, #0
   b6226:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6228:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b622a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b622c:	8a43      	ldrh	r3, [r0, #18]
   b622e:	fb01 3302 	mla	r3, r1, r2, r3
   b6232:	e7c7      	b.n	b61c4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6234:	290d      	cmp	r1, #13
   b6236:	d0c6      	beq.n	b61c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6238:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b623a:	42a9      	cmp	r1, r5
   b623c:	d3c3      	bcc.n	b61c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b623e:	7a51      	ldrb	r1, [r2, #9]
   b6240:	4299      	cmp	r1, r3
   b6242:	d3c0      	bcc.n	b61c6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6244:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b6246:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b6248:	b2ed      	uxtb	r5, r5
   b624a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b624e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6250:	b328      	cbz	r0, b629e <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6252:	78e9      	ldrb	r1, [r5, #3]
   b6254:	b319      	cbz	r1, b629e <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6256:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6258:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b625a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b625c:	b191      	cbz	r1, b6284 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b625e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b6262:	4408      	add	r0, r1
   b6264:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6268:	fb06 1100 	mla	r1, r6, r0, r1
   b626c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b6270:	4281      	cmp	r1, r0
   b6272:	dd07      	ble.n	b6284 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6274:	2000      	movs	r0, #0
   b6276:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6278:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b627c:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b627e:	fb02 1207 	mla	r2, r2, r7, r1
   b6282:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6284:	8ae2      	ldrh	r2, [r4, #22]
   b6286:	9201      	str	r2, [sp, #4]
   b6288:	8aa2      	ldrh	r2, [r4, #20]
   b628a:	9200      	str	r2, [sp, #0]
   b628c:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b6290:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6294:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6298:	4620      	mov	r0, r4
   b629a:	f7ff fe17 	bl	b5ecc <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b629e:	7929      	ldrb	r1, [r5, #4]
   b62a0:	7e22      	ldrb	r2, [r4, #24]
   b62a2:	8a23      	ldrh	r3, [r4, #16]
   b62a4:	fb01 3302 	mla	r3, r1, r2, r3
   b62a8:	e7b8      	b.n	b621c <_ZN12Adafruit_GFX5writeEh+0x74>

000b62aa <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b62aa:	2901      	cmp	r1, #1
   b62ac:	bf38      	it	cc
   b62ae:	2101      	movcc	r1, #1
   b62b0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b62b2:	7641      	strb	r1, [r0, #25]
}
   b62b4:	4770      	bx	lr

000b62b6 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b62b6:	4770      	bx	lr

000b62b8 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b62b8:	b510      	push	{r4, lr}
  }
   b62ba:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b62bc:	4604      	mov	r4, r0
  }
   b62be:	f7fe fd16 	bl	b4cee <_ZdlPvj>
   b62c2:	4620      	mov	r0, r4
   b62c4:	bd10      	pop	{r4, pc}

000b62c6 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b62c6:	b40e      	push	{r1, r2, r3}
   b62c8:	b503      	push	{r0, r1, lr}
   b62ca:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b62cc:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b62ce:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b62d2:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b62d4:	f001 fadd 	bl	b7892 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b62d8:	b002      	add	sp, #8
   b62da:	f85d eb04 	ldr.w	lr, [sp], #4
   b62de:	b003      	add	sp, #12
   b62e0:	4770      	bx	lr
	...

000b62e4 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b62e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b62e6:	4604      	mov	r4, r0
   b62e8:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b62ea:	7922      	ldrb	r2, [r4, #4]
   b62ec:	68a3      	ldr	r3, [r4, #8]
   b62ee:	b132      	cbz	r2, b62fe <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b62f0:	b9a3      	cbnz	r3, b631c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b62f2:	490b      	ldr	r1, [pc, #44]	; (b6320 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b62f4:	b002      	add	sp, #8
   b62f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b62fa:	f001 ba8f 	b.w	b781c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b62fe:	4a09      	ldr	r2, [pc, #36]	; (b6324 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b6300:	7b26      	ldrb	r6, [r4, #12]
   b6302:	4d09      	ldr	r5, [pc, #36]	; (b6328 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b6304:	4909      	ldr	r1, [pc, #36]	; (b632c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b6306:	7b64      	ldrb	r4, [r4, #13]
   b6308:	2e01      	cmp	r6, #1
   b630a:	bf18      	it	ne
   b630c:	4629      	movne	r1, r5
   b630e:	e9cd 1400 	strd	r1, r4, [sp]
   b6312:	4907      	ldr	r1, [pc, #28]	; (b6330 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b6314:	f7ff ffd7 	bl	b62c6 <_ZN5Print6printfEPKcz>
  }
   b6318:	b002      	add	sp, #8
   b631a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b631c:	4a05      	ldr	r2, [pc, #20]	; (b6334 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b631e:	e7ef      	b.n	b6300 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b6320:	000b9475 	.word	0x000b9475
   b6324:	000b946c 	.word	0x000b946c
   b6328:	000b9471 	.word	0x000b9471
   b632c:	000b946d 	.word	0x000b946d
   b6330:	000b948b 	.word	0x000b948b
   b6334:	000b9464 	.word	0x000b9464

000b6338 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6338:	b510      	push	{r4, lr}
   b633a:	4b04      	ldr	r3, [pc, #16]	; (b634c <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b633c:	6003      	str	r3, [r0, #0]
   b633e:	4604      	mov	r4, r0
  if(buffer) {
   b6340:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6342:	b108      	cbz	r0, b6348 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b6344:	f001 f80e 	bl	b7364 <free>
    buffer = NULL;
  }
}
   b6348:	4620      	mov	r0, r4
   b634a:	bd10      	pop	{r4, pc}
   b634c:	000b9964 	.word	0x000b9964

000b6350 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b6350:	b510      	push	{r4, lr}
   b6352:	4604      	mov	r4, r0
}
   b6354:	f7ff fff0 	bl	b6338 <_ZN16Adafruit_SSD1306D1Ev>
   b6358:	4620      	mov	r0, r4
   b635a:	2150      	movs	r1, #80	; 0x50
   b635c:	f7fe fcc7 	bl	b4cee <_ZdlPvj>
   b6360:	4620      	mov	r0, r4
   b6362:	bd10      	pop	{r4, pc}

000b6364 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6364:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6366:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6368:	db4b      	blt.n	b6402 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b636a:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b636e:	428c      	cmp	r4, r1
   b6370:	dd47      	ble.n	b6402 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6372:	2a00      	cmp	r2, #0
   b6374:	db45      	blt.n	b6402 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6376:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b637a:	4294      	cmp	r4, r2
   b637c:	dd41      	ble.n	b6402 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b637e:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b6380:	2c02      	cmp	r4, #2
   b6382:	d01f      	beq.n	b63c4 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6384:	2c03      	cmp	r4, #3
   b6386:	d026      	beq.n	b63d6 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6388:	2c01      	cmp	r4, #1
   b638a:	d104      	bne.n	b6396 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b638c:	8904      	ldrh	r4, [r0, #8]
   b638e:	43d2      	mvns	r2, r2
   b6390:	4414      	add	r4, r2
      break;
   b6392:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6394:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6396:	2b01      	cmp	r3, #1
   b6398:	d023      	beq.n	b63e2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b639a:	2b02      	cmp	r3, #2
   b639c:	d032      	beq.n	b6404 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b639e:	bb83      	cbnz	r3, b6402 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b63a0:	2a00      	cmp	r2, #0
   b63a2:	4613      	mov	r3, r2
   b63a4:	8904      	ldrh	r4, [r0, #8]
   b63a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b63a8:	bfb8      	it	lt
   b63aa:	1dd3      	addlt	r3, r2, #7
   b63ac:	10db      	asrs	r3, r3, #3
   b63ae:	fb13 1104 	smlabb	r1, r3, r4, r1
   b63b2:	f002 0207 	and.w	r2, r2, #7
   b63b6:	2301      	movs	r3, #1
   b63b8:	4093      	lsls	r3, r2
   b63ba:	5c42      	ldrb	r2, [r0, r1]
   b63bc:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b63c0:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b63c2:	e01e      	b.n	b6402 <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b63c4:	8904      	ldrh	r4, [r0, #8]
   b63c6:	3c01      	subs	r4, #1
   b63c8:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b63ca:	8944      	ldrh	r4, [r0, #10]
   b63cc:	43d2      	mvns	r2, r2
   b63ce:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b63d0:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b63d2:	b212      	sxth	r2, r2
      break;
   b63d4:	e7df      	b.n	b6396 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b63d6:	8944      	ldrh	r4, [r0, #10]
   b63d8:	3c01      	subs	r4, #1
   b63da:	1a64      	subs	r4, r4, r1
      break;
   b63dc:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b63de:	b222      	sxth	r2, r4
      break;
   b63e0:	e7d9      	b.n	b6396 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b63e2:	2a00      	cmp	r2, #0
   b63e4:	8904      	ldrh	r4, [r0, #8]
   b63e6:	4613      	mov	r3, r2
   b63e8:	bfb8      	it	lt
   b63ea:	1dd3      	addlt	r3, r2, #7
   b63ec:	10db      	asrs	r3, r3, #3
   b63ee:	fb13 1104 	smlabb	r1, r3, r4, r1
   b63f2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b63f4:	f002 0007 	and.w	r0, r2, #7
   b63f8:	2201      	movs	r2, #1
   b63fa:	4082      	lsls	r2, r0
   b63fc:	5c58      	ldrb	r0, [r3, r1]
   b63fe:	4302      	orrs	r2, r0
   b6400:	545a      	strb	r2, [r3, r1]
}
   b6402:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b6404:	2a00      	cmp	r2, #0
   b6406:	4613      	mov	r3, r2
   b6408:	8904      	ldrh	r4, [r0, #8]
   b640a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b640c:	bfb8      	it	lt
   b640e:	1dd3      	addlt	r3, r2, #7
   b6410:	10db      	asrs	r3, r3, #3
   b6412:	fb13 1104 	smlabb	r1, r3, r4, r1
   b6416:	f002 0207 	and.w	r2, r2, #7
   b641a:	2301      	movs	r3, #1
   b641c:	fa03 f202 	lsl.w	r2, r3, r2
   b6420:	5c43      	ldrb	r3, [r0, r1]
   b6422:	405a      	eors	r2, r3
   b6424:	e7cc      	b.n	b63c0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b6428 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b6428:	b570      	push	{r4, r5, r6, lr}
   b642a:	4604      	mov	r4, r0
   b642c:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b642e:	2600      	movs	r6, #0
   b6430:	f7ff fce2 	bl	b5df8 <_ZN12Adafruit_GFXC1Ess>
   b6434:	4b11      	ldr	r3, [pc, #68]	; (b647c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b6436:	6023      	str	r3, [r4, #0]
   b6438:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b643a:	b915      	cbnz	r5, b6442 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b643c:	f002 f9e4 	bl	b8808 <_Z19__fetch_global_Wirev>
   b6440:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b6442:	23ff      	movs	r3, #255	; 0xff
   b6444:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b6448:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b644c:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b6450:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b6454:	4b0a      	ldr	r3, [pc, #40]	; (b6480 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b6456:	63a3      	str	r3, [r4, #56]	; 0x38
   b6458:	2301      	movs	r3, #1
   b645a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b645e:	9b05      	ldr	r3, [sp, #20]
   b6460:	64a3      	str	r3, [r4, #72]	; 0x48
   b6462:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6466:	9b06      	ldr	r3, [sp, #24]
   b6468:	86a2      	strh	r2, [r4, #52]	; 0x34
   b646a:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b646e:	6426      	str	r6, [r4, #64]	; 0x40
   b6470:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6474:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b6476:	4620      	mov	r0, r4
   b6478:	bd70      	pop	{r4, r5, r6, pc}
   b647a:	bf00      	nop
   b647c:	000b9964 	.word	0x000b9964
   b6480:	000b94b0 	.word	0x000b94b0

000b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6486:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6488:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b648a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b648c:	b190      	cbz	r0, b64b4 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b648e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6492:	f001 f849 	bl	b7528 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6496:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6498:	6803      	ldr	r3, [r0, #0]
   b649a:	2100      	movs	r1, #0
   b649c:	689b      	ldr	r3, [r3, #8]
   b649e:	4798      	blx	r3
    WIRE_WRITE(c);
   b64a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b64a2:	6803      	ldr	r3, [r0, #0]
   b64a4:	4629      	mov	r1, r5
   b64a6:	689b      	ldr	r3, [r3, #8]
   b64a8:	4798      	blx	r3
    wire->endTransmission();
   b64aa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b64ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b64b0:	f001 b841 	b.w	b7536 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b64b4:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b64b8:	4601      	mov	r1, r0
   b64ba:	b298      	uxth	r0, r3
   b64bc:	f002 f91f 	bl	b86fe <digitalWrite>
  if(spi) {
   b64c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b64c2:	b120      	cbz	r0, b64ce <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b64c4:	4629      	mov	r1, r5
}
   b64c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b64ca:	f001 bac5 	b.w	b7a58 <_ZN8SPIClass8transferEh>
   b64ce:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b64d0:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b64d2:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b64d6:	ea05 0107 	and.w	r1, r5, r7
   b64da:	b280      	uxth	r0, r0
   b64dc:	f002 f90f 	bl	b86fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b64e0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b64e4:	2101      	movs	r1, #1
   b64e6:	b280      	uxth	r0, r0
   b64e8:	f002 f909 	bl	b86fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b64ec:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b64f0:	2100      	movs	r1, #0
   b64f2:	b280      	uxth	r0, r0
   b64f4:	f002 f903 	bl	b86fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b64f8:	3e01      	subs	r6, #1
   b64fa:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b64fe:	d1e8      	bne.n	b64d2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b6500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6502 <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6502:	b538      	push	{r3, r4, r5, lr}
   b6504:	4604      	mov	r4, r0
  TRANSACTION_START
   b6506:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b6508:	460d      	mov	r5, r1
  TRANSACTION_START
   b650a:	b180      	cbz	r0, b652e <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b650c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b650e:	f000 fffd 	bl	b750c <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b6512:	2d00      	cmp	r5, #0
   b6514:	4620      	mov	r0, r4
   b6516:	bf14      	ite	ne
   b6518:	21a7      	movne	r1, #167	; 0xa7
   b651a:	21a6      	moveq	r1, #166	; 0xa6
   b651c:	f7ff ffb2 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b6520:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6522:	b188      	cbz	r0, b6548 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b6524:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b652a:	f000 bfef 	b.w	b750c <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b652e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6530:	b118      	cbz	r0, b653a <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b6532:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6536:	f001 fa21 	bl	b797c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b653a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b653e:	2100      	movs	r1, #0
   b6540:	b280      	uxth	r0, r0
   b6542:	f002 f8dc 	bl	b86fe <digitalWrite>
   b6546:	e7e4      	b.n	b6512 <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b6548:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b654c:	2101      	movs	r1, #1
   b654e:	b280      	uxth	r0, r0
   b6550:	f002 f8d5 	bl	b86fe <digitalWrite>
   b6554:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6556:	b118      	cbz	r0, b6560 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b6558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b655c:	f001 b9f4 	b.w	b7948 <_ZN8SPIClass14endTransactionEv>
}
   b6560:	bd38      	pop	{r3, r4, r5, pc}

000b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6562:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6566:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6568:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b656a:	460d      	mov	r5, r1
  if(wire) { // I2C
   b656c:	188f      	adds	r7, r1, r2
   b656e:	b340      	cbz	r0, b65c2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b6570:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6574:	f000 ffd8 	bl	b7528 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6578:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b657a:	6803      	ldr	r3, [r0, #0]
   b657c:	2100      	movs	r1, #0
   b657e:	689b      	ldr	r3, [r3, #8]
   b6580:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6582:	2601      	movs	r6, #1
    while(n--) {
   b6584:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6586:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6588:	d017      	beq.n	b65ba <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b658a:	2e1f      	cmp	r6, #31
   b658c:	d90c      	bls.n	b65a8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b658e:	f000 ffd2 	bl	b7536 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6592:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6596:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6598:	f000 ffc6 	bl	b7528 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b659c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b659e:	6803      	ldr	r3, [r0, #0]
   b65a0:	2100      	movs	r1, #0
   b65a2:	689b      	ldr	r3, [r3, #8]
   b65a4:	4798      	blx	r3
        bytesOut = 1;
   b65a6:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b65a8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b65aa:	f815 1b01 	ldrb.w	r1, [r5], #1
   b65ae:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b65b0:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b65b2:	689b      	ldr	r3, [r3, #8]
   b65b4:	4798      	blx	r3
      bytesOut++;
   b65b6:	b2f6      	uxtb	r6, r6
    while(n--) {
   b65b8:	e7e4      	b.n	b6584 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b65ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b65be:	f000 bfba 	b.w	b7536 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b65c2:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b65c6:	4601      	mov	r1, r0
   b65c8:	b298      	uxth	r0, r3
   b65ca:	f002 f898 	bl	b86fe <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b65ce:	42bd      	cmp	r5, r7
   b65d0:	d022      	beq.n	b6618 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b65d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b65d4:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b65d8:	b118      	cbz	r0, b65e2 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b65da:	4649      	mov	r1, r9
   b65dc:	f001 fa3c 	bl	b7a58 <_ZN8SPIClass8transferEh>
   b65e0:	e7f5      	b.n	b65ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b65e2:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b65e4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b65e8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b65ec:	ea09 0108 	and.w	r1, r9, r8
   b65f0:	b280      	uxth	r0, r0
   b65f2:	f002 f884 	bl	b86fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b65f6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b65fa:	2101      	movs	r1, #1
   b65fc:	b280      	uxth	r0, r0
   b65fe:	f002 f87e 	bl	b86fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6602:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6606:	2100      	movs	r1, #0
   b6608:	b280      	uxth	r0, r0
   b660a:	f002 f878 	bl	b86fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b660e:	3e01      	subs	r6, #1
   b6610:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6614:	d1e8      	bne.n	b65e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b6616:	e7da      	b.n	b65ce <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b6618:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b661c <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b661c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6620:	1dda      	adds	r2, r3, #7
   b6622:	bf48      	it	mi
   b6624:	f103 020e 	addmi.w	r2, r3, #14
   b6628:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b662c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b662e:	10d2      	asrs	r2, r2, #3
   b6630:	435a      	muls	r2, r3
   b6632:	2100      	movs	r1, #0
   b6634:	f002 ba82 	b.w	b8b3c <memset>

000b6638 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b6638:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b663c:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b663e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b6640:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b6644:	4604      	mov	r4, r0
   b6646:	460f      	mov	r7, r1
   b6648:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b664a:	b1c3      	cbz	r3, b667e <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b664c:	4620      	mov	r0, r4
   b664e:	f7ff ffe5 	bl	b661c <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b6652:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b6656:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b665a:	2820      	cmp	r0, #32
   b665c:	dc21      	bgt.n	b66a2 <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b665e:	2320      	movs	r3, #32
   b6660:	2201      	movs	r2, #1
   b6662:	3820      	subs	r0, #32
   b6664:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6668:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b666c:	2373      	movs	r3, #115	; 0x73
   b666e:	3973      	subs	r1, #115	; 0x73
   b6670:	9300      	str	r3, [sp, #0]
   b6672:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6676:	4b89      	ldr	r3, [pc, #548]	; (b689c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6678:	f340 024f 	sbfx	r2, r0, #1, #16
   b667c:	e021      	b.n	b66c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b667e:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b6682:	1dd8      	adds	r0, r3, #7
   b6684:	bf48      	it	mi
   b6686:	f103 000e 	addmi.w	r0, r3, #14
   b668a:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b668e:	10c0      	asrs	r0, r0, #3
   b6690:	4358      	muls	r0, r3
   b6692:	f000 fe5f 	bl	b7354 <malloc>
   b6696:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6698:	2800      	cmp	r0, #0
   b669a:	d1d7      	bne.n	b664c <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b669c:	b004      	add	sp, #16
   b669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b66a2:	3840      	subs	r0, #64	; 0x40
   b66a4:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b66a8:	fa02 f280 	sxtah	r2, r2, r0
   b66ac:	2340      	movs	r3, #64	; 0x40
   b66ae:	2001      	movs	r0, #1
   b66b0:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b66b4:	2352      	movs	r3, #82	; 0x52
   b66b6:	3952      	subs	r1, #82	; 0x52
   b66b8:	9300      	str	r3, [sp, #0]
   b66ba:	4b79      	ldr	r3, [pc, #484]	; (b68a0 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b66bc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b66c0:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b66c2:	4620      	mov	r0, r4
   b66c4:	f341 014f 	sbfx	r1, r1, #1, #16
   b66c8:	f7ff fbac 	bl	b5e24 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b66cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b66ce:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b66d2:	2800      	cmp	r0, #0
   b66d4:	d078      	beq.n	b67c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b66d6:	2d00      	cmp	r5, #0
   b66d8:	d174      	bne.n	b67c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b66da:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b66de:	2b20      	cmp	r3, #32
   b66e0:	bf0c      	ite	eq
   b66e2:	253c      	moveq	r5, #60	; 0x3c
   b66e4:	253d      	movne	r5, #61	; 0x3d
   b66e6:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b66ea:	f1b8 0f00 	cmp.w	r8, #0
   b66ee:	d001      	beq.n	b66f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b66f0:	f000 ff10 	bl	b7514 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b66f4:	b1fe      	cbz	r6, b6736 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b66f6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b66fa:	2800      	cmp	r0, #0
   b66fc:	db1b      	blt.n	b6736 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b66fe:	2101      	movs	r1, #1
   b6700:	b280      	uxth	r0, r0
   b6702:	f001 ffeb 	bl	b86dc <pinMode>
    digitalWrite(rstPin, HIGH);
   b6706:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b670a:	2101      	movs	r1, #1
   b670c:	b280      	uxth	r0, r0
   b670e:	f001 fff6 	bl	b86fe <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b6712:	2001      	movs	r0, #1
   b6714:	f000 fe66 	bl	b73e4 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b6718:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b671c:	2100      	movs	r1, #0
   b671e:	b280      	uxth	r0, r0
   b6720:	f001 ffed 	bl	b86fe <digitalWrite>
    delay(10);                  // Wait 10 ms
   b6724:	200a      	movs	r0, #10
   b6726:	f000 fe5d 	bl	b73e4 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b672a:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b672e:	2101      	movs	r1, #1
   b6730:	b280      	uxth	r0, r0
   b6732:	f001 ffe4 	bl	b86fe <digitalWrite>
  TRANSACTION_START
   b6736:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6738:	2800      	cmp	r0, #0
   b673a:	d074      	beq.n	b6826 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b673c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b673e:	f000 fee5 	bl	b750c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b6742:	2204      	movs	r2, #4
   b6744:	4957      	ldr	r1, [pc, #348]	; (b68a4 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b6746:	4620      	mov	r0, r4
   b6748:	f7ff ff0b 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b674c:	8961      	ldrh	r1, [r4, #10]
   b674e:	3901      	subs	r1, #1
   b6750:	b2c9      	uxtb	r1, r1
   b6752:	4620      	mov	r0, r4
   b6754:	f7ff fe96 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b6758:	4953      	ldr	r1, [pc, #332]	; (b68a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b675a:	2204      	movs	r2, #4
   b675c:	4620      	mov	r0, r4
   b675e:	f7ff ff00 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b6762:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6766:	2b01      	cmp	r3, #1
   b6768:	bf0c      	ite	eq
   b676a:	2110      	moveq	r1, #16
   b676c:	2114      	movne	r1, #20
   b676e:	4620      	mov	r0, r4
   b6770:	f7ff fe88 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6774:	2204      	movs	r2, #4
   b6776:	494d      	ldr	r1, [pc, #308]	; (b68ac <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6778:	4620      	mov	r0, r4
   b677a:	f7ff fef2 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b677e:	68a3      	ldr	r3, [r4, #8]
   b6780:	4a4b      	ldr	r2, [pc, #300]	; (b68b0 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b6782:	4293      	cmp	r3, r2
   b6784:	d15c      	bne.n	b6840 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6786:	494b      	ldr	r1, [pc, #300]	; (b68b4 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6788:	2204      	movs	r2, #4
   b678a:	4620      	mov	r0, r4
   b678c:	f7ff fee9 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b6790:	21d9      	movs	r1, #217	; 0xd9
   b6792:	4620      	mov	r0, r4
   b6794:	f7ff fe76 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6798:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b679c:	2b01      	cmp	r3, #1
   b679e:	bf0c      	ite	eq
   b67a0:	2122      	moveq	r1, #34	; 0x22
   b67a2:	21f1      	movne	r1, #241	; 0xf1
   b67a4:	4620      	mov	r0, r4
   b67a6:	f7ff fe6d 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b67aa:	4620      	mov	r0, r4
   b67ac:	4942      	ldr	r1, [pc, #264]	; (b68b8 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b67ae:	2206      	movs	r2, #6
   b67b0:	f7ff fed7 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b67b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b67b6:	2800      	cmp	r0, #0
   b67b8:	d063      	beq.n	b6882 <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b67ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b67bc:	f000 fea6 	bl	b750c <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b67c0:	2001      	movs	r0, #1
   b67c2:	e76b      	b.n	b669c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b67c4:	b26d      	sxtb	r5, r5
   b67c6:	e78e      	b.n	b66e6 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b67c8:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b67cc:	2101      	movs	r1, #1
   b67ce:	b280      	uxth	r0, r0
   b67d0:	f001 ff84 	bl	b86dc <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b67d4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b67d8:	2101      	movs	r1, #1
   b67da:	b280      	uxth	r0, r0
   b67dc:	f001 ff7e 	bl	b86dc <pinMode>
    SSD1306_DESELECT
   b67e0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b67e4:	2101      	movs	r1, #1
   b67e6:	b280      	uxth	r0, r0
   b67e8:	f001 ff89 	bl	b86fe <digitalWrite>
    if(spi) { // Hardware SPI
   b67ec:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b67ee:	b13d      	cbz	r5, b6800 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b67f0:	f1b8 0f00 	cmp.w	r8, #0
   b67f4:	f43f af7e 	beq.w	b66f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b67f8:	4628      	mov	r0, r5
   b67fa:	f001 f891 	bl	b7920 <_ZN8SPIClass5beginEv>
   b67fe:	e779      	b.n	b66f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b6800:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6804:	2101      	movs	r1, #1
   b6806:	b280      	uxth	r0, r0
   b6808:	f001 ff68 	bl	b86dc <pinMode>
      pinMode(clkPin , OUTPUT);
   b680c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6810:	2101      	movs	r1, #1
   b6812:	b280      	uxth	r0, r0
   b6814:	f001 ff62 	bl	b86dc <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b6818:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b681c:	4629      	mov	r1, r5
   b681e:	b280      	uxth	r0, r0
   b6820:	f001 ff6d 	bl	b86fe <digitalWrite>
   b6824:	e766      	b.n	b66f4 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b6826:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6828:	b118      	cbz	r0, b6832 <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b682a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b682e:	f001 f8a5 	bl	b797c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6832:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6836:	2100      	movs	r1, #0
   b6838:	b280      	uxth	r0, r0
   b683a:	f001 ff60 	bl	b86fe <digitalWrite>
   b683e:	e780      	b.n	b6742 <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b6840:	4a1e      	ldr	r2, [pc, #120]	; (b68bc <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b6842:	4293      	cmp	r3, r2
   b6844:	d10e      	bne.n	b6864 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b6846:	491e      	ldr	r1, [pc, #120]	; (b68c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b6848:	2203      	movs	r2, #3
   b684a:	4620      	mov	r0, r4
   b684c:	f7ff fe89 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b6850:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6854:	2b01      	cmp	r3, #1
   b6856:	bf0c      	ite	eq
   b6858:	219f      	moveq	r1, #159	; 0x9f
   b685a:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b685c:	4620      	mov	r0, r4
   b685e:	f7ff fe11 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b6862:	e795      	b.n	b6790 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6864:	4a17      	ldr	r2, [pc, #92]	; (b68c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b6866:	4293      	cmp	r3, r2
   b6868:	d192      	bne.n	b6790 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b686a:	4917      	ldr	r1, [pc, #92]	; (b68c8 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b686c:	2203      	movs	r2, #3
   b686e:	4620      	mov	r0, r4
   b6870:	f7ff fe77 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6874:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6878:	2b01      	cmp	r3, #1
   b687a:	bf0c      	ite	eq
   b687c:	2110      	moveq	r1, #16
   b687e:	21af      	movne	r1, #175	; 0xaf
   b6880:	e7ec      	b.n	b685c <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b6882:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6886:	2101      	movs	r1, #1
   b6888:	b280      	uxth	r0, r0
   b688a:	f001 ff38 	bl	b86fe <digitalWrite>
   b688e:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6890:	2800      	cmp	r0, #0
   b6892:	d095      	beq.n	b67c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6894:	f001 f858 	bl	b7948 <_ZN8SPIClass14endTransactionEv>
   b6898:	e792      	b.n	b67c0 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b689a:	bf00      	nop
   b689c:	000b977c 	.word	0x000b977c
   b68a0:	000b94bc 	.word	0x000b94bc
   b68a4:	000b99c4 	.word	0x000b99c4
   b68a8:	000b99c8 	.word	0x000b99c8
   b68ac:	000b99cc 	.word	0x000b99cc
   b68b0:	00200080 	.word	0x00200080
   b68b4:	000b99d6 	.word	0x000b99d6
   b68b8:	000b99d0 	.word	0x000b99d0
   b68bc:	00400080 	.word	0x00400080
   b68c0:	000b99da 	.word	0x000b99da
   b68c4:	00100060 	.word	0x00100060
   b68c8:	000b99dd 	.word	0x000b99dd

000b68cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b68cc:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b68ce:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b68d0:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b68d4:	db3d      	blt.n	b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b68d6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b68da:	4294      	cmp	r4, r2
   b68dc:	dd39      	ble.n	b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b68de:	2900      	cmp	r1, #0
      w += x;
   b68e0:	bfbe      	ittt	lt
   b68e2:	185b      	addlt	r3, r3, r1
   b68e4:	b21b      	sxthlt	r3, r3
      x  = 0;
   b68e6:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b68e8:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b68ec:	18ce      	adds	r6, r1, r3
   b68ee:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b68f0:	bfc4      	itt	gt
   b68f2:	1a63      	subgt	r3, r4, r1
   b68f4:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b68f6:	2b00      	cmp	r3, #0
   b68f8:	dd2b      	ble.n	b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b68fa:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b68fc:	10d6      	asrs	r6, r2, #3
   b68fe:	fb14 1106 	smlabb	r1, r4, r6, r1
   b6902:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b6904:	f002 0007 	and.w	r0, r2, #7
   b6908:	2201      	movs	r2, #1
   b690a:	4082      	lsls	r2, r0
      switch(color) {
   b690c:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b690e:	b2d2      	uxtb	r2, r2
      switch(color) {
   b6910:	d016      	beq.n	b6940 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b6912:	2d02      	cmp	r5, #2
   b6914:	d00b      	beq.n	b692e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b6916:	b9e5      	cbnz	r5, b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b6918:	43d2      	mvns	r2, r2
   b691a:	b2d2      	uxtb	r2, r2
   b691c:	440b      	add	r3, r1
   b691e:	4299      	cmp	r1, r3
   b6920:	d017      	beq.n	b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6922:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6926:	4010      	ands	r0, r2
   b6928:	f801 0c01 	strb.w	r0, [r1, #-1]
   b692c:	e7f7      	b.n	b691e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b692e:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b6930:	4299      	cmp	r1, r3
   b6932:	d00e      	beq.n	b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6934:	f811 0b01 	ldrb.w	r0, [r1], #1
   b6938:	4050      	eors	r0, r2
   b693a:	f801 0c01 	strb.w	r0, [r1, #-1]
   b693e:	e7f7      	b.n	b6930 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b6940:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b6942:	4299      	cmp	r1, r3
   b6944:	d005      	beq.n	b6952 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6946:	f811 0b01 	ldrb.w	r0, [r1], #1
   b694a:	4310      	orrs	r0, r2
   b694c:	f801 0c01 	strb.w	r0, [r1, #-1]
   b6950:	e7f7      	b.n	b6942 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b6952:	bd70      	pop	{r4, r5, r6, pc}

000b6954 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6954:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b6956:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b6958:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b695c:	db76      	blt.n	b6a4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b695e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b6962:	42b1      	cmp	r1, r6
   b6964:	da72      	bge.n	b6a4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b6966:	2a00      	cmp	r2, #0
      __h += __y;
   b6968:	bfbe      	ittt	lt
   b696a:	189b      	addlt	r3, r3, r2
   b696c:	b21b      	sxthlt	r3, r3
      __y = 0;
   b696e:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b6970:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6974:	18d7      	adds	r7, r2, r3
   b6976:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6978:	bfc4      	itt	gt
   b697a:	1aa3      	subgt	r3, r4, r2
   b697c:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b697e:	2b00      	cmp	r3, #0
   b6980:	dd64      	ble.n	b6a4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6982:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6986:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6988:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b698c:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b6990:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b6992:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6996:	d023      	beq.n	b69e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6998:	f1c2 0208 	rsb	r2, r2, #8
   b699c:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b699e:	492d      	ldr	r1, [pc, #180]	; (b6a54 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b69a0:	4293      	cmp	r3, r2
   b69a2:	bf3c      	itt	cc
   b69a4:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b69a8:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b69ac:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b69ae:	bf3c      	itt	cc
   b69b0:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b69b4:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b69b8:	2d01      	cmp	r5, #1
   b69ba:	d007      	beq.n	b69cc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b69bc:	2d02      	cmp	r5, #2
   b69be:	d02e      	beq.n	b6a1e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b69c0:	b94d      	cbnz	r5, b69d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b69c2:	f817 c006 	ldrb.w	ip, [r7, r6]
   b69c6:	ea2c 0101 	bic.w	r1, ip, r1
   b69ca:	e003      	b.n	b69d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b69cc:	f817 c006 	ldrb.w	ip, [r7, r6]
   b69d0:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b69d4:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b69d6:	4293      	cmp	r3, r2
   b69d8:	d338      	bcc.n	b6a4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b69da:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b69de:	440c      	add	r4, r1
        h -= mod;
   b69e0:	1a9a      	subs	r2, r3, r2
   b69e2:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b69e4:	2a07      	cmp	r2, #7
   b69e6:	d90e      	bls.n	b6a06 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b69e8:	2d02      	cmp	r5, #2
   b69ea:	d11d      	bne.n	b6a28 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b69ec:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b69ee:	7821      	ldrb	r1, [r4, #0]
   b69f0:	43c9      	mvns	r1, r1
   b69f2:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b69f4:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b69f6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b69fa:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b69fc:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b69fe:	440c      	add	r4, r1
            } while(h >= 8);
   b6a00:	d8f5      	bhi.n	b69ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b6a02:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b6a06:	b30a      	cbz	r2, b6a4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6a08:	4b13      	ldr	r3, [pc, #76]	; (b6a58 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b6a0a:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b6a0c:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b6a0e:	d01a      	beq.n	b6a46 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b6a10:	2d02      	cmp	r5, #2
   b6a12:	d01c      	beq.n	b6a4e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b6a14:	b9d5      	cbnz	r5, b6a4c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b6a16:	7822      	ldrb	r2, [r4, #0]
   b6a18:	ea22 0303 	bic.w	r3, r2, r3
   b6a1c:	e015      	b.n	b6a4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b6a1e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6a22:	ea81 010c 	eor.w	r1, r1, ip
   b6a26:	e7d5      	b.n	b69d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b6a28:	1e29      	subs	r1, r5, #0
   b6a2a:	bf18      	it	ne
   b6a2c:	2101      	movne	r1, #1
   b6a2e:	4249      	negs	r1, r1
   b6a30:	b2c9      	uxtb	r1, r1
   b6a32:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b6a34:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b6a36:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6a38:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b6a3c:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6a3e:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b6a40:	4434      	add	r4, r6
            } while(h >= 8);
   b6a42:	d8f7      	bhi.n	b6a34 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b6a44:	e7dd      	b.n	b6a02 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b6a46:	7822      	ldrb	r2, [r4, #0]
   b6a48:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b6a4a:	7023      	strb	r3, [r4, #0]
}
   b6a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b6a4e:	7822      	ldrb	r2, [r4, #0]
   b6a50:	4053      	eors	r3, r2
   b6a52:	e7fa      	b.n	b6a4a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b6a54:	000b99b4 	.word	0x000b99b4
   b6a58:	000b99bc 	.word	0x000b99bc

000b6a5c <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6a5c:	b470      	push	{r4, r5, r6}
   b6a5e:	4614      	mov	r4, r2
  switch(rotation) {
   b6a60:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6a62:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b6a66:	2a02      	cmp	r2, #2
   b6a68:	d00d      	beq.n	b6a86 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b6a6a:	2a03      	cmp	r2, #3
   b6a6c:	d018      	beq.n	b6aa0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6a6e:	2a01      	cmp	r2, #1
   b6a70:	d111      	bne.n	b6a96 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6a72:	8902      	ldrh	r2, [r0, #8]
   b6a74:	43e4      	mvns	r4, r4
   b6a76:	4414      	add	r4, r2
   b6a78:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6a7a:	9603      	str	r6, [sp, #12]
   b6a7c:	460a      	mov	r2, r1
   b6a7e:	4621      	mov	r1, r4
}
   b6a80:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6a82:	f7ff bf67 	b.w	b6954 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6a86:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6a88:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b6a8a:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6a8c:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6a8e:	4414      	add	r4, r2
    x -= (w-1);
   b6a90:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6a92:	b224      	sxth	r4, r4
    x -= (w-1);
   b6a94:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6a96:	9603      	str	r6, [sp, #12]
   b6a98:	4622      	mov	r2, r4
}
   b6a9a:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6a9c:	f7ff bf16 	b.w	b68cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6aa0:	8945      	ldrh	r5, [r0, #10]
   b6aa2:	4419      	add	r1, r3
   b6aa4:	1a69      	subs	r1, r5, r1
   b6aa6:	b209      	sxth	r1, r1
    break;
   b6aa8:	e7e7      	b.n	b6a7a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b6aaa <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6aaa:	b430      	push	{r4, r5}
   b6aac:	4614      	mov	r4, r2
  switch(rotation) {
   b6aae:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6ab0:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6ab4:	2a02      	cmp	r2, #2
   b6ab6:	d00d      	beq.n	b6ad4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6ab8:	2a03      	cmp	r2, #3
   b6aba:	d018      	beq.n	b6aee <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6abc:	2a01      	cmp	r2, #1
   b6abe:	d111      	bne.n	b6ae4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6ac0:	18e2      	adds	r2, r4, r3
   b6ac2:	8904      	ldrh	r4, [r0, #8]
   b6ac4:	1aa4      	subs	r4, r4, r2
   b6ac6:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6ac8:	9502      	str	r5, [sp, #8]
   b6aca:	460a      	mov	r2, r1
   b6acc:	4621      	mov	r1, r4
}
   b6ace:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6ad0:	f7ff befc 	b.w	b68cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6ad4:	8902      	ldrh	r2, [r0, #8]
   b6ad6:	43c9      	mvns	r1, r1
   b6ad8:	4411      	add	r1, r2
    y -= (h-1);
   b6ada:	18e2      	adds	r2, r4, r3
   b6adc:	8944      	ldrh	r4, [r0, #10]
   b6ade:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6ae0:	b209      	sxth	r1, r1
    y -= (h-1);
   b6ae2:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6ae4:	9502      	str	r5, [sp, #8]
   b6ae6:	4622      	mov	r2, r4
}
   b6ae8:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b6aea:	f7ff bf33 	b.w	b6954 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6aee:	8942      	ldrh	r2, [r0, #10]
   b6af0:	43c9      	mvns	r1, r1
   b6af2:	4411      	add	r1, r2
   b6af4:	b209      	sxth	r1, r1
    break;
   b6af6:	e7e7      	b.n	b6ac8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6af8 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6afc:	4604      	mov	r4, r0
  TRANSACTION_START
   b6afe:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6b00:	2800      	cmp	r0, #0
   b6b02:	d042      	beq.n	b6b8a <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6b04:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6b06:	f000 fd01 	bl	b750c <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b6b0a:	4947      	ldr	r1, [pc, #284]	; (b6c28 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6b0c:	2205      	movs	r2, #5
   b6b0e:	4620      	mov	r0, r4
   b6b10:	f7ff fd27 	bl	b6562 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6b14:	8921      	ldrh	r1, [r4, #8]
   b6b16:	3901      	subs	r1, #1
   b6b18:	4620      	mov	r0, r4
   b6b1a:	b2c9      	uxtb	r1, r1
   b6b1c:	f7ff fcb2 	bl	b6484 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6b20:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6b24:	1dde      	adds	r6, r3, #7
   b6b26:	bf48      	it	mi
   b6b28:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6b2c:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6b30:	8923      	ldrh	r3, [r4, #8]
   b6b32:	10f6      	asrs	r6, r6, #3
   b6b34:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6b38:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6b3c:	2800      	cmp	r0, #0
   b6b3e:	d03a      	beq.n	b6bb6 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6b40:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6b44:	f000 fcf0 	bl	b7528 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6b48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b4a:	6803      	ldr	r3, [r0, #0]
   b6b4c:	2140      	movs	r1, #64	; 0x40
   b6b4e:	689b      	ldr	r3, [r3, #8]
   b6b50:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6b52:	2701      	movs	r7, #1
    while(count--) {
   b6b54:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6b56:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6b58:	d024      	beq.n	b6ba4 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b6b5a:	2f1f      	cmp	r7, #31
   b6b5c:	d90c      	bls.n	b6b78 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6b5e:	f000 fcea 	bl	b7536 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6b62:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6b66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b68:	f000 fcde 	bl	b7528 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6b6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b6e:	6803      	ldr	r3, [r0, #0]
   b6b70:	2140      	movs	r1, #64	; 0x40
   b6b72:	689b      	ldr	r3, [r3, #8]
   b6b74:	4798      	blx	r3
        bytesOut = 1;
   b6b76:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6b78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b7a:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6b7e:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6b80:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6b82:	689b      	ldr	r3, [r3, #8]
   b6b84:	4798      	blx	r3
      bytesOut++;
   b6b86:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6b88:	e7e4      	b.n	b6b54 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b6b8a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6b8c:	b118      	cbz	r0, b6b96 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6b8e:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6b92:	f000 fef3 	bl	b797c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6b96:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6b9a:	2100      	movs	r1, #0
   b6b9c:	b280      	uxth	r0, r0
   b6b9e:	f001 fdae 	bl	b86fe <digitalWrite>
   b6ba2:	e7b2      	b.n	b6b0a <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6ba4:	f000 fcc7 	bl	b7536 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6ba8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6baa:	b378      	cbz	r0, b6c0c <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6bac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6bae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6bb2:	f000 bcab 	b.w	b750c <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6bb6:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6bba:	2101      	movs	r1, #1
   b6bbc:	b280      	uxth	r0, r0
   b6bbe:	f001 fd9e 	bl	b86fe <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6bc2:	42ae      	cmp	r6, r5
   b6bc4:	d0f0      	beq.n	b6ba8 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6bc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6bc8:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6bcc:	b118      	cbz	r0, b6bd6 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6bce:	4649      	mov	r1, r9
   b6bd0:	f000 ff42 	bl	b7a58 <_ZN8SPIClass8transferEh>
   b6bd4:	e7f5      	b.n	b6bc2 <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6bd6:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6bd8:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6bdc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6be0:	ea09 0108 	and.w	r1, r9, r8
   b6be4:	b280      	uxth	r0, r0
   b6be6:	f001 fd8a 	bl	b86fe <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6bea:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6bee:	2101      	movs	r1, #1
   b6bf0:	b280      	uxth	r0, r0
   b6bf2:	f001 fd84 	bl	b86fe <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6bf6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6bfa:	2100      	movs	r1, #0
   b6bfc:	b280      	uxth	r0, r0
   b6bfe:	f001 fd7e 	bl	b86fe <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6c02:	3f01      	subs	r7, #1
   b6c04:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6c08:	d1e8      	bne.n	b6bdc <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6c0a:	e7da      	b.n	b6bc2 <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6c0c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6c10:	2101      	movs	r1, #1
   b6c12:	b280      	uxth	r0, r0
   b6c14:	f001 fd73 	bl	b86fe <digitalWrite>
   b6c18:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6c1a:	b118      	cbz	r0, b6c24 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6c1c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6c20:	f000 be92 	b.w	b7948 <_ZN8SPIClass14endTransactionEv>
}
   b6c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6c28:	000b99e0 	.word	0x000b99e0

000b6c2c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6c2c:	2100      	movs	r1, #0
   b6c2e:	220a      	movs	r2, #10
   b6c30:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6c34:	4770      	bx	lr

000b6c36 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6c36:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6c38:	b510      	push	{r4, lr}
   b6c3a:	4604      	mov	r4, r0
    this->pin = pin;
   b6c3c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6c3e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6c40:	b288      	uxth	r0, r1
   b6c42:	f001 fd75 	bl	b8730 <digitalRead>
   b6c46:	b108      	cbz	r0, b6c4c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6c48:	2303      	movs	r3, #3
   b6c4a:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6c4c:	f000 f91e 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6c50:	6020      	str	r0, [r4, #0]
#endif
}
   b6c52:	bd10      	pop	{r4, pc}

000b6c54 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6c54:	b538      	push	{r3, r4, r5, lr}
   b6c56:	460c      	mov	r4, r1
   b6c58:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b6c5a:	4611      	mov	r1, r2
   b6c5c:	b2a0      	uxth	r0, r4
   b6c5e:	f001 fd3d 	bl	b86dc <pinMode>
  
  this->attach(pin);
   b6c62:	4621      	mov	r1, r4
   b6c64:	4628      	mov	r0, r5
}
   b6c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b6c6a:	f7ff bfe4 	b.w	b6c36 <_ZN8Debounce6attachEi>

000b6c6e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6c6e:	b538      	push	{r3, r4, r5, lr}
   b6c70:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6c72:	79c0      	ldrb	r0, [r0, #7]
   b6c74:	f001 fd5c 	bl	b8730 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b6c78:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b6c7a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6c7c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6c80:	bf18      	it	ne
   b6c82:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6c84:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b6c88:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b6c8a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6c8c:	d00a      	beq.n	b6ca4 <_ZN8Debounce6updateEv+0x36>
   b6c8e:	f000 f8fd 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6c92:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6c94:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b6c96:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b6c9a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6c9c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6c9e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6ca2:	bd38      	pop	{r3, r4, r5, pc}
   b6ca4:	f000 f8f2 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b6ca8:	6823      	ldr	r3, [r4, #0]
   b6caa:	1ac0      	subs	r0, r0, r3
   b6cac:	88a3      	ldrh	r3, [r4, #4]
   b6cae:	4298      	cmp	r0, r3
   b6cb0:	d3f4      	bcc.n	b6c9c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6cb2:	79a3      	ldrb	r3, [r4, #6]
   b6cb4:	f003 0301 	and.w	r3, r3, #1
   b6cb8:	42ab      	cmp	r3, r5
   b6cba:	d0ef      	beq.n	b6c9c <_ZN8Debounce6updateEv+0x2e>
   b6cbc:	f000 f8e6 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b6cc0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b6cc2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b6cc4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b6cc8:	f043 0308 	orr.w	r3, r3, #8
   b6ccc:	e7e5      	b.n	b6c9a <_ZN8Debounce6updateEv+0x2c>

000b6cce <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b6cce:	7980      	ldrb	r0, [r0, #6]
   b6cd0:	f000 0009 	and.w	r0, r0, #9
   b6cd4:	f1a0 0308 	sub.w	r3, r0, #8
   b6cd8:	4258      	negs	r0, r3
   b6cda:	4158      	adcs	r0, r3
   b6cdc:	4770      	bx	lr

000b6cde <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6cde:	f000 bb81 	b.w	b73e4 <delay>

000b6ce2 <_Z11BlynkMillisv>:
   b6ce2:	f000 b8d3 	b.w	b6e8c <HAL_Timer_Get_Milli_Seconds>

000b6ce6 <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6ce6:	4770      	bx	lr

000b6ce8 <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6ce8:	4770      	bx	lr

000b6cea <BlynkNoOpCbk>:
{}
   b6cea:	4770      	bx	lr

000b6cec <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6cec:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6cee:	bf5a      	itte	pl
   b6cf0:	4b02      	ldrpl	r3, [pc, #8]	; (b6cfc <GetReadHandler+0x10>)
   b6cf2:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6cf6:	2000      	movmi	r0, #0
#endif
}
   b6cf8:	4770      	bx	lr
   b6cfa:	bf00      	nop
   b6cfc:	000b99e8 	.word	0x000b99e8

000b6d00 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6d00:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6d02:	bf5a      	itte	pl
   b6d04:	4b02      	ldrpl	r3, [pc, #8]	; (b6d10 <GetWriteHandler+0x10>)
   b6d06:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6d0a:	2000      	movmi	r0, #0
#endif
}
   b6d0c:	4770      	bx	lr
   b6d0e:	bf00      	nop
   b6d10:	000b9be8 	.word	0x000b9be8

000b6d14 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6d14:	b510      	push	{r4, lr}
   b6d16:	4b06      	ldr	r3, [pc, #24]	; (b6d30 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6d18:	6003      	str	r3, [r0, #0]
   b6d1a:	4604      	mov	r4, r0
	if (mutex) {
   b6d1c:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6d1e:	b108      	cbz	r0, b6d24 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6d20:	f000 f894 	bl	b6e4c <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6d24:	4620      	mov	r0, r4
   b6d26:	f7ff fb07 	bl	b6338 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6d2a:	4620      	mov	r0, r4
   b6d2c:	bd10      	pop	{r4, pc}
   b6d2e:	bf00      	nop
   b6d30:	000b9df0 	.word	0x000b9df0

000b6d34 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6d34:	b510      	push	{r4, lr}
   b6d36:	4604      	mov	r4, r0
}
   b6d38:	f7ff ffec 	bl	b6d14 <_ZN16OledWingAdafruitD1Ev>
   b6d3c:	4620      	mov	r0, r4
   b6d3e:	2170      	movs	r1, #112	; 0x70
   b6d40:	f7fd ffd5 	bl	b4cee <_ZdlPvj>
   b6d44:	4620      	mov	r0, r4
   b6d46:	bd10      	pop	{r4, pc}

000b6d48 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6d48:	b530      	push	{r4, r5, lr}
   b6d4a:	b085      	sub	sp, #20
   b6d4c:	4604      	mov	r4, r0
   b6d4e:	460d      	mov	r5, r1
   b6d50:	f001 fd5a 	bl	b8808 <_Z19__fetch_global_Wirev>
   b6d54:	4a10      	ldr	r2, [pc, #64]	; (b6d98 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b6d56:	4911      	ldr	r1, [pc, #68]	; (b6d9c <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6d58:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6d5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6d60:	2180      	movs	r1, #128	; 0x80
   b6d62:	4603      	mov	r3, r0
   b6d64:	9200      	str	r2, [sp, #0]
   b6d66:	4620      	mov	r0, r4
   b6d68:	2220      	movs	r2, #32
   b6d6a:	f7ff fb5d 	bl	b6428 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6d6e:	4b0c      	ldr	r3, [pc, #48]	; (b6da0 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6d70:	6023      	str	r3, [r4, #0]
   b6d72:	2300      	movs	r3, #0
   b6d74:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6d78:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6d7c:	f7ff ff56 	bl	b6c2c <_ZN8DebounceC1Ev>
   b6d80:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6d84:	f7ff ff52 	bl	b6c2c <_ZN8DebounceC1Ev>
   b6d88:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6d8c:	f7ff ff4e 	bl	b6c2c <_ZN8DebounceC1Ev>
}
   b6d90:	4620      	mov	r0, r4
   b6d92:	b005      	add	sp, #20
   b6d94:	bd30      	pop	{r4, r5, pc}
   b6d96:	bf00      	nop
   b6d98:	00061a80 	.word	0x00061a80
   b6d9c:	000186a0 	.word	0x000186a0
   b6da0:	000b9df0 	.word	0x000b9df0

000b6da4 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6da4:	b513      	push	{r0, r1, r4, lr}
   b6da6:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6da8:	3050      	adds	r0, #80	; 0x50
   b6daa:	f000 f847 	bl	b6e3c <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6dae:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6db0:	07d9      	lsls	r1, r3, #31
   b6db2:	d505      	bpl.n	b6dc0 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6db4:	2202      	movs	r2, #2
   b6db6:	2104      	movs	r1, #4
   b6db8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6dbc:	f7ff ff4a 	bl	b6c54 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6dc0:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6dc2:	079a      	lsls	r2, r3, #30
   b6dc4:	d505      	bpl.n	b6dd2 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6dc6:	2200      	movs	r2, #0
   b6dc8:	2103      	movs	r1, #3
   b6dca:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6dce:	f7ff ff41 	bl	b6c54 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6dd2:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6dd4:	075b      	lsls	r3, r3, #29
   b6dd6:	d505      	bpl.n	b6de4 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6dd8:	2202      	movs	r2, #2
   b6dda:	4611      	mov	r1, r2
   b6ddc:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6de0:	f7ff ff38 	bl	b6c54 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6de4:	2301      	movs	r3, #1
   b6de6:	9300      	str	r3, [sp, #0]
   b6de8:	223c      	movs	r2, #60	; 0x3c
   b6dea:	2102      	movs	r1, #2
   b6dec:	4620      	mov	r0, r4
   b6dee:	f7ff fc23 	bl	b6638 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b6df2:	b002      	add	sp, #8
   b6df4:	bd10      	pop	{r4, pc}

000b6df6 <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b6df6:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6df8:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6dfa:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6dfc:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6dfe:	d502      	bpl.n	b6e06 <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6e00:	3058      	adds	r0, #88	; 0x58
   b6e02:	f7ff ff34 	bl	b6c6e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b6e06:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6e08:	079a      	lsls	r2, r3, #30
   b6e0a:	d503      	bpl.n	b6e14 <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6e0c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6e10:	f7ff ff2d 	bl	b6c6e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b6e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6e16:	075b      	lsls	r3, r3, #29
   b6e18:	d505      	bpl.n	b6e26 <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6e1a:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b6e22:	f7ff bf24 	b.w	b6c6e <_ZN8Debounce6updateEv>
}
   b6e26:	bd10      	pop	{r4, pc}

000b6e28 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6e28:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b6e2a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6e2c:	f013 0001 	ands.w	r0, r3, #1
   b6e30:	d003      	beq.n	b6e3a <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b6e32:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b6e36:	f7ff bf4a 	b.w	b6cce <_ZN8Debounce4fellEv>
}
   b6e3a:	4770      	bx	lr

000b6e3c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <os_mutex_create+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	00030248 	.word	0x00030248

000b6e4c <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <os_mutex_destroy+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	00030248 	.word	0x00030248

000b6e5c <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <os_mutex_recursive_create+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	00030248 	.word	0x00030248

000b6e6c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <HAL_RNG_GetRandomNumber+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	685b      	ldr	r3, [r3, #4]
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	00030218 	.word	0x00030218

000b6e7c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <HAL_Delay_Microseconds+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	68db      	ldr	r3, [r3, #12]
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	00030218 	.word	0x00030218

000b6e8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	695b      	ldr	r3, [r3, #20]
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	00030218 	.word	0x00030218

000b6e9c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <hal_pin_validate_function+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	685b      	ldr	r3, [r3, #4]
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	0003022c 	.word	0x0003022c

000b6eac <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <hal_gpio_mode+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	689b      	ldr	r3, [r3, #8]
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	0003022c 	.word	0x0003022c

000b6ebc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <hal_gpio_get_mode+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	68db      	ldr	r3, [r3, #12]
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	0003022c 	.word	0x0003022c

000b6ecc <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <hal_gpio_write+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	691b      	ldr	r3, [r3, #16]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	0003022c 	.word	0x0003022c

000b6edc <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <hal_gpio_read+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	695b      	ldr	r3, [r3, #20]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	0003022c 	.word	0x0003022c

000b6eec <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <HAL_DAC_Write+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	0003022c 	.word	0x0003022c

000b6efc <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <hal_adc_read+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	0003022c 	.word	0x0003022c

000b6f0c <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <hal_pwm_write_ext+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	0003022c 	.word	0x0003022c

000b6f1c <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <hal_i2c_set_speed+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	681b      	ldr	r3, [r3, #0]
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030228 	.word	0x00030228

000b6f2c <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <hal_i2c_begin+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	68db      	ldr	r3, [r3, #12]
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030228 	.word	0x00030228

000b6f3c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <hal_i2c_begin_transmission+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	699b      	ldr	r3, [r3, #24]
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030228 	.word	0x00030228

000b6f4c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <hal_i2c_end_transmission+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	69db      	ldr	r3, [r3, #28]
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030228 	.word	0x00030228

000b6f5c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <hal_i2c_write+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	6a1b      	ldr	r3, [r3, #32]
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030228 	.word	0x00030228

000b6f6c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <hal_i2c_available+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030228 	.word	0x00030228

000b6f7c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <hal_i2c_read+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	00030228 	.word	0x00030228

000b6f8c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <hal_i2c_peek+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030228 	.word	0x00030228

000b6f9c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <hal_i2c_flush+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030228 	.word	0x00030228

000b6fac <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <hal_i2c_is_enabled+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030228 	.word	0x00030228

000b6fbc <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <hal_i2c_init+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	00030228 	.word	0x00030228

000b6fcc <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <if_index_to_name+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	695b      	ldr	r3, [r3, #20]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	0003026c 	.word	0x0003026c

000b6fdc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <inet_inet_ntop+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	695b      	ldr	r3, [r3, #20]
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	00030264 	.word	0x00030264

000b6fec <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <inet_htonl+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	6a1b      	ldr	r3, [r3, #32]
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	00030264 	.word	0x00030264

000b6ffc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <inet_ntohs+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030264 	.word	0x00030264

000b700c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <inet_htons+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030264 	.word	0x00030264

000b701c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <netdb_freeaddrinfo+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	689b      	ldr	r3, [r3, #8]
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030268 	.word	0x00030268

000b702c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <netdb_getaddrinfo+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	68db      	ldr	r3, [r3, #12]
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030268 	.word	0x00030268

000b703c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <sock_setsockopt+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	699b      	ldr	r3, [r3, #24]
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030238 	.word	0x00030238

000b704c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <sock_close+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	69db      	ldr	r3, [r3, #28]
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	00030238 	.word	0x00030238

000b705c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <sock_connect+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	6a1b      	ldr	r3, [r3, #32]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030238 	.word	0x00030238

000b706c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <sock_recv+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030238 	.word	0x00030238

000b707c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <sock_send+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030238 	.word	0x00030238

000b708c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <sock_socket+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030238 	.word	0x00030238

000b709c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <hal_spi_begin+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	681b      	ldr	r3, [r3, #0]
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030230 	.word	0x00030230

000b70ac <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <hal_spi_transfer+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	695b      	ldr	r3, [r3, #20]
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030230 	.word	0x00030230

000b70bc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <hal_spi_init+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	69db      	ldr	r3, [r3, #28]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030230 	.word	0x00030230

000b70cc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <hal_spi_is_enabled+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	6a1b      	ldr	r3, [r3, #32]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030230 	.word	0x00030230

000b70dc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <hal_spi_info+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030230 	.word	0x00030230

000b70ec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <hal_spi_set_settings+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030230 	.word	0x00030230

000b70fc <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <hal_spi_acquire+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030230 	.word	0x00030230

000b710c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <hal_spi_release+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030230 	.word	0x00030230

000b711c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <hal_usart_write+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	68db      	ldr	r3, [r3, #12]
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	0003023c 	.word	0x0003023c

000b712c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <hal_usart_available+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	691b      	ldr	r3, [r3, #16]
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	0003023c 	.word	0x0003023c

000b713c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <hal_usart_read+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	695b      	ldr	r3, [r3, #20]
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	0003023c 	.word	0x0003023c

000b714c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <hal_usart_peek+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	699b      	ldr	r3, [r3, #24]
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	0003023c 	.word	0x0003023c

000b715c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <hal_usart_flush+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	69db      	ldr	r3, [r3, #28]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	0003023c 	.word	0x0003023c

000b716c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <hal_usart_is_enabled+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	6a1b      	ldr	r3, [r3, #32]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	0003023c 	.word	0x0003023c

000b717c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <hal_usart_available_data_for_write+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003023c 	.word	0x0003023c

000b718c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <hal_usart_init_ex+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003023c 	.word	0x0003023c

000b719c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <HAL_USB_USART_Init+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	681b      	ldr	r3, [r3, #0]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	0003024c 	.word	0x0003024c

000b71ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <HAL_USB_USART_Available_Data+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	691b      	ldr	r3, [r3, #16]
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	0003024c 	.word	0x0003024c

000b71bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	695b      	ldr	r3, [r3, #20]
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	0003024c 	.word	0x0003024c

000b71cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <HAL_USB_USART_Receive_Data+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	699b      	ldr	r3, [r3, #24]
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	0003024c 	.word	0x0003024c

000b71dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <HAL_USB_USART_Send_Data+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	69db      	ldr	r3, [r3, #28]
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	0003024c 	.word	0x0003024c

000b71ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <HAL_USB_USART_Flush_Data+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	6a1b      	ldr	r3, [r3, #32]
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	0003024c 	.word	0x0003024c

000b71fc <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b02      	ldr	r3, [pc, #8]	; (b7208 <panic_+0xc>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7204:	9301      	str	r3, [sp, #4]
   b7206:	bd08      	pop	{r3, pc}
   b7208:	00030260 	.word	0x00030260

000b720c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b02      	ldr	r3, [pc, #8]	; (b7218 <log_message+0xc>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7214:	9301      	str	r3, [sp, #4]
   b7216:	bd08      	pop	{r3, pc}
   b7218:	00030260 	.word	0x00030260

000b721c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b721c:	b508      	push	{r3, lr}
   b721e:	4b02      	ldr	r3, [pc, #8]	; (b7228 <set_system_mode+0xc>)
   b7220:	681b      	ldr	r3, [r3, #0]
   b7222:	685b      	ldr	r3, [r3, #4]
   b7224:	9301      	str	r3, [sp, #4]
   b7226:	bd08      	pop	{r3, pc}
   b7228:	00030220 	.word	0x00030220

000b722c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b722c:	b508      	push	{r3, lr}
   b722e:	4b02      	ldr	r3, [pc, #8]	; (b7238 <system_delay_ms+0xc>)
   b7230:	681b      	ldr	r3, [r3, #0]
   b7232:	695b      	ldr	r3, [r3, #20]
   b7234:	9301      	str	r3, [sp, #4]
   b7236:	bd08      	pop	{r3, pc}
   b7238:	00030220 	.word	0x00030220

000b723c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b723c:	b508      	push	{r3, lr}
   b723e:	4b02      	ldr	r3, [pc, #8]	; (b7248 <system_thread_set_state+0xc>)
   b7240:	681b      	ldr	r3, [r3, #0]
   b7242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7244:	9301      	str	r3, [sp, #4]
   b7246:	bd08      	pop	{r3, pc}
   b7248:	00030220 	.word	0x00030220

000b724c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b724c:	b508      	push	{r3, lr}
   b724e:	4b03      	ldr	r3, [pc, #12]	; (b725c <system_ctrl_set_app_request_handler+0x10>)
   b7250:	681b      	ldr	r3, [r3, #0]
   b7252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b7256:	9301      	str	r3, [sp, #4]
   b7258:	bd08      	pop	{r3, pc}
   b725a:	0000      	.short	0x0000
   b725c:	00030220 	.word	0x00030220

000b7260 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b03      	ldr	r3, [pc, #12]	; (b7270 <system_ctrl_set_result+0x10>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b726a:	9301      	str	r3, [sp, #4]
   b726c:	bd08      	pop	{r3, pc}
   b726e:	0000      	.short	0x0000
   b7270:	00030220 	.word	0x00030220

000b7274 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <spark_process+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	689b      	ldr	r3, [r3, #8]
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030244 	.word	0x00030244

000b7284 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030244 	.word	0x00030244

000b7294 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <network_connect+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	685b      	ldr	r3, [r3, #4]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030240 	.word	0x00030240

000b72a4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <network_connecting+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	689b      	ldr	r3, [r3, #8]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030240 	.word	0x00030240

000b72b4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <network_disconnect+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	68db      	ldr	r3, [r3, #12]
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030240 	.word	0x00030240

000b72c4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <network_ready+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	691b      	ldr	r3, [r3, #16]
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030240 	.word	0x00030240

000b72d4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <network_on+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	695b      	ldr	r3, [r3, #20]
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030240 	.word	0x00030240

000b72e4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <network_off+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	699b      	ldr	r3, [r3, #24]
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030240 	.word	0x00030240

000b72f4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <network_listen+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	69db      	ldr	r3, [r3, #28]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	00030240 	.word	0x00030240

000b7304 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <network_listening+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	6a1b      	ldr	r3, [r3, #32]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	00030240 	.word	0x00030240

000b7314 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <network_set_listen_timeout+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	00030240 	.word	0x00030240

000b7324 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <network_get_listen_timeout+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	00030240 	.word	0x00030240

000b7334 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <network_is_on+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	00030240 	.word	0x00030240

000b7344 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <network_is_off+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	00030240 	.word	0x00030240

000b7354 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <malloc+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	681b      	ldr	r3, [r3, #0]
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	0003021c 	.word	0x0003021c

000b7364 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <free+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	685b      	ldr	r3, [r3, #4]
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	0003021c 	.word	0x0003021c

000b7374 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <realloc+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	689b      	ldr	r3, [r3, #8]
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	0003021c 	.word	0x0003021c

000b7384 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <snprintf+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	69db      	ldr	r3, [r3, #28]
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	0003021c 	.word	0x0003021c

000b7394 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7394:	b508      	push	{r3, lr}
   b7396:	4b02      	ldr	r3, [pc, #8]	; (b73a0 <vsnprintf+0xc>)
   b7398:	681b      	ldr	r3, [r3, #0]
   b739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b739c:	9301      	str	r3, [sp, #4]
   b739e:	bd08      	pop	{r3, pc}
   b73a0:	0003021c 	.word	0x0003021c

000b73a4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b73a4:	b508      	push	{r3, lr}
   b73a6:	4b02      	ldr	r3, [pc, #8]	; (b73b0 <abort+0xc>)
   b73a8:	681b      	ldr	r3, [r3, #0]
   b73aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b73ac:	9301      	str	r3, [sp, #4]
   b73ae:	bd08      	pop	{r3, pc}
   b73b0:	0003021c 	.word	0x0003021c

000b73b4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b02      	ldr	r3, [pc, #8]	; (b73c0 <__errno+0xc>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b73bc:	9301      	str	r3, [sp, #4]
   b73be:	bd08      	pop	{r3, pc}
   b73c0:	0003021c 	.word	0x0003021c

000b73c4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b73c4:	b508      	push	{r3, lr}
   b73c6:	4b02      	ldr	r3, [pc, #8]	; (b73d0 <__assert_func+0xc>)
   b73c8:	681b      	ldr	r3, [r3, #0]
   b73ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73cc:	9301      	str	r3, [sp, #4]
   b73ce:	bd08      	pop	{r3, pc}
   b73d0:	0003021c 	.word	0x0003021c

000b73d4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b73d4:	b508      	push	{r3, lr}
   b73d6:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <newlib_impure_ptr_callback+0xc>)
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b73dc:	9301      	str	r3, [sp, #4]
   b73de:	bd08      	pop	{r3, pc}
   b73e0:	0003021c 	.word	0x0003021c

000b73e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b73e4:	2100      	movs	r1, #0
   b73e6:	f7ff bf21 	b.w	b722c <system_delay_ms>
	...

000b73ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b73ec:	4802      	ldr	r0, [pc, #8]	; (b73f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b73ee:	2300      	movs	r3, #0
   b73f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b73f2:	f7ff bd33 	b.w	b6e5c <os_mutex_recursive_create>
   b73f6:	bf00      	nop
   b73f8:	2003e6c8 	.word	0x2003e6c8

000b73fc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b73fc:	2200      	movs	r2, #0
   b73fe:	6840      	ldr	r0, [r0, #4]
   b7400:	4611      	mov	r1, r2
   b7402:	f7ff bf7f 	b.w	b7304 <network_listening>

000b7406 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b7406:	2200      	movs	r2, #0
   b7408:	6840      	ldr	r0, [r0, #4]
   b740a:	4611      	mov	r1, r2
   b740c:	f7ff bf8a 	b.w	b7324 <network_get_listen_timeout>

000b7410 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b7410:	6840      	ldr	r0, [r0, #4]
   b7412:	2200      	movs	r2, #0
   b7414:	f7ff bf7e 	b.w	b7314 <network_set_listen_timeout>

000b7418 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b7418:	6840      	ldr	r0, [r0, #4]
   b741a:	2200      	movs	r2, #0
   b741c:	f081 0101 	eor.w	r1, r1, #1
   b7420:	f7ff bf68 	b.w	b72f4 <network_listen>

000b7424 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b7424:	2300      	movs	r3, #0
   b7426:	6840      	ldr	r0, [r0, #4]
   b7428:	461a      	mov	r2, r3
   b742a:	4619      	mov	r1, r3
   b742c:	f7ff bf5a 	b.w	b72e4 <network_off>

000b7430 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7430:	2300      	movs	r3, #0
   b7432:	6840      	ldr	r0, [r0, #4]
   b7434:	461a      	mov	r2, r3
   b7436:	4619      	mov	r1, r3
   b7438:	f7ff bf4c 	b.w	b72d4 <network_on>

000b743c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b743c:	2200      	movs	r2, #0
   b743e:	6840      	ldr	r0, [r0, #4]
   b7440:	4611      	mov	r1, r2
   b7442:	f7ff bf3f 	b.w	b72c4 <network_ready>

000b7446 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7446:	2200      	movs	r2, #0
   b7448:	6840      	ldr	r0, [r0, #4]
   b744a:	4611      	mov	r1, r2
   b744c:	f7ff bf2a 	b.w	b72a4 <network_connecting>

000b7450 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7450:	6840      	ldr	r0, [r0, #4]
   b7452:	2200      	movs	r2, #0
   b7454:	2102      	movs	r1, #2
   b7456:	f7ff bf2d 	b.w	b72b4 <network_disconnect>

000b745a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b745a:	2300      	movs	r3, #0
   b745c:	6840      	ldr	r0, [r0, #4]
   b745e:	461a      	mov	r2, r3
   b7460:	f7ff bf18 	b.w	b7294 <network_connect>

000b7464 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7464:	4b02      	ldr	r3, [pc, #8]	; (b7470 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7466:	2203      	movs	r2, #3
   b7468:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b746a:	4a02      	ldr	r2, [pc, #8]	; (b7474 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b746c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b746e:	4770      	bx	lr
   b7470:	2003e6cc 	.word	0x2003e6cc
   b7474:	000b9e50 	.word	0x000b9e50

000b7478 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7478:	4770      	bx	lr

000b747a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b747a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b747c:	4606      	mov	r6, r0
   b747e:	4615      	mov	r5, r2
   b7480:	460c      	mov	r4, r1
   b7482:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7484:	42bc      	cmp	r4, r7
   b7486:	d006      	beq.n	b7496 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7488:	6833      	ldr	r3, [r6, #0]
   b748a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b748e:	689b      	ldr	r3, [r3, #8]
   b7490:	4630      	mov	r0, r6
   b7492:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7494:	e7f6      	b.n	b7484 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7496:	4628      	mov	r0, r5
   b7498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b749a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b749a:	7c00      	ldrb	r0, [r0, #16]
   b749c:	2200      	movs	r2, #0
   b749e:	f7ff bd5d 	b.w	b6f5c <hal_i2c_write>

000b74a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b74a2:	7c00      	ldrb	r0, [r0, #16]
   b74a4:	2100      	movs	r1, #0
   b74a6:	f7ff bd61 	b.w	b6f6c <hal_i2c_available>

000b74aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b74aa:	7c00      	ldrb	r0, [r0, #16]
   b74ac:	2100      	movs	r1, #0
   b74ae:	f7ff bd65 	b.w	b6f7c <hal_i2c_read>

000b74b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b74b2:	7c00      	ldrb	r0, [r0, #16]
   b74b4:	2100      	movs	r1, #0
   b74b6:	f7ff bd69 	b.w	b6f8c <hal_i2c_peek>

000b74ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b74ba:	7c00      	ldrb	r0, [r0, #16]
   b74bc:	2100      	movs	r1, #0
   b74be:	f7ff bd6d 	b.w	b6f9c <hal_i2c_flush>

000b74c2 <_ZN7TwoWireD0Ev>:
   b74c2:	b510      	push	{r4, lr}
   b74c4:	2114      	movs	r1, #20
   b74c6:	4604      	mov	r4, r0
   b74c8:	f7fd fc11 	bl	b4cee <_ZdlPvj>
   b74cc:	4620      	mov	r0, r4
   b74ce:	bd10      	pop	{r4, pc}

000b74d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b74d0:	b538      	push	{r3, r4, r5, lr}
   b74d2:	4604      	mov	r4, r0
   b74d4:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b74d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b74da:	2200      	movs	r2, #0
   b74dc:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b74e0:	4b09      	ldr	r3, [pc, #36]	; (b7508 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b74e2:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b74e4:	4608      	mov	r0, r1
   b74e6:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b74e8:	4629      	mov	r1, r5
   b74ea:	f7ff fd67 	bl	b6fbc <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b74ee:	30bf      	adds	r0, #191	; 0xbf
   b74f0:	d108      	bne.n	b7504 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b74f2:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b74f4:	07db      	lsls	r3, r3, #31
   b74f6:	d505      	bpl.n	b7504 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b74f8:	6868      	ldr	r0, [r5, #4]
   b74fa:	f7ff ff33 	bl	b7364 <free>
    free(conf.tx_buffer);
   b74fe:	68e8      	ldr	r0, [r5, #12]
   b7500:	f7ff ff30 	bl	b7364 <free>
}
   b7504:	4620      	mov	r0, r4
   b7506:	bd38      	pop	{r3, r4, r5, pc}
   b7508:	000b9e8c 	.word	0x000b9e8c

000b750c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b750c:	7c00      	ldrb	r0, [r0, #16]
   b750e:	2200      	movs	r2, #0
   b7510:	f7ff bd04 	b.w	b6f1c <hal_i2c_set_speed>

000b7514 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b7514:	2300      	movs	r3, #0
   b7516:	7c00      	ldrb	r0, [r0, #16]
   b7518:	461a      	mov	r2, r3
   b751a:	4619      	mov	r1, r3
   b751c:	f7ff bd06 	b.w	b6f2c <hal_i2c_begin>

000b7520 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7520:	7c00      	ldrb	r0, [r0, #16]
   b7522:	2200      	movs	r2, #0
   b7524:	f7ff bd0a 	b.w	b6f3c <hal_i2c_begin_transmission>

000b7528 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b7528:	b2c9      	uxtb	r1, r1
   b752a:	f7ff bff9 	b.w	b7520 <_ZN7TwoWire17beginTransmissionEh>

000b752e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b752e:	7c00      	ldrb	r0, [r0, #16]
   b7530:	2200      	movs	r2, #0
   b7532:	f7ff bd0b 	b.w	b6f4c <hal_i2c_end_transmission>

000b7536 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b7536:	2101      	movs	r1, #1
   b7538:	f7ff bff9 	b.w	b752e <_ZN7TwoWire15endTransmissionEh>

000b753c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b753c:	4770      	bx	lr

000b753e <_ZN9IPAddressD0Ev>:
   b753e:	b510      	push	{r4, lr}
   b7540:	2118      	movs	r1, #24
   b7542:	4604      	mov	r4, r0
   b7544:	f7fd fbd3 	bl	b4cee <_ZdlPvj>
   b7548:	4620      	mov	r0, r4
   b754a:	bd10      	pop	{r4, pc}

000b754c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b754c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b754e:	7d03      	ldrb	r3, [r0, #20]
   b7550:	2b06      	cmp	r3, #6
{
   b7552:	b08d      	sub	sp, #52	; 0x34
   b7554:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7556:	f100 0704 	add.w	r7, r0, #4
   b755a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b755e:	d012      	beq.n	b7586 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7560:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7564:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7568:	220a      	movs	r2, #10
   b756a:	4630      	mov	r0, r6
   b756c:	f000 f973 	bl	b7856 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7570:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7572:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7574:	d019      	beq.n	b75aa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7576:	2c00      	cmp	r4, #0
   b7578:	d0f4      	beq.n	b7564 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b757a:	212e      	movs	r1, #46	; 0x2e
   b757c:	4630      	mov	r0, r6
   b757e:	f000 f951 	bl	b7824 <_ZN5Print5printEc>
   b7582:	4404      	add	r4, r0
   b7584:	e7ee      	b.n	b7564 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7586:	232f      	movs	r3, #47	; 0x2f
   b7588:	466a      	mov	r2, sp
   b758a:	4639      	mov	r1, r7
   b758c:	200a      	movs	r0, #10
		buf[0] = 0;
   b758e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7592:	f7ff fd23 	bl	b6fdc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7596:	4668      	mov	r0, sp
   b7598:	f7fd fb62 	bl	b4c60 <strlen>
   b759c:	6833      	ldr	r3, [r6, #0]
   b759e:	4602      	mov	r2, r0
   b75a0:	68db      	ldr	r3, [r3, #12]
   b75a2:	4669      	mov	r1, sp
   b75a4:	4630      	mov	r0, r6
   b75a6:	4798      	blx	r3
   b75a8:	4604      	mov	r4, r0
    }
    return n;
}
   b75aa:	4620      	mov	r0, r4
   b75ac:	b00d      	add	sp, #52	; 0x34
   b75ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b75b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b75b0:	b510      	push	{r4, lr}
   b75b2:	4b05      	ldr	r3, [pc, #20]	; (b75c8 <_ZN9IPAddressC1Ev+0x18>)
   b75b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b75b6:	2211      	movs	r2, #17
   b75b8:	f840 3b04 	str.w	r3, [r0], #4
   b75bc:	2100      	movs	r1, #0
   b75be:	f001 fabd 	bl	b8b3c <memset>
}
   b75c2:	4620      	mov	r0, r4
   b75c4:	bd10      	pop	{r4, pc}
   b75c6:	bf00      	nop
   b75c8:	000b9eb4 	.word	0x000b9eb4

000b75cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b75cc:	4603      	mov	r3, r0
   b75ce:	4a07      	ldr	r2, [pc, #28]	; (b75ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b75d0:	b510      	push	{r4, lr}
   b75d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b75d6:	f101 0210 	add.w	r2, r1, #16
   b75da:	f851 4b04 	ldr.w	r4, [r1], #4
   b75de:	f843 4b04 	str.w	r4, [r3], #4
   b75e2:	4291      	cmp	r1, r2
   b75e4:	d1f9      	bne.n	b75da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b75e6:	780a      	ldrb	r2, [r1, #0]
   b75e8:	701a      	strb	r2, [r3, #0]
}
   b75ea:	bd10      	pop	{r4, pc}
   b75ec:	000b9eb4 	.word	0x000b9eb4

000b75f0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b75f0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b75f2:	2b04      	cmp	r3, #4
   b75f4:	d104      	bne.n	b7600 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b75f6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b75f8:	3800      	subs	r0, #0
   b75fa:	bf18      	it	ne
   b75fc:	2001      	movne	r0, #1
   b75fe:	4770      	bx	lr
    } else if (version() == 6) {
   b7600:	2b06      	cmp	r3, #6
   b7602:	d107      	bne.n	b7614 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7604:	6843      	ldr	r3, [r0, #4]
   b7606:	b93b      	cbnz	r3, b7618 <_ZNK9IPAddresscvbEv+0x28>
   b7608:	6883      	ldr	r3, [r0, #8]
   b760a:	b92b      	cbnz	r3, b7618 <_ZNK9IPAddresscvbEv+0x28>
   b760c:	68c3      	ldr	r3, [r0, #12]
   b760e:	b91b      	cbnz	r3, b7618 <_ZNK9IPAddresscvbEv+0x28>
   b7610:	6900      	ldr	r0, [r0, #16]
   b7612:	e7f1      	b.n	b75f8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b7614:	2000      	movs	r0, #0
   b7616:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7618:	2001      	movs	r0, #1
}
   b761a:	4770      	bx	lr

000b761c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b761c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b761e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b7622:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b7626:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b762a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b762e:	2304      	movs	r3, #4
   b7630:	6041      	str	r1, [r0, #4]
   b7632:	7503      	strb	r3, [r0, #20]
}
   b7634:	bd10      	pop	{r4, pc}
	...

000b7638 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7638:	b507      	push	{r0, r1, r2, lr}
   b763a:	4b06      	ldr	r3, [pc, #24]	; (b7654 <_ZN9IPAddressC1EPKh+0x1c>)
   b763c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b763e:	78cb      	ldrb	r3, [r1, #3]
   b7640:	9300      	str	r3, [sp, #0]
   b7642:	788b      	ldrb	r3, [r1, #2]
   b7644:	784a      	ldrb	r2, [r1, #1]
   b7646:	7809      	ldrb	r1, [r1, #0]
   b7648:	f7ff ffe8 	bl	b761c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b764c:	b003      	add	sp, #12
   b764e:	f85d fb04 	ldr.w	pc, [sp], #4
   b7652:	bf00      	nop
   b7654:	000b9eb4 	.word	0x000b9eb4

000b7658 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7658:	4b01      	ldr	r3, [pc, #4]	; (b7660 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b765a:	4a02      	ldr	r2, [pc, #8]	; (b7664 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b765c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b765e:	4770      	bx	lr
   b7660:	2003e6d4 	.word	0x2003e6d4
   b7664:	000b9ec0 	.word	0x000b9ec0

000b7668 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7668:	2300      	movs	r3, #0
   b766a:	6840      	ldr	r0, [r0, #4]
   b766c:	461a      	mov	r2, r3
   b766e:	f7ff be11 	b.w	b7294 <network_connect>

000b7672 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7672:	6840      	ldr	r0, [r0, #4]
   b7674:	2200      	movs	r2, #0
   b7676:	2102      	movs	r1, #2
   b7678:	f7ff be1c 	b.w	b72b4 <network_disconnect>

000b767c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b767c:	2200      	movs	r2, #0
   b767e:	6840      	ldr	r0, [r0, #4]
   b7680:	4611      	mov	r1, r2
   b7682:	f7ff be0f 	b.w	b72a4 <network_connecting>

000b7686 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7686:	2200      	movs	r2, #0
   b7688:	6840      	ldr	r0, [r0, #4]
   b768a:	4611      	mov	r1, r2
   b768c:	f7ff be1a 	b.w	b72c4 <network_ready>

000b7690 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7690:	2300      	movs	r3, #0
   b7692:	6840      	ldr	r0, [r0, #4]
   b7694:	461a      	mov	r2, r3
   b7696:	4619      	mov	r1, r3
   b7698:	f7ff be1c 	b.w	b72d4 <network_on>

000b769c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b769c:	2300      	movs	r3, #0
   b769e:	6840      	ldr	r0, [r0, #4]
   b76a0:	461a      	mov	r2, r3
   b76a2:	4619      	mov	r1, r3
   b76a4:	f7ff be1e 	b.w	b72e4 <network_off>

000b76a8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b76a8:	6840      	ldr	r0, [r0, #4]
   b76aa:	2100      	movs	r1, #0
   b76ac:	f7ff be42 	b.w	b7334 <network_is_on>

000b76b0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b76b0:	6840      	ldr	r0, [r0, #4]
   b76b2:	2100      	movs	r1, #0
   b76b4:	f7ff be46 	b.w	b7344 <network_is_off>

000b76b8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b76b8:	6840      	ldr	r0, [r0, #4]
   b76ba:	2200      	movs	r2, #0
   b76bc:	f081 0101 	eor.w	r1, r1, #1
   b76c0:	f7ff be18 	b.w	b72f4 <network_listen>

000b76c4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b76c4:	6840      	ldr	r0, [r0, #4]
   b76c6:	2200      	movs	r2, #0
   b76c8:	f7ff be24 	b.w	b7314 <network_set_listen_timeout>

000b76cc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b76cc:	2200      	movs	r2, #0
   b76ce:	6840      	ldr	r0, [r0, #4]
   b76d0:	4611      	mov	r1, r2
   b76d2:	f7ff be27 	b.w	b7324 <network_get_listen_timeout>

000b76d6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b76d6:	2200      	movs	r2, #0
   b76d8:	6840      	ldr	r0, [r0, #4]
   b76da:	4611      	mov	r1, r2
   b76dc:	f7ff be12 	b.w	b7304 <network_listening>

000b76e0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b76e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b76e4:	b095      	sub	sp, #84	; 0x54
   b76e6:	4614      	mov	r4, r2
   b76e8:	460d      	mov	r5, r1
   b76ea:	4607      	mov	r7, r0
    IPAddress addr;
   b76ec:	f7ff ff60 	bl	b75b0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b76f0:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b76f2:	221c      	movs	r2, #28
   b76f4:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b76f6:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b76f8:	f001 fa20 	bl	b8b3c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b76fc:	2340      	movs	r3, #64	; 0x40
   b76fe:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b7700:	4620      	mov	r0, r4
   b7702:	466b      	mov	r3, sp
   b7704:	aa0c      	add	r2, sp, #48	; 0x30
   b7706:	2100      	movs	r1, #0
   b7708:	f7ff fc90 	bl	b702c <netdb_getaddrinfo>
    if (!r) {
   b770c:	4604      	mov	r4, r0
   b770e:	2800      	cmp	r0, #0
   b7710:	d14b      	bne.n	b77aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7712:	4602      	mov	r2, r0
   b7714:	2101      	movs	r1, #1
   b7716:	6868      	ldr	r0, [r5, #4]
   b7718:	f7ff fdd4 	bl	b72c4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b771c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b771e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7720:	4622      	mov	r2, r4
   b7722:	6868      	ldr	r0, [r5, #4]
   b7724:	f7ff fdce 	bl	b72c4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7728:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b772a:	4681      	mov	r9, r0
        bool ok = false;
   b772c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b772e:	2e00      	cmp	r6, #0
   b7730:	d03b      	beq.n	b77aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b7732:	2900      	cmp	r1, #0
   b7734:	d139      	bne.n	b77aa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b7736:	6873      	ldr	r3, [r6, #4]
   b7738:	2b02      	cmp	r3, #2
   b773a:	d003      	beq.n	b7744 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b773c:	2b0a      	cmp	r3, #10
   b773e:	d011      	beq.n	b7764 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7740:	69f6      	ldr	r6, [r6, #28]
   b7742:	e7f4      	b.n	b772e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b7744:	f1b8 0f00 	cmp.w	r8, #0
   b7748:	d0fa      	beq.n	b7740 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b774a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b774c:	a806      	add	r0, sp, #24
   b774e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7750:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b7752:	f7ff ff71 	bl	b7638 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7758:	1d3c      	adds	r4, r7, #4
   b775a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b775c:	682b      	ldr	r3, [r5, #0]
   b775e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7760:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7762:	e7ed      	b.n	b7740 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7764:	f1b9 0f00 	cmp.w	r9, #0
   b7768:	d0ea      	beq.n	b7740 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b776a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b776c:	2210      	movs	r2, #16
   b776e:	a801      	add	r0, sp, #4
   b7770:	f001 f9e4 	bl	b8b3c <memset>
                    a.v = 6;
   b7774:	2306      	movs	r3, #6
   b7776:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b777a:	ad01      	add	r5, sp, #4
   b777c:	f104 0308 	add.w	r3, r4, #8
   b7780:	3418      	adds	r4, #24
   b7782:	6818      	ldr	r0, [r3, #0]
   b7784:	6859      	ldr	r1, [r3, #4]
   b7786:	462a      	mov	r2, r5
   b7788:	c203      	stmia	r2!, {r0, r1}
   b778a:	3308      	adds	r3, #8
   b778c:	42a3      	cmp	r3, r4
   b778e:	4615      	mov	r5, r2
   b7790:	d1f7      	bne.n	b7782 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7792:	a901      	add	r1, sp, #4
   b7794:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7796:	ad07      	add	r5, sp, #28
   b7798:	f7ff ff18 	bl	b75cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b779c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b779e:	1d3c      	adds	r4, r7, #4
   b77a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b77a2:	682b      	ldr	r3, [r5, #0]
   b77a4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b77a6:	4649      	mov	r1, r9
   b77a8:	e7ca      	b.n	b7740 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b77aa:	9800      	ldr	r0, [sp, #0]
   b77ac:	f7ff fc36 	bl	b701c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b77b0:	4638      	mov	r0, r7
   b77b2:	b015      	add	sp, #84	; 0x54
   b77b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b77b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b77b8:	4b02      	ldr	r3, [pc, #8]	; (b77c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b77ba:	4a03      	ldr	r2, [pc, #12]	; (b77c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b77bc:	601a      	str	r2, [r3, #0]
   b77be:	2200      	movs	r2, #0
   b77c0:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b77c2:	4770      	bx	lr
   b77c4:	2003e6d8 	.word	0x2003e6d8
   b77c8:	000b9ecc 	.word	0x000b9ecc

000b77cc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b77cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b77ce:	4606      	mov	r6, r0
   b77d0:	460d      	mov	r5, r1
  size_t n = 0;
   b77d2:	188f      	adds	r7, r1, r2
   b77d4:	2400      	movs	r4, #0
  while (size--) {
   b77d6:	42bd      	cmp	r5, r7
   b77d8:	d00c      	beq.n	b77f4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b77da:	6833      	ldr	r3, [r6, #0]
   b77dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b77e0:	689b      	ldr	r3, [r3, #8]
   b77e2:	4630      	mov	r0, r6
   b77e4:	4798      	blx	r3
     if (chunk>=0)
   b77e6:	1e03      	subs	r3, r0, #0
   b77e8:	db01      	blt.n	b77ee <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b77ea:	441c      	add	r4, r3
  while (size--) {
   b77ec:	e7f3      	b.n	b77d6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b77ee:	2c00      	cmp	r4, #0
   b77f0:	bf08      	it	eq
   b77f2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b77f4:	4620      	mov	r0, r4
   b77f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b77f8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b77f8:	b513      	push	{r0, r1, r4, lr}
   b77fa:	4604      	mov	r4, r0
    }
   b77fc:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b77fe:	b159      	cbz	r1, b7818 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b7800:	9101      	str	r1, [sp, #4]
   b7802:	f7fd fa2d 	bl	b4c60 <strlen>
   b7806:	6823      	ldr	r3, [r4, #0]
   b7808:	9901      	ldr	r1, [sp, #4]
   b780a:	68db      	ldr	r3, [r3, #12]
   b780c:	4602      	mov	r2, r0
   b780e:	4620      	mov	r0, r4
    }
   b7810:	b002      	add	sp, #8
   b7812:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7816:	4718      	bx	r3
    }
   b7818:	b002      	add	sp, #8
   b781a:	bd10      	pop	{r4, pc}

000b781c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b781c:	b508      	push	{r3, lr}
  return write(str);
   b781e:	f7ff ffeb 	bl	b77f8 <_ZN5Print5writeEPKc>
}
   b7822:	bd08      	pop	{r3, pc}

000b7824 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b7824:	6803      	ldr	r3, [r0, #0]
   b7826:	689b      	ldr	r3, [r3, #8]
   b7828:	4718      	bx	r3

000b782a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b782a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b782c:	210d      	movs	r1, #13
{
   b782e:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7830:	f7ff fff8 	bl	b7824 <_ZN5Print5printEc>
  n += print('\n');
   b7834:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7836:	4604      	mov	r4, r0
  n += print('\n');
   b7838:	4628      	mov	r0, r5
   b783a:	f7ff fff3 	bl	b7824 <_ZN5Print5printEc>
  return n;
}
   b783e:	4420      	add	r0, r4
   b7840:	bd38      	pop	{r3, r4, r5, pc}

000b7842 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7842:	b538      	push	{r3, r4, r5, lr}
   b7844:	4605      	mov	r5, r0
  return write(str);
   b7846:	f7ff ffd7 	bl	b77f8 <_ZN5Print5writeEPKc>
   b784a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b784c:	4628      	mov	r0, r5
   b784e:	f7ff ffec 	bl	b782a <_ZN5Print7printlnEv>
  return n;
}
   b7852:	4420      	add	r0, r4
   b7854:	bd38      	pop	{r3, r4, r5, pc}

000b7856 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7856:	b530      	push	{r4, r5, lr}
   b7858:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b785a:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b785c:	2a01      	cmp	r2, #1
  *str = '\0';
   b785e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7862:	bf98      	it	ls
   b7864:	220a      	movls	r2, #10
   b7866:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7868:	460d      	mov	r5, r1
   b786a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b786e:	fb01 5312 	mls	r3, r1, r2, r5
   b7872:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7876:	2b09      	cmp	r3, #9
   b7878:	bf94      	ite	ls
   b787a:	3330      	addls	r3, #48	; 0x30
   b787c:	3337      	addhi	r3, #55	; 0x37
   b787e:	b2db      	uxtb	r3, r3
  } while(n);
   b7880:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7882:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7886:	d9ef      	bls.n	b7868 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7888:	4621      	mov	r1, r4
   b788a:	f7ff ffb5 	bl	b77f8 <_ZN5Print5writeEPKc>
}
   b788e:	b00b      	add	sp, #44	; 0x2c
   b7890:	bd30      	pop	{r4, r5, pc}

000b7892 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7896:	b086      	sub	sp, #24
   b7898:	af00      	add	r7, sp, #0
   b789a:	4605      	mov	r5, r0
   b789c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b789e:	1d38      	adds	r0, r7, #4
   b78a0:	2114      	movs	r1, #20
{
   b78a2:	4614      	mov	r4, r2
    va_copy(args2, args);
   b78a4:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b78a6:	f7ff fd75 	bl	b7394 <vsnprintf>

    if (n<bufsize)
   b78aa:	2813      	cmp	r0, #19
   b78ac:	d80e      	bhi.n	b78cc <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b78ae:	1d39      	adds	r1, r7, #4
   b78b0:	4628      	mov	r0, r5
   b78b2:	f7ff ffa1 	bl	b77f8 <_ZN5Print5writeEPKc>
   b78b6:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b78b8:	b11e      	cbz	r6, b78c2 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b78ba:	4628      	mov	r0, r5
   b78bc:	f7ff ffb5 	bl	b782a <_ZN5Print7printlnEv>
   b78c0:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b78c2:	4620      	mov	r0, r4
   b78c4:	3718      	adds	r7, #24
   b78c6:	46bd      	mov	sp, r7
   b78c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b78cc:	f100 0308 	add.w	r3, r0, #8
   b78d0:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b78d4:	46e8      	mov	r8, sp
        char bigger[n+1];
   b78d6:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b78da:	4622      	mov	r2, r4
   b78dc:	1c41      	adds	r1, r0, #1
   b78de:	683b      	ldr	r3, [r7, #0]
   b78e0:	4668      	mov	r0, sp
   b78e2:	f7ff fd57 	bl	b7394 <vsnprintf>
  return write(str);
   b78e6:	4669      	mov	r1, sp
   b78e8:	4628      	mov	r0, r5
   b78ea:	f7ff ff85 	bl	b77f8 <_ZN5Print5writeEPKc>
   b78ee:	4604      	mov	r4, r0
   b78f0:	46c5      	mov	sp, r8
   b78f2:	e7e1      	b.n	b78b8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b78f4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b78f4:	4b01      	ldr	r3, [pc, #4]	; (b78fc <_GLOBAL__sub_I_RGB+0x8>)
   b78f6:	2200      	movs	r2, #0
   b78f8:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b78fa:	4770      	bx	lr
   b78fc:	2003e6e0 	.word	0x2003e6e0

000b7900 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7900:	2100      	movs	r1, #0
   b7902:	f7ff bc03 	b.w	b710c <hal_spi_release>

000b7906 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7906:	2100      	movs	r1, #0
   b7908:	f7ff bbf8 	b.w	b70fc <hal_spi_acquire>

000b790c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b790c:	b510      	push	{r4, lr}
   b790e:	4604      	mov	r4, r0
   b7910:	4608      	mov	r0, r1
{
    _spi = spi;
   b7912:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7914:	f7ff fbd2 	bl	b70bc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7918:	2300      	movs	r3, #0
   b791a:	6063      	str	r3, [r4, #4]
}
   b791c:	4620      	mov	r0, r4
   b791e:	bd10      	pop	{r4, pc}

000b7920 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7920:	b513      	push	{r0, r1, r4, lr}
   b7922:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7924:	7800      	ldrb	r0, [r0, #0]
   b7926:	f7ff ffee 	bl	b7906 <_ZN8SPIClass4lockEv.isra.0>
   b792a:	b958      	cbnz	r0, b7944 <_ZN8SPIClass5beginEv+0x24>
   b792c:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b792e:	9001      	str	r0, [sp, #4]
   b7930:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7934:	f7ff fbb2 	bl	b709c <hal_spi_begin>
        unlock();
   b7938:	9801      	ldr	r0, [sp, #4]
    }
}
   b793a:	b002      	add	sp, #8
   b793c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7940:	f7ff bfde 	b.w	b7900 <_ZN8SPIClass6unlockEv.isra.0>
   b7944:	b002      	add	sp, #8
   b7946:	bd10      	pop	{r4, pc}

000b7948 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7948:	7800      	ldrb	r0, [r0, #0]
   b794a:	f7ff bfd9 	b.w	b7900 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7950 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7950:	0840      	lsrs	r0, r0, #1
{
   b7952:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7954:	6018      	str	r0, [r3, #0]
   b7956:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7958:	6818      	ldr	r0, [r3, #0]
   b795a:	4288      	cmp	r0, r1
   b795c:	b2e5      	uxtb	r5, r4
   b795e:	d906      	bls.n	b796e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7960:	3401      	adds	r4, #1
   b7962:	2c08      	cmp	r4, #8
   b7964:	d002      	beq.n	b796c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7966:	0840      	lsrs	r0, r0, #1
   b7968:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b796a:	e7f5      	b.n	b7958 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b796c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b796e:	4b02      	ldr	r3, [pc, #8]	; (b7978 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7970:	5d5b      	ldrb	r3, [r3, r5]
   b7972:	7013      	strb	r3, [r2, #0]
}
   b7974:	bd30      	pop	{r4, r5, pc}
   b7976:	bf00      	nop
   b7978:	000b9f00 	.word	0x000b9f00

000b797c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b797c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7980:	4606      	mov	r6, r0
   b7982:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7984:	7800      	ldrb	r0, [r0, #0]
{
   b7986:	460c      	mov	r4, r1
    CHECK(lock());
   b7988:	f7ff ffbd 	bl	b7906 <_ZN8SPIClass4lockEv.isra.0>
   b798c:	2800      	cmp	r0, #0
   b798e:	db1b      	blt.n	b79c8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7990:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7992:	2214      	movs	r2, #20
   b7994:	2100      	movs	r1, #0
   b7996:	a809      	add	r0, sp, #36	; 0x24
   b7998:	f001 f8d0 	bl	b8b3c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b799c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b799e:	2200      	movs	r2, #0
   b79a0:	a909      	add	r1, sp, #36	; 0x24
   b79a2:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b79a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b79a8:	f7ff fb98 	bl	b70dc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b79ac:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b79b0:	b113      	cbz	r3, b79b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b79b2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b79b6:	b155      	cbz	r5, b79ce <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b79b8:	2700      	movs	r7, #0
   b79ba:	46b9      	mov	r9, r7
   b79bc:	46b8      	mov	r8, r7
   b79be:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b79c0:	7923      	ldrb	r3, [r4, #4]
   b79c2:	b15d      	cbz	r5, b79dc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b79c4:	b1c3      	cbz	r3, b79f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b79c6:	2000      	movs	r0, #0
}
   b79c8:	b00f      	add	sp, #60	; 0x3c
   b79ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b79ce:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b79d2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b79d6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b79da:	e7f1      	b.n	b79c0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b79dc:	2b00      	cmp	r3, #0
   b79de:	d135      	bne.n	b7a4c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b79e0:	68a3      	ldr	r3, [r4, #8]
   b79e2:	4543      	cmp	r3, r8
   b79e4:	d108      	bne.n	b79f8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b79e6:	f88d 9020 	strb.w	r9, [sp, #32]
   b79ea:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b79ee:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b79f2:	89a3      	ldrh	r3, [r4, #12]
   b79f4:	429a      	cmp	r2, r3
   b79f6:	d0e6      	beq.n	b79c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b79f8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b79fa:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b79fc:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7a00:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7a02:	ab04      	add	r3, sp, #16
   b7a04:	f10d 020f 	add.w	r2, sp, #15
   b7a08:	f7ff ffa2 	bl	b7950 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7a0c:	7921      	ldrb	r1, [r4, #4]
   b7a0e:	b985      	cbnz	r5, b7a32 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7a10:	b989      	cbnz	r1, b7a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7a12:	68a3      	ldr	r3, [r4, #8]
   b7a14:	4543      	cmp	r3, r8
   b7a16:	d30e      	bcc.n	b7a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7a18:	f88d 9020 	strb.w	r9, [sp, #32]
   b7a1c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7a20:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7a24:	89a3      	ldrh	r3, [r4, #12]
   b7a26:	429a      	cmp	r2, r3
   b7a28:	d105      	bne.n	b7a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7a2a:	9b04      	ldr	r3, [sp, #16]
   b7a2c:	4543      	cmp	r3, r8
   b7a2e:	d102      	bne.n	b7a36 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7a30:	e7c9      	b.n	b79c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7a32:	2900      	cmp	r1, #0
   b7a34:	d1f9      	bne.n	b7a2a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7a36:	2300      	movs	r3, #0
   b7a38:	9301      	str	r3, [sp, #4]
   b7a3a:	7b63      	ldrb	r3, [r4, #13]
   b7a3c:	9300      	str	r3, [sp, #0]
   b7a3e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7a42:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7a44:	7830      	ldrb	r0, [r6, #0]
   b7a46:	f7ff fb51 	bl	b70ec <hal_spi_set_settings>
   b7a4a:	e7bc      	b.n	b79c6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7a4c:	e9cd 5500 	strd	r5, r5, [sp]
   b7a50:	462b      	mov	r3, r5
   b7a52:	462a      	mov	r2, r5
   b7a54:	2101      	movs	r1, #1
   b7a56:	e7f5      	b.n	b7a44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7a58 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7a58:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7a5a:	7800      	ldrb	r0, [r0, #0]
   b7a5c:	f7ff fb26 	bl	b70ac <hal_spi_transfer>
}
   b7a60:	b2c0      	uxtb	r0, r0
   b7a62:	bd08      	pop	{r3, pc}

000b7a64 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7a64:	b510      	push	{r4, lr}
   b7a66:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7a68:	f7ff fa10 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7a6c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7a6e:	6823      	ldr	r3, [r4, #0]
   b7a70:	4620      	mov	r0, r4
   b7a72:	695b      	ldr	r3, [r3, #20]
   b7a74:	4798      	blx	r3
    if (c >= 0) return c;
   b7a76:	2800      	cmp	r0, #0
   b7a78:	da08      	bge.n	b7a8c <_ZN6Stream9timedReadEv+0x28>
   b7a7a:	f7ff fa07 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7a7e:	68e3      	ldr	r3, [r4, #12]
   b7a80:	1ac0      	subs	r0, r0, r3
   b7a82:	68a3      	ldr	r3, [r4, #8]
   b7a84:	4298      	cmp	r0, r3
   b7a86:	d3f2      	bcc.n	b7a6e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7a88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7a8c:	bd10      	pop	{r4, pc}

000b7a8e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a92:	4607      	mov	r7, r0
   b7a94:	460c      	mov	r4, r1
   b7a96:	188e      	adds	r6, r1, r2
   b7a98:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b7a9a:	42b5      	cmp	r5, r6
   b7a9c:	eba5 0804 	sub.w	r8, r5, r4
   b7aa0:	d007      	beq.n	b7ab2 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b7aa2:	4638      	mov	r0, r7
   b7aa4:	f7ff ffde 	bl	b7a64 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7aa8:	1e03      	subs	r3, r0, #0
   b7aaa:	db02      	blt.n	b7ab2 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7aac:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7ab0:	e7f3      	b.n	b7a9a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7ab2:	4640      	mov	r0, r8
   b7ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7ab8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b7ab8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7abc:	ec57 6b10 	vmov	r6, r7, d0
   b7ac0:	4680      	mov	r8, r0
   b7ac2:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b7ac4:	ee10 0a10 	vmov	r0, s0
   b7ac8:	2200      	movs	r2, #0
   b7aca:	2300      	movs	r3, #0
   b7acc:	4639      	mov	r1, r7
   b7ace:	f7fc fed5 	bl	b487c <__aeabi_dcmplt>
   b7ad2:	b128      	cbz	r0, b7ae0 <_Z4dtoadhPc+0x28>
        val = -val;
   b7ad4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7ad8:	461f      	mov	r7, r3
        *sout++ = '-';
   b7ada:	232d      	movs	r3, #45	; 0x2d
   b7adc:	f804 3b01 	strb.w	r3, [r4], #1
   b7ae0:	2300      	movs	r3, #0
    }
    long scale = 1;
   b7ae2:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b7ae6:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b7ae8:	b2d9      	uxtb	r1, r3
   b7aea:	4588      	cmp	r8, r1
   b7aec:	d903      	bls.n	b7af6 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b7aee:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b7af2:	3301      	adds	r3, #1
   b7af4:	e7f8      	b.n	b7ae8 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b7af6:	4648      	mov	r0, r9
   b7af8:	f7fc fbe4 	bl	b42c4 <__aeabi_i2d>
   b7afc:	4632      	mov	r2, r6
   b7afe:	463b      	mov	r3, r7
   b7b00:	f7fc fc4a 	bl	b4398 <__aeabi_dmul>
   b7b04:	4606      	mov	r6, r0
   b7b06:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b7b08:	f7fc ff18 	bl	b493c <__aeabi_d2ulz>
   b7b0c:	468a      	mov	sl, r1
   b7b0e:	4605      	mov	r5, r0
   b7b10:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b7b12:	f7fc fc0b 	bl	b432c <__aeabi_ul2d>
   b7b16:	4602      	mov	r2, r0
   b7b18:	460b      	mov	r3, r1
   b7b1a:	4630      	mov	r0, r6
   b7b1c:	4639      	mov	r1, r7
   b7b1e:	f7fc fa83 	bl	b4028 <__aeabi_dsub>
   b7b22:	4b14      	ldr	r3, [pc, #80]	; (b7b74 <_Z4dtoadhPc+0xbc>)
   b7b24:	2200      	movs	r2, #0
   b7b26:	f7fc febd 	bl	b48a4 <__aeabi_dcmpge>
   b7b2a:	b110      	cbz	r0, b7b32 <_Z4dtoadhPc+0x7a>
        fixed++;
   b7b2c:	3501      	adds	r5, #1
   b7b2e:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b7b32:	464a      	mov	r2, r9
   b7b34:	4628      	mov	r0, r5
   b7b36:	17d3      	asrs	r3, r2, #31
   b7b38:	4659      	mov	r1, fp
   b7b3a:	f7fc fee7 	bl	b490c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b7b3e:	2301      	movs	r3, #1
   b7b40:	4615      	mov	r5, r2
   b7b42:	4621      	mov	r1, r4
   b7b44:	220a      	movs	r2, #10
   b7b46:	f000 fcca 	bl	b84de <ultoa>
    if (prec) {
   b7b4a:	f1b8 0f00 	cmp.w	r8, #0
   b7b4e:	d00e      	beq.n	b7b6e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b7b50:	4620      	mov	r0, r4
   b7b52:	f7fd f885 	bl	b4c60 <strlen>
        *sout++ = '.';
   b7b56:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b7b58:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b7b5a:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b7b5c:	220a      	movs	r2, #10
   b7b5e:	4643      	mov	r3, r8
   b7b60:	3101      	adds	r1, #1
   b7b62:	4628      	mov	r0, r5
    }
}
   b7b64:	b001      	add	sp, #4
   b7b66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b7b6a:	f000 bcb8 	b.w	b84de <ultoa>
}
   b7b6e:	b001      	add	sp, #4
   b7b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b74:	3fe00000 	.word	0x3fe00000

000b7b78 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7b78:	b510      	push	{r4, lr}
   b7b7a:	4604      	mov	r4, r0
{
	free(buffer);
   b7b7c:	6800      	ldr	r0, [r0, #0]
   b7b7e:	f7ff fbf1 	bl	b7364 <free>
}
   b7b82:	4620      	mov	r0, r4
   b7b84:	bd10      	pop	{r4, pc}

000b7b86 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7b86:	b510      	push	{r4, lr}
   b7b88:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7b8a:	6800      	ldr	r0, [r0, #0]
   b7b8c:	b108      	cbz	r0, b7b92 <_ZN6String10invalidateEv+0xc>
   b7b8e:	f7ff fbe9 	bl	b7364 <free>
	buffer = NULL;
   b7b92:	2300      	movs	r3, #0
	capacity = len = 0;
   b7b94:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7b98:	6023      	str	r3, [r4, #0]
}
   b7b9a:	bd10      	pop	{r4, pc}

000b7b9c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7b9c:	b538      	push	{r3, r4, r5, lr}
   b7b9e:	4604      	mov	r4, r0
   b7ba0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7ba2:	6800      	ldr	r0, [r0, #0]
   b7ba4:	3101      	adds	r1, #1
   b7ba6:	f7ff fbe5 	bl	b7374 <realloc>
	if (newbuffer) {
   b7baa:	b110      	cbz	r0, b7bb2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7bac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7bb0:	2001      	movs	r0, #1
	}
	return 0;
}
   b7bb2:	bd38      	pop	{r3, r4, r5, pc}

000b7bb4 <_ZN6String7reserveEj>:
{
   b7bb4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7bb6:	6803      	ldr	r3, [r0, #0]
{
   b7bb8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7bba:	b123      	cbz	r3, b7bc6 <_ZN6String7reserveEj+0x12>
   b7bbc:	6843      	ldr	r3, [r0, #4]
   b7bbe:	428b      	cmp	r3, r1
   b7bc0:	d301      	bcc.n	b7bc6 <_ZN6String7reserveEj+0x12>
   b7bc2:	2001      	movs	r0, #1
}
   b7bc4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7bc6:	4620      	mov	r0, r4
   b7bc8:	f7ff ffe8 	bl	b7b9c <_ZN6String12changeBufferEj>
   b7bcc:	2800      	cmp	r0, #0
   b7bce:	d0f9      	beq.n	b7bc4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7bd0:	68a3      	ldr	r3, [r4, #8]
   b7bd2:	2b00      	cmp	r3, #0
   b7bd4:	d1f5      	bne.n	b7bc2 <_ZN6String7reserveEj+0xe>
   b7bd6:	6822      	ldr	r2, [r4, #0]
   b7bd8:	7013      	strb	r3, [r2, #0]
   b7bda:	e7f2      	b.n	b7bc2 <_ZN6String7reserveEj+0xe>

000b7bdc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7bdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7bde:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7be0:	4611      	mov	r1, r2
   b7be2:	9201      	str	r2, [sp, #4]
{
   b7be4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7be6:	f7ff ffe5 	bl	b7bb4 <_ZN6String7reserveEj>
   b7bea:	9a01      	ldr	r2, [sp, #4]
   b7bec:	b928      	cbnz	r0, b7bfa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7bee:	4620      	mov	r0, r4
   b7bf0:	f7ff ffc9 	bl	b7b86 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7bf4:	4620      	mov	r0, r4
   b7bf6:	b003      	add	sp, #12
   b7bf8:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7bfa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7bfc:	4629      	mov	r1, r5
   b7bfe:	6820      	ldr	r0, [r4, #0]
   b7c00:	f000 ff8e 	bl	b8b20 <memcpy>
	buffer[len] = 0;
   b7c04:	6822      	ldr	r2, [r4, #0]
   b7c06:	68a3      	ldr	r3, [r4, #8]
   b7c08:	2100      	movs	r1, #0
   b7c0a:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7c0c:	e7f2      	b.n	b7bf4 <_ZN6String4copyEPKcj+0x18>

000b7c0e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7c0e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7c10:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7c12:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7c16:	4604      	mov	r4, r0
	len = 0;
   b7c18:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7c1a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7c1c:	b141      	cbz	r1, b7c30 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7c1e:	4608      	mov	r0, r1
   b7c20:	9101      	str	r1, [sp, #4]
   b7c22:	f7fd f81d 	bl	b4c60 <strlen>
   b7c26:	9901      	ldr	r1, [sp, #4]
   b7c28:	4602      	mov	r2, r0
   b7c2a:	4620      	mov	r0, r4
   b7c2c:	f7ff ffd6 	bl	b7bdc <_ZN6String4copyEPKcj>
}
   b7c30:	4620      	mov	r0, r4
   b7c32:	b002      	add	sp, #8
   b7c34:	bd10      	pop	{r4, pc}

000b7c36 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7c36:	b513      	push	{r0, r1, r4, lr}
   b7c38:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7c3a:	b159      	cbz	r1, b7c54 <_ZN6StringaSEPKc+0x1e>
   b7c3c:	4608      	mov	r0, r1
   b7c3e:	9101      	str	r1, [sp, #4]
   b7c40:	f7fd f80e 	bl	b4c60 <strlen>
   b7c44:	9901      	ldr	r1, [sp, #4]
   b7c46:	4602      	mov	r2, r0
   b7c48:	4620      	mov	r0, r4
   b7c4a:	f7ff ffc7 	bl	b7bdc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7c4e:	4620      	mov	r0, r4
   b7c50:	b002      	add	sp, #8
   b7c52:	bd10      	pop	{r4, pc}
	else invalidate();
   b7c54:	f7ff ff97 	bl	b7b86 <_ZN6String10invalidateEv>
   b7c58:	e7f9      	b.n	b7c4e <_ZN6StringaSEPKc+0x18>

000b7c5a <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   b7c5a:	b510      	push	{r4, lr}
   b7c5c:	4604      	mov	r4, r0
   b7c5e:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7c60:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   b7c62:	4608      	mov	r0, r1
	capacity = 0;
   b7c64:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7c68:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7c6a:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   b7c6c:	a901      	add	r1, sp, #4
   b7c6e:	b2c0      	uxtb	r0, r0
   b7c70:	f7ff ff22 	bl	b7ab8 <_Z4dtoadhPc>
        *this = buf;
   b7c74:	a901      	add	r1, sp, #4
   b7c76:	4620      	mov	r0, r4
   b7c78:	f7ff ffdd 	bl	b7c36 <_ZN6StringaSEPKc>
}
   b7c7c:	4620      	mov	r0, r4
   b7c7e:	b00a      	add	sp, #40	; 0x28
   b7c80:	bd10      	pop	{r4, pc}
	...

000b7c84 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7c84:	4b05      	ldr	r3, [pc, #20]	; (b7c9c <_GLOBAL__sub_I_System+0x18>)
   b7c86:	2202      	movs	r2, #2
   b7c88:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7c8a:	4b05      	ldr	r3, [pc, #20]	; (b7ca0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7c8c:	4a05      	ldr	r2, [pc, #20]	; (b7ca4 <_GLOBAL__sub_I_System+0x20>)
   b7c8e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7c90:	2000      	movs	r0, #0
   b7c92:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7c96:	f7ff bac1 	b.w	b721c <set_system_mode>
   b7c9a:	bf00      	nop
   b7c9c:	2003e6fc 	.word	0x2003e6fc
   b7ca0:	2003e6f0 	.word	0x2003e6f0
   b7ca4:	ffff0000 	.word	0xffff0000

000b7ca8 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7ca8:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7caa:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7cac:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7cb0:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7cb2:	2201      	movs	r2, #1
   b7cb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7cb8:	f10d 0107 	add.w	r1, sp, #7
   b7cbc:	47a0      	blx	r4
}
   b7cbe:	b002      	add	sp, #8
   b7cc0:	bd10      	pop	{r4, pc}

000b7cc2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7cc2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7cc4:	6803      	ldr	r3, [r0, #0]
   b7cc6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7ccc:	46a4      	mov	ip, r4
}
   b7cce:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7cd2:	4760      	bx	ip

000b7cd4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7cd4:	b513      	push	{r0, r1, r4, lr}
   b7cd6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7cd8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7cda:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7cde:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7ce0:	f10d 0107 	add.w	r1, sp, #7
   b7ce4:	2201      	movs	r2, #1
   b7ce6:	47a0      	blx	r4
}
   b7ce8:	b002      	add	sp, #8
   b7cea:	bd10      	pop	{r4, pc}

000b7cec <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7cec:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7cee:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7cf0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7cf4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7cf8:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7cfa:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7cfc:	d008      	beq.n	b7d10 <_ZN9TCPClient4readEv+0x24>
   b7cfe:	6963      	ldr	r3, [r4, #20]
   b7d00:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7d04:	1c51      	adds	r1, r2, #1
   b7d06:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7d0a:	4413      	add	r3, r2
   b7d0c:	7918      	ldrb	r0, [r3, #4]
}
   b7d0e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7d10:	6803      	ldr	r3, [r0, #0]
   b7d12:	691b      	ldr	r3, [r3, #16]
   b7d14:	4798      	blx	r3
   b7d16:	2800      	cmp	r0, #0
   b7d18:	d1f1      	bne.n	b7cfe <_ZN9TCPClient4readEv+0x12>
   b7d1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7d1e:	e7f6      	b.n	b7d0e <_ZN9TCPClient4readEv+0x22>

000b7d20 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7d20:	4770      	bx	lr

000b7d22 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7d22:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7d24:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7d26:	43c0      	mvns	r0, r0
   b7d28:	0fc0      	lsrs	r0, r0, #31
   b7d2a:	4770      	bx	lr

000b7d2c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7d2c:	4770      	bx	lr
	...

000b7d30 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7d30:	4b06      	ldr	r3, [pc, #24]	; (b7d4c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7d32:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7d34:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7d36:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7d3a:	d005      	beq.n	b7d48 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7d3c:	4608      	mov	r0, r1
   b7d3e:	f000 fdcf 	bl	b88e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7d42:	2800      	cmp	r0, #0
   b7d44:	bf08      	it	eq
   b7d46:	2400      	moveq	r4, #0
      }
   b7d48:	4620      	mov	r0, r4
   b7d4a:	bd10      	pop	{r4, pc}
   b7d4c:	000b9e40 	.word	0x000b9e40

000b7d50 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7d50:	b510      	push	{r4, lr}
   b7d52:	21ac      	movs	r1, #172	; 0xac
   b7d54:	4604      	mov	r4, r0
   b7d56:	f7fc ffca 	bl	b4cee <_ZdlPvj>
   b7d5a:	4620      	mov	r0, r4
   b7d5c:	bd10      	pop	{r4, pc}

000b7d5e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7d5e:	21ac      	movs	r1, #172	; 0xac
   b7d60:	f7fc bfc5 	b.w	b4cee <_ZdlPvj>

000b7d64 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7d68:	f04f 0800 	mov.w	r8, #0
   b7d6c:	b086      	sub	sp, #24
   b7d6e:	461c      	mov	r4, r3
   b7d70:	f8c0 8004 	str.w	r8, [r0, #4]
   b7d74:	4605      	mov	r5, r0
   b7d76:	460e      	mov	r6, r1
   b7d78:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7d7a:	4641      	mov	r1, r8
   b7d7c:	2210      	movs	r2, #16
   b7d7e:	a802      	add	r0, sp, #8
   b7d80:	f000 fedc 	bl	b8b3c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7d84:	1c63      	adds	r3, r4, #1
   b7d86:	d009      	beq.n	b7d9c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7d88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d8c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7d90:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7d94:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7d98:	435c      	muls	r4, r3
   b7d9a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7d9c:	6968      	ldr	r0, [r5, #20]
   b7d9e:	2310      	movs	r3, #16
   b7da0:	9300      	str	r3, [sp, #0]
   b7da2:	6800      	ldr	r0, [r0, #0]
   b7da4:	ab02      	add	r3, sp, #8
   b7da6:	f241 0205 	movw	r2, #4101	; 0x1005
   b7daa:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7dae:	f7ff f945 	bl	b703c <sock_setsockopt>
    if (ret < 0) {
   b7db2:	2800      	cmp	r0, #0
   b7db4:	da07      	bge.n	b7dc6 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7db6:	f7ff fafd 	bl	b73b4 <__errno>
   b7dba:	6803      	ldr	r3, [r0, #0]
   b7dbc:	606b      	str	r3, [r5, #4]
        return 0;
   b7dbe:	2000      	movs	r0, #0
}
   b7dc0:	b006      	add	sp, #24
   b7dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7dc6:	6968      	ldr	r0, [r5, #20]
   b7dc8:	2300      	movs	r3, #0
   b7dca:	6800      	ldr	r0, [r0, #0]
   b7dcc:	463a      	mov	r2, r7
   b7dce:	4631      	mov	r1, r6
   b7dd0:	f7ff f954 	bl	b707c <sock_send>
    if (ret < 0) {
   b7dd4:	1e03      	subs	r3, r0, #0
   b7dd6:	dbee      	blt.n	b7db6 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7dd8:	4618      	mov	r0, r3
   b7dda:	e7f1      	b.n	b7dc0 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7ddc <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7ddc:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7dde:	6984      	ldr	r4, [r0, #24]
   b7de0:	4b0a      	ldr	r3, [pc, #40]	; (b7e0c <_ZN9TCPClientD1Ev+0x30>)
   b7de2:	6003      	str	r3, [r0, #0]
   b7de4:	4605      	mov	r5, r0
   b7de6:	b17c      	cbz	r4, b7e08 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7de8:	6863      	ldr	r3, [r4, #4]
   b7dea:	3b01      	subs	r3, #1
   b7dec:	6063      	str	r3, [r4, #4]
   b7dee:	b95b      	cbnz	r3, b7e08 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7df0:	6823      	ldr	r3, [r4, #0]
   b7df2:	4620      	mov	r0, r4
   b7df4:	689b      	ldr	r3, [r3, #8]
   b7df6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7df8:	68a3      	ldr	r3, [r4, #8]
   b7dfa:	3b01      	subs	r3, #1
   b7dfc:	60a3      	str	r3, [r4, #8]
   b7dfe:	b91b      	cbnz	r3, b7e08 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7e00:	6823      	ldr	r3, [r4, #0]
   b7e02:	4620      	mov	r0, r4
   b7e04:	68db      	ldr	r3, [r3, #12]
   b7e06:	4798      	blx	r3
   b7e08:	4628      	mov	r0, r5
   b7e0a:	bd38      	pop	{r3, r4, r5, pc}
   b7e0c:	000b9f44 	.word	0x000b9f44

000b7e10 <_ZN9TCPClientD0Ev>:
   b7e10:	b510      	push	{r4, lr}
   b7e12:	4604      	mov	r4, r0
   b7e14:	f7ff ffe2 	bl	b7ddc <_ZN9TCPClientD1Ev>
   b7e18:	4620      	mov	r0, r4
   b7e1a:	211c      	movs	r1, #28
   b7e1c:	f7fc ff67 	bl	b4cee <_ZdlPvj>
   b7e20:	4620      	mov	r0, r4
   b7e22:	bd10      	pop	{r4, pc}

000b7e24 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7e24:	b530      	push	{r4, r5, lr}
   b7e26:	b087      	sub	sp, #28
   b7e28:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7e2a:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7e2c:	4668      	mov	r0, sp
   b7e2e:	f7ff fc03 	bl	b7638 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7e32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e34:	3404      	adds	r4, #4
   b7e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e38:	682b      	ldr	r3, [r5, #0]
   b7e3a:	7023      	strb	r3, [r4, #0]
    }
   b7e3c:	b007      	add	sp, #28
   b7e3e:	bd30      	pop	{r4, r5, pc}

000b7e40 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7e40:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7e42:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7e44:	4b05      	ldr	r3, [pc, #20]	; (b7e5c <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7e46:	4604      	mov	r4, r0
   b7e48:	358c      	adds	r5, #140	; 0x8c
   b7e4a:	f844 3b04 	str.w	r3, [r4], #4
   b7e4e:	4606      	mov	r6, r0
   b7e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e54:	682b      	ldr	r3, [r5, #0]
   b7e56:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7e58:	4630      	mov	r0, r6
   b7e5a:	bd70      	pop	{r4, r5, r6, pc}
   b7e5c:	000b9eb4 	.word	0x000b9eb4

000b7e60 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e64:	4698      	mov	r8, r3
    stop();
   b7e66:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7e68:	b093      	sub	sp, #76	; 0x4c
   b7e6a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7e6c:	2400      	movs	r4, #0
    stop();
   b7e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7e70:	4606      	mov	r6, r0
   b7e72:	4617      	mov	r7, r2
    stop();
   b7e74:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7e76:	4628      	mov	r0, r5
   b7e78:	466b      	mov	r3, sp
   b7e7a:	4622      	mov	r2, r4
   b7e7c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7e7e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7e80:	f7ff f8d4 	bl	b702c <netdb_getaddrinfo>
   b7e84:	4605      	mov	r5, r0
   b7e86:	2800      	cmp	r0, #0
   b7e88:	d163      	bne.n	b7f52 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7e8a:	9b00      	ldr	r3, [sp, #0]
   b7e8c:	2b00      	cmp	r3, #0
   b7e8e:	d04b      	beq.n	b7f28 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7e90:	695b      	ldr	r3, [r3, #20]
   b7e92:	2b00      	cmp	r3, #0
   b7e94:	d048      	beq.n	b7f28 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7e96:	a806      	add	r0, sp, #24
   b7e98:	f7ff fb8a 	bl	b75b0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7e9c:	9b00      	ldr	r3, [sp, #0]
   b7e9e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7ea0:	7863      	ldrb	r3, [r4, #1]
   b7ea2:	2b02      	cmp	r3, #2
   b7ea4:	d104      	bne.n	b7eb0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7ea6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7ea8:	a806      	add	r0, sp, #24
   b7eaa:	f7ff ffbb 	bl	b7e24 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7eae:	e026      	b.n	b7efe <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7eb0:	2b0a      	cmp	r3, #10
   b7eb2:	d124      	bne.n	b7efe <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7eb4:	2211      	movs	r2, #17
   b7eb6:	4629      	mov	r1, r5
   b7eb8:	a801      	add	r0, sp, #4
   b7eba:	f000 fe3f 	bl	b8b3c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7ebe:	68a3      	ldr	r3, [r4, #8]
   b7ec0:	2b00      	cmp	r3, #0
   b7ec2:	d038      	beq.n	b7f36 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7ec4:	f104 0308 	add.w	r3, r4, #8
   b7ec8:	f10d 0c04 	add.w	ip, sp, #4
   b7ecc:	3418      	adds	r4, #24
   b7ece:	6818      	ldr	r0, [r3, #0]
   b7ed0:	6859      	ldr	r1, [r3, #4]
   b7ed2:	4662      	mov	r2, ip
   b7ed4:	c203      	stmia	r2!, {r0, r1}
   b7ed6:	3308      	adds	r3, #8
   b7ed8:	42a3      	cmp	r3, r4
   b7eda:	4694      	mov	ip, r2
   b7edc:	d1f7      	bne.n	b7ece <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7ede:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7ee0:	a901      	add	r1, sp, #4
   b7ee2:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7ee4:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7ee8:	f7ff fb70 	bl	b75cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7eec:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7ef0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7ef4:	ac07      	add	r4, sp, #28
   b7ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7ef8:	f8dc 3000 	ldr.w	r3, [ip]
   b7efc:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7efe:	a806      	add	r0, sp, #24
   b7f00:	f7ff fb76 	bl	b75f0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7f04:	b180      	cbz	r0, b7f28 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7f06:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7f08:	ad07      	add	r5, sp, #28
   b7f0a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7f0e:	4b12      	ldr	r3, [pc, #72]	; (b7f58 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7f10:	930c      	str	r3, [sp, #48]	; 0x30
   b7f12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7f14:	ac0d      	add	r4, sp, #52	; 0x34
   b7f16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7f18:	682b      	ldr	r3, [r5, #0]
   b7f1a:	7023      	strb	r3, [r4, #0]
   b7f1c:	463a      	mov	r2, r7
   b7f1e:	4643      	mov	r3, r8
   b7f20:	a90c      	add	r1, sp, #48	; 0x30
   b7f22:	4630      	mov	r0, r6
   b7f24:	47c8      	blx	r9
   b7f26:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7f28:	9800      	ldr	r0, [sp, #0]
   b7f2a:	f7ff f877 	bl	b701c <netdb_freeaddrinfo>
}
   b7f2e:	4628      	mov	r0, r5
   b7f30:	b013      	add	sp, #76	; 0x4c
   b7f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7f36:	68e3      	ldr	r3, [r4, #12]
   b7f38:	2b00      	cmp	r3, #0
   b7f3a:	d1c3      	bne.n	b7ec4 <_ZN9TCPClient7connectEPKctm+0x64>
   b7f3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7f40:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7f44:	f7ff f852 	bl	b6fec <inet_htonl>
   b7f48:	4581      	cmp	r9, r0
   b7f4a:	d1bb      	bne.n	b7ec4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7f4c:	f104 0114 	add.w	r1, r4, #20
   b7f50:	e7aa      	b.n	b7ea8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7f52:	4625      	mov	r5, r4
   b7f54:	e7e8      	b.n	b7f28 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7f56:	bf00      	nop
   b7f58:	000b9eb4 	.word	0x000b9eb4

000b7f5c <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7f5c:	b538      	push	{r3, r4, r5, lr}
   b7f5e:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7f60:	681a      	ldr	r2, [r3, #0]
   b7f62:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7f64:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7f66:	da10      	bge.n	b7f8a <_ZN9TCPClient9connectedEv+0x2e>
   b7f68:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f6c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7f70:	429a      	cmp	r2, r3
   b7f72:	d10a      	bne.n	b7f8a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7f74:	6803      	ldr	r3, [r0, #0]
   b7f76:	691b      	ldr	r3, [r3, #16]
   b7f78:	4798      	blx	r3
        if (!rv) {
   b7f7a:	4604      	mov	r4, r0
   b7f7c:	b928      	cbnz	r0, b7f8a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7f7e:	682b      	ldr	r3, [r5, #0]
   b7f80:	4628      	mov	r0, r5
   b7f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f84:	4798      	blx	r3
        rv = available();
   b7f86:	4620      	mov	r0, r4
}
   b7f88:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7f8a:	2001      	movs	r0, #1
   b7f8c:	e7fc      	b.n	b7f88 <_ZN9TCPClient9connectedEv+0x2c>

000b7f8e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7f8e:	b510      	push	{r4, lr}
   b7f90:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7f92:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f96:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7f9a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7f9c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7f9e:	d005      	beq.n	b7fac <_ZN9TCPClient4peekEv+0x1e>
   b7fa0:	6963      	ldr	r3, [r4, #20]
   b7fa2:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7fa6:	4413      	add	r3, r2
   b7fa8:	7918      	ldrb	r0, [r3, #4]
}
   b7faa:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7fac:	6803      	ldr	r3, [r0, #0]
   b7fae:	691b      	ldr	r3, [r3, #16]
   b7fb0:	4798      	blx	r3
   b7fb2:	2800      	cmp	r0, #0
   b7fb4:	d1f4      	bne.n	b7fa0 <_ZN9TCPClient4peekEv+0x12>
   b7fb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7fba:	e7f6      	b.n	b7faa <_ZN9TCPClient4peekEv+0x1c>

000b7fbc <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7fbe:	6943      	ldr	r3, [r0, #20]
   b7fc0:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7fc2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7fc6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7fca:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7fcc:	4605      	mov	r5, r0
   b7fce:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7fd0:	d016      	beq.n	b8000 <_ZN9TCPClient4readEPhj+0x44>
   b7fd2:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7fd4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7fd8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7fdc:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7fde:	42bc      	cmp	r4, r7
   b7fe0:	bf28      	it	cs
   b7fe2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7fe4:	3304      	adds	r3, #4
   b7fe6:	4622      	mov	r2, r4
   b7fe8:	4419      	add	r1, r3
   b7fea:	4630      	mov	r0, r6
   b7fec:	f000 fd98 	bl	b8b20 <memcpy>
   b7ff0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7ff2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7ff6:	4423      	add	r3, r4
   b7ff8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b8000:	6803      	ldr	r3, [r0, #0]
   b8002:	691b      	ldr	r3, [r3, #16]
   b8004:	4798      	blx	r3
   b8006:	2800      	cmp	r0, #0
   b8008:	d1e3      	bne.n	b7fd2 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b800a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b800e:	e7f5      	b.n	b7ffc <_ZN9TCPClient4readEPhj+0x40>

000b8010 <_ZN9TCPClient12flush_bufferEv>:
   b8010:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b8012:	2300      	movs	r3, #0
   b8014:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b8018:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b801a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b801e:	4770      	bx	lr

000b8020 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8020:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8024:	461f      	mov	r7, r3
    stop();
   b8026:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b8028:	460c      	mov	r4, r1
    stop();
   b802a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b802c:	b08a      	sub	sp, #40	; 0x28
   b802e:	4605      	mov	r5, r0
   b8030:	4616      	mov	r6, r2
    stop();
   b8032:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b8034:	7d23      	ldrb	r3, [r4, #20]
   b8036:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b803a:	2b04      	cmp	r3, #4
   b803c:	bf0c      	ite	eq
   b803e:	2002      	moveq	r0, #2
   b8040:	200a      	movne	r0, #10
   b8042:	2206      	movs	r2, #6
   b8044:	2101      	movs	r1, #1
   b8046:	f7ff f821 	bl	b708c <sock_socket>
   b804a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b804e:	696b      	ldr	r3, [r5, #20]
   b8050:	681b      	ldr	r3, [r3, #0]
   b8052:	2b00      	cmp	r3, #0
   b8054:	da08      	bge.n	b8068 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b8056:	682b      	ldr	r3, [r5, #0]
   b8058:	4628      	mov	r0, r5
   b805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b805c:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b805e:	4798      	blx	r3
}
   b8060:	4620      	mov	r0, r4
   b8062:	b00a      	add	sp, #40	; 0x28
   b8064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8068:	4628      	mov	r0, r5
   b806a:	f7ff ffd1 	bl	b8010 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b806e:	b1b7      	cbz	r7, b809e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8070:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8072:	a903      	add	r1, sp, #12
   b8074:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8076:	9303      	str	r3, [sp, #12]
   b8078:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b807c:	f7fe ffa6 	bl	b6fcc <if_index_to_name>
   b8080:	2800      	cmp	r0, #0
   b8082:	d1e8      	bne.n	b8056 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8084:	6968      	ldr	r0, [r5, #20]
   b8086:	2306      	movs	r3, #6
   b8088:	9300      	str	r3, [sp, #0]
   b808a:	6800      	ldr	r0, [r0, #0]
   b808c:	ab03      	add	r3, sp, #12
   b808e:	f241 020b 	movw	r2, #4107	; 0x100b
   b8092:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8096:	f7fe ffd1 	bl	b703c <sock_setsockopt>
   b809a:	2800      	cmp	r0, #0
   b809c:	d1db      	bne.n	b8056 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b809e:	221c      	movs	r2, #28
   b80a0:	2100      	movs	r1, #0
   b80a2:	a803      	add	r0, sp, #12
   b80a4:	f000 fd4a 	bl	b8b3c <memset>
    if (ip.version() == 4) {
   b80a8:	7d23      	ldrb	r3, [r4, #20]
   b80aa:	2b04      	cmp	r3, #4
   b80ac:	d11d      	bne.n	b80ea <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b80ae:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b80b2:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b80b4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b80b8:	f7fe ffa8 	bl	b700c <inet_htons>
   b80bc:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b80c0:	6860      	ldr	r0, [r4, #4]
   b80c2:	f7fe ff93 	bl	b6fec <inet_htonl>
   b80c6:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b80c8:	696b      	ldr	r3, [r5, #20]
   b80ca:	221c      	movs	r2, #28
   b80cc:	6818      	ldr	r0, [r3, #0]
   b80ce:	a903      	add	r1, sp, #12
   b80d0:	f7fe ffc4 	bl	b705c <sock_connect>
   b80d4:	2800      	cmp	r0, #0
   b80d6:	d1be      	bne.n	b8056 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b80d8:	3404      	adds	r4, #4
   b80da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b80dc:	696d      	ldr	r5, [r5, #20]
   b80de:	358c      	adds	r5, #140	; 0x8c
   b80e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b80e2:	6823      	ldr	r3, [r4, #0]
   b80e4:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b80e6:	2401      	movs	r4, #1
   b80e8:	e7ba      	b.n	b8060 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b80ea:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b80ee:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b80f0:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b80f4:	f7fe ff8a 	bl	b700c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b80f8:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b80fa:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b80fe:	1d23      	adds	r3, r4, #4
   b8100:	f104 0714 	add.w	r7, r4, #20
   b8104:	6818      	ldr	r0, [r3, #0]
   b8106:	6859      	ldr	r1, [r3, #4]
   b8108:	4632      	mov	r2, r6
   b810a:	c203      	stmia	r2!, {r0, r1}
   b810c:	3308      	adds	r3, #8
   b810e:	42bb      	cmp	r3, r7
   b8110:	4616      	mov	r6, r2
   b8112:	d1f7      	bne.n	b8104 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b8114:	e7d8      	b.n	b80c8 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b8118 <_ZN9TCPClient9availableEv>:
{
   b8118:	b530      	push	{r4, r5, lr}
   b811a:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b811c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b8120:	b08b      	sub	sp, #44	; 0x2c
   b8122:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b8124:	b12b      	cbz	r3, b8132 <_ZN9TCPClient9availableEv+0x1a>
   b8126:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b812a:	429a      	cmp	r2, r3
   b812c:	d101      	bne.n	b8132 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b812e:	f7ff ff6f 	bl	b8010 <_ZN9TCPClient12flush_bufferEv>
   b8132:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b8134:	6808      	ldr	r0, [r1, #0]
   b8136:	2800      	cmp	r0, #0
   b8138:	db18      	blt.n	b816c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b813a:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b813e:	2d7f      	cmp	r5, #127	; 0x7f
   b8140:	d814      	bhi.n	b816c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b8142:	3104      	adds	r1, #4
   b8144:	2308      	movs	r3, #8
   b8146:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b814a:	4429      	add	r1, r5
   b814c:	f7fe ff8e 	bl	b706c <sock_recv>
            if (ret > 0) {
   b8150:	2800      	cmp	r0, #0
   b8152:	dd13      	ble.n	b817c <_ZN9TCPClient9availableEv+0x64>
   b8154:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b8156:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b815a:	b90a      	cbnz	r2, b8160 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b815c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8160:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8162:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8166:	4410      	add	r0, r2
   b8168:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b816c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b816e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8172:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8176:	1ac0      	subs	r0, r0, r3
   b8178:	b00b      	add	sp, #44	; 0x2c
   b817a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b817c:	f7ff f91a 	bl	b73b4 <__errno>
   b8180:	6803      	ldr	r3, [r0, #0]
   b8182:	2b0b      	cmp	r3, #11
   b8184:	d0f2      	beq.n	b816c <_ZN9TCPClient9availableEv+0x54>
   b8186:	f7ff f915 	bl	b73b4 <__errno>
   b818a:	6803      	ldr	r3, [r0, #0]
   b818c:	2b0b      	cmp	r3, #11
   b818e:	d0ed      	beq.n	b816c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8190:	2320      	movs	r3, #32
   b8192:	2500      	movs	r5, #0
   b8194:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8198:	f7ff f90c 	bl	b73b4 <__errno>
   b819c:	6803      	ldr	r3, [r0, #0]
   b819e:	9301      	str	r3, [sp, #4]
   b81a0:	4b08      	ldr	r3, [pc, #32]	; (b81c4 <_ZN9TCPClient9availableEv+0xac>)
   b81a2:	4909      	ldr	r1, [pc, #36]	; (b81c8 <_ZN9TCPClient9availableEv+0xb0>)
   b81a4:	9300      	str	r3, [sp, #0]
   b81a6:	aa02      	add	r2, sp, #8
   b81a8:	462b      	mov	r3, r5
   b81aa:	2032      	movs	r0, #50	; 0x32
   b81ac:	f7ff f82e 	bl	b720c <log_message>
                    sock_close(d_->sock);
   b81b0:	6963      	ldr	r3, [r4, #20]
   b81b2:	6818      	ldr	r0, [r3, #0]
   b81b4:	f7fe ff4a 	bl	b704c <sock_close>
   b81b8:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b81ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b81be:	601a      	str	r2, [r3, #0]
   b81c0:	e7d4      	b.n	b816c <_ZN9TCPClient9availableEv+0x54>
   b81c2:	bf00      	nop
   b81c4:	000b9f0f 	.word	0x000b9f0f
   b81c8:	000b9f08 	.word	0x000b9f08

000b81cc <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b81cc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b81ce:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b81d0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b81d2:	6818      	ldr	r0, [r3, #0]
   b81d4:	2800      	cmp	r0, #0
   b81d6:	db01      	blt.n	b81dc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b81d8:	f7fe ff38 	bl	b704c <sock_close>
   b81dc:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b81de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b81e2:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b81e4:	6960      	ldr	r0, [r4, #20]
   b81e6:	2211      	movs	r2, #17
   b81e8:	2100      	movs	r1, #0
   b81ea:	308c      	adds	r0, #140	; 0x8c
   b81ec:	f000 fca6 	bl	b8b3c <memset>
    flush_buffer();
   b81f0:	4620      	mov	r0, r4
}
   b81f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b81f6:	f7ff bf0b 	b.w	b8010 <_ZN9TCPClient12flush_bufferEv>

000b81fa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b81fa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b81fc:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b81fe:	4604      	mov	r4, r0
          total(0) {
   b8200:	6001      	str	r1, [r0, #0]
   b8202:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b8206:	3088      	adds	r0, #136	; 0x88
   b8208:	f7ff f9d2 	bl	b75b0 <_ZN9IPAddressC1Ev>
}
   b820c:	4620      	mov	r0, r4
   b820e:	bd10      	pop	{r4, pc}

000b8210 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b8210:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b8212:	2300      	movs	r3, #0
   b8214:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b8218:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b821c:	4a0e      	ldr	r2, [pc, #56]	; (b8258 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b821e:	6103      	str	r3, [r0, #16]
   b8220:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b8222:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b8224:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b8226:	20ac      	movs	r0, #172	; 0xac
   b8228:	9101      	str	r1, [sp, #4]
   b822a:	f7fc fd5c 	bl	b4ce6 <_Znwj>
	  auto __pi = ::new (__mem)
   b822e:	1e05      	subs	r5, r0, #0
   b8230:	f105 060c 	add.w	r6, r5, #12
   b8234:	d008      	beq.n	b8248 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b8236:	2301      	movs	r3, #1
   b8238:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b823c:	4b07      	ldr	r3, [pc, #28]	; (b825c <_ZN9TCPClientC1Ei+0x4c>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b823e:	9901      	ldr	r1, [sp, #4]
   b8240:	602b      	str	r3, [r5, #0]
   b8242:	4630      	mov	r0, r6
   b8244:	f7ff ffd9 	bl	b81fa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b8248:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b824a:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b824e:	f7ff fedf 	bl	b8010 <_ZN9TCPClient12flush_bufferEv>
}
   b8252:	b002      	add	sp, #8
   b8254:	bd70      	pop	{r4, r5, r6, pc}
   b8256:	bf00      	nop
   b8258:	000b9f44 	.word	0x000b9f44
   b825c:	000b9f28 	.word	0x000b9f28

000b8260 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8260:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8262:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8266:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8268:	f7ff ffd2 	bl	b8210 <_ZN9TCPClientC1Ei>
}
   b826c:	4620      	mov	r0, r4
   b826e:	bd10      	pop	{r4, pc}

000b8270 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8270:	b510      	push	{r4, lr}
   b8272:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8274:	6800      	ldr	r0, [r0, #0]
   b8276:	2800      	cmp	r0, #0
   b8278:	db01      	blt.n	b827e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b827a:	f7fe fee7 	bl	b704c <sock_close>
    }
}
   b827e:	4620      	mov	r0, r4
   b8280:	bd10      	pop	{r4, pc}

000b8282 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8282:	300c      	adds	r0, #12
   b8284:	f7ff bff4 	b.w	b8270 <_ZN9TCPClient4DataD1Ev>

000b8288 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8288:	4b02      	ldr	r3, [pc, #8]	; (b8294 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b828a:	681a      	ldr	r2, [r3, #0]
   b828c:	4b02      	ldr	r3, [pc, #8]	; (b8298 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b828e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8290:	4770      	bx	lr
   b8292:	bf00      	nop
   b8294:	2003e550 	.word	0x2003e550
   b8298:	2003e700 	.word	0x2003e700

000b829c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b829c:	4770      	bx	lr

000b829e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b829e:	7441      	strb	r1, [r0, #17]
}
   b82a0:	4770      	bx	lr

000b82a2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b82a2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b82a4:	7c00      	ldrb	r0, [r0, #16]
   b82a6:	f7fe ff69 	bl	b717c <hal_usart_available_data_for_write>
}
   b82aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b82ae:	bd08      	pop	{r3, pc}

000b82b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b82b0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b82b2:	7c00      	ldrb	r0, [r0, #16]
   b82b4:	f7fe ff3a 	bl	b712c <hal_usart_available>
}
   b82b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b82bc:	bd08      	pop	{r3, pc}

000b82be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b82be:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b82c0:	7c00      	ldrb	r0, [r0, #16]
   b82c2:	f7fe ff43 	bl	b714c <hal_usart_peek>
}
   b82c6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b82ca:	bd08      	pop	{r3, pc}

000b82cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b82cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b82ce:	7c00      	ldrb	r0, [r0, #16]
   b82d0:	f7fe ff34 	bl	b713c <hal_usart_read>
}
   b82d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b82d8:	bd08      	pop	{r3, pc}

000b82da <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b82da:	7c00      	ldrb	r0, [r0, #16]
   b82dc:	f7fe bf3e 	b.w	b715c <hal_usart_flush>

000b82e0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b82e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b82e2:	7c45      	ldrb	r5, [r0, #17]
{
   b82e4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b82e6:	b12d      	cbz	r5, b82f4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b82e8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b82ea:	b003      	add	sp, #12
   b82ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b82f0:	f7fe bf14 	b.w	b711c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b82f4:	7c00      	ldrb	r0, [r0, #16]
   b82f6:	9101      	str	r1, [sp, #4]
   b82f8:	f7fe ff40 	bl	b717c <hal_usart_available_data_for_write>
   b82fc:	2800      	cmp	r0, #0
   b82fe:	9901      	ldr	r1, [sp, #4]
   b8300:	dcf2      	bgt.n	b82e8 <_ZN11USARTSerial5writeEh+0x8>
}
   b8302:	4628      	mov	r0, r5
   b8304:	b003      	add	sp, #12
   b8306:	bd30      	pop	{r4, r5, pc}

000b8308 <_ZN11USARTSerialD0Ev>:
   b8308:	b510      	push	{r4, lr}
   b830a:	2114      	movs	r1, #20
   b830c:	4604      	mov	r4, r0
   b830e:	f7fc fcee 	bl	b4cee <_ZdlPvj>
   b8312:	4620      	mov	r0, r4
   b8314:	bd10      	pop	{r4, pc}
	...

000b8318 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b8318:	b510      	push	{r4, lr}
   b831a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b831e:	4604      	mov	r4, r0
   b8320:	4608      	mov	r0, r1
   b8322:	4611      	mov	r1, r2
   b8324:	2200      	movs	r2, #0
   b8326:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b832a:	4b04      	ldr	r3, [pc, #16]	; (b833c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b832c:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b832e:	2301      	movs	r3, #1
  _serial = serial;
   b8330:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8332:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b8334:	f7fe ff2a 	bl	b718c <hal_usart_init_ex>
}
   b8338:	4620      	mov	r0, r4
   b833a:	bd10      	pop	{r4, pc}
   b833c:	000b9fac 	.word	0x000b9fac

000b8340 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b8340:	7441      	strb	r1, [r0, #17]
}
   b8342:	4770      	bx	lr

000b8344 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8344:	4770      	bx	lr

000b8346 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b8346:	4770      	bx	lr

000b8348 <_ZN9USBSerial4readEv>:
{
   b8348:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b834a:	2100      	movs	r1, #0
   b834c:	7c00      	ldrb	r0, [r0, #16]
   b834e:	f7fe ff3d 	bl	b71cc <HAL_USB_USART_Receive_Data>
}
   b8352:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8356:	bd08      	pop	{r3, pc}

000b8358 <_ZN9USBSerial4peekEv>:
{
   b8358:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b835a:	2101      	movs	r1, #1
   b835c:	7c00      	ldrb	r0, [r0, #16]
   b835e:	f7fe ff35 	bl	b71cc <HAL_USB_USART_Receive_Data>
}
   b8362:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8366:	bd08      	pop	{r3, pc}

000b8368 <_ZN9USBSerial17availableForWriteEv>:
{
   b8368:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b836a:	7c00      	ldrb	r0, [r0, #16]
   b836c:	f7fe ff26 	bl	b71bc <HAL_USB_USART_Available_Data_For_Write>
}
   b8370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8374:	bd08      	pop	{r3, pc}

000b8376 <_ZN9USBSerial9availableEv>:
{
   b8376:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8378:	7c00      	ldrb	r0, [r0, #16]
   b837a:	f7fe ff17 	bl	b71ac <HAL_USB_USART_Available_Data>
}
   b837e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8382:	bd08      	pop	{r3, pc}

000b8384 <_ZN9USBSerial5writeEh>:
{
   b8384:	b513      	push	{r0, r1, r4, lr}
   b8386:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8388:	7c00      	ldrb	r0, [r0, #16]
{
   b838a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b838c:	f7fe ff16 	bl	b71bc <HAL_USB_USART_Available_Data_For_Write>
   b8390:	2800      	cmp	r0, #0
   b8392:	9901      	ldr	r1, [sp, #4]
   b8394:	dc01      	bgt.n	b839a <_ZN9USBSerial5writeEh+0x16>
   b8396:	7c60      	ldrb	r0, [r4, #17]
   b8398:	b120      	cbz	r0, b83a4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b839a:	7c20      	ldrb	r0, [r4, #16]
   b839c:	f7fe ff1e 	bl	b71dc <HAL_USB_USART_Send_Data>
   b83a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b83a4:	b002      	add	sp, #8
   b83a6:	bd10      	pop	{r4, pc}

000b83a8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b83a8:	7c00      	ldrb	r0, [r0, #16]
   b83aa:	f7fe bf1f 	b.w	b71ec <HAL_USB_USART_Flush_Data>

000b83ae <_ZN9USBSerialD0Ev>:
   b83ae:	b510      	push	{r4, lr}
   b83b0:	2114      	movs	r1, #20
   b83b2:	4604      	mov	r4, r0
   b83b4:	f7fc fc9b 	bl	b4cee <_ZdlPvj>
   b83b8:	4620      	mov	r0, r4
   b83ba:	bd10      	pop	{r4, pc}

000b83bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b83bc:	b510      	push	{r4, lr}
   b83be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b83c2:	4604      	mov	r4, r0
   b83c4:	4608      	mov	r0, r1
   b83c6:	2100      	movs	r1, #0
   b83c8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b83cc:	4b04      	ldr	r3, [pc, #16]	; (b83e0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b83ce:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b83d0:	2301      	movs	r3, #1
  _serial = serial;
   b83d2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b83d4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b83d6:	4611      	mov	r1, r2
   b83d8:	f7fe fee0 	bl	b719c <HAL_USB_USART_Init>
}
   b83dc:	4620      	mov	r0, r4
   b83de:	bd10      	pop	{r4, pc}
   b83e0:	000b9fdc 	.word	0x000b9fdc

000b83e4 <_Z19acquireSerialBufferv>:
{
   b83e4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b83e6:	2214      	movs	r2, #20
{
   b83e8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b83ea:	2100      	movs	r1, #0
   b83ec:	f000 fba6 	bl	b8b3c <memset>
}
   b83f0:	4620      	mov	r0, r4
   b83f2:	bd10      	pop	{r4, pc}

000b83f4 <_Z16_fetch_usbserialv>:
{
   b83f4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b83f6:	4c0f      	ldr	r4, [pc, #60]	; (b8434 <_Z16_fetch_usbserialv+0x40>)
{
   b83f8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b83fa:	a803      	add	r0, sp, #12
   b83fc:	f7ff fff2 	bl	b83e4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8400:	7821      	ldrb	r1, [r4, #0]
   b8402:	f3bf 8f5b 	dmb	ish
   b8406:	f011 0101 	ands.w	r1, r1, #1
   b840a:	d10f      	bne.n	b842c <_Z16_fetch_usbserialv+0x38>
   b840c:	4620      	mov	r0, r4
   b840e:	9101      	str	r1, [sp, #4]
   b8410:	f7fc fc7c 	bl	b4d0c <__cxa_guard_acquire>
   b8414:	9901      	ldr	r1, [sp, #4]
   b8416:	b148      	cbz	r0, b842c <_Z16_fetch_usbserialv+0x38>
   b8418:	aa03      	add	r2, sp, #12
   b841a:	4807      	ldr	r0, [pc, #28]	; (b8438 <_Z16_fetch_usbserialv+0x44>)
   b841c:	f7ff ffce 	bl	b83bc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b8420:	4620      	mov	r0, r4
   b8422:	f7fc fc78 	bl	b4d16 <__cxa_guard_release>
   b8426:	4805      	ldr	r0, [pc, #20]	; (b843c <_Z16_fetch_usbserialv+0x48>)
   b8428:	f000 fb6c 	bl	b8b04 <atexit>
	return _usbserial;
}
   b842c:	4802      	ldr	r0, [pc, #8]	; (b8438 <_Z16_fetch_usbserialv+0x44>)
   b842e:	b008      	add	sp, #32
   b8430:	bd10      	pop	{r4, pc}
   b8432:	bf00      	nop
   b8434:	2003e704 	.word	0x2003e704
   b8438:	2003e708 	.word	0x2003e708
   b843c:	000b8345 	.word	0x000b8345

000b8440 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8440:	2200      	movs	r2, #0
   b8442:	6840      	ldr	r0, [r0, #4]
   b8444:	4611      	mov	r1, r2
   b8446:	f7fe bf3d 	b.w	b72c4 <network_ready>

000b844a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b844a:	2200      	movs	r2, #0
   b844c:	6840      	ldr	r0, [r0, #4]
   b844e:	4611      	mov	r1, r2
   b8450:	f7fe bf58 	b.w	b7304 <network_listening>

000b8454 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8454:	2200      	movs	r2, #0
   b8456:	6840      	ldr	r0, [r0, #4]
   b8458:	4611      	mov	r1, r2
   b845a:	f7fe bf63 	b.w	b7324 <network_get_listen_timeout>

000b845e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b845e:	6840      	ldr	r0, [r0, #4]
   b8460:	2200      	movs	r2, #0
   b8462:	f7fe bf57 	b.w	b7314 <network_set_listen_timeout>

000b8466 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8466:	6840      	ldr	r0, [r0, #4]
   b8468:	2200      	movs	r2, #0
   b846a:	f081 0101 	eor.w	r1, r1, #1
   b846e:	f7fe bf41 	b.w	b72f4 <network_listen>

000b8472 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8472:	2300      	movs	r3, #0
   b8474:	6840      	ldr	r0, [r0, #4]
   b8476:	461a      	mov	r2, r3
   b8478:	4619      	mov	r1, r3
   b847a:	f7fe bf33 	b.w	b72e4 <network_off>

000b847e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b847e:	2300      	movs	r3, #0
   b8480:	6840      	ldr	r0, [r0, #4]
   b8482:	461a      	mov	r2, r3
   b8484:	4619      	mov	r1, r3
   b8486:	f7fe bf25 	b.w	b72d4 <network_on>

000b848a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b848a:	2200      	movs	r2, #0
   b848c:	6840      	ldr	r0, [r0, #4]
   b848e:	4611      	mov	r1, r2
   b8490:	f7fe bf08 	b.w	b72a4 <network_connecting>

000b8494 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8494:	6840      	ldr	r0, [r0, #4]
   b8496:	2200      	movs	r2, #0
   b8498:	2102      	movs	r1, #2
   b849a:	f7fe bf0b 	b.w	b72b4 <network_disconnect>

000b849e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b849e:	2300      	movs	r3, #0
   b84a0:	6840      	ldr	r0, [r0, #4]
   b84a2:	461a      	mov	r2, r3
   b84a4:	f7fe bef6 	b.w	b7294 <network_connect>

000b84a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b84a8:	4b02      	ldr	r3, [pc, #8]	; (b84b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b84aa:	2204      	movs	r2, #4
   b84ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b84ae:	4a02      	ldr	r2, [pc, #8]	; (b84b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b84b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b84b2:	4770      	bx	lr
   b84b4:	2003e71c 	.word	0x2003e71c
   b84b8:	000ba00c 	.word	0x000ba00c

000b84bc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b84bc:	b510      	push	{r4, lr}
   b84be:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b84c0:	f7fc fbce 	bl	b4c60 <strlen>
   b84c4:	3801      	subs	r0, #1
   b84c6:	1823      	adds	r3, r4, r0
   b84c8:	4620      	mov	r0, r4
	while(i<j){
   b84ca:	4283      	cmp	r3, r0
   b84cc:	d906      	bls.n	b84dc <_Z11str_reversePc+0x20>
		c = *i;
   b84ce:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b84d0:	7819      	ldrb	r1, [r3, #0]
   b84d2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b84d6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b84da:	e7f6      	b.n	b84ca <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b84dc:	bd10      	pop	{r4, pc}

000b84de <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b84de:	b570      	push	{r4, r5, r6, lr}
   b84e0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b84e2:	1e91      	subs	r1, r2, #2
   b84e4:	2922      	cmp	r1, #34	; 0x22
   b84e6:	d81d      	bhi.n	b8524 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b84e8:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b84ea:	b930      	cbnz	r0, b84fa <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b84ec:	4423      	add	r3, r4
            *ptr++ = '0';
   b84ee:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b84f0:	429d      	cmp	r5, r3
   b84f2:	d210      	bcs.n	b8516 <ultoa+0x38>
            *ptr++ = '0';
   b84f4:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b84f8:	e7fa      	b.n	b84f0 <ultoa+0x12>
            result.quot = a/radix;
   b84fa:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b84fe:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b8502:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b8504:	2809      	cmp	r0, #9
                *ptr += '0';
   b8506:	bf94      	ite	ls
   b8508:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b850a:	3157      	addhi	r1, #87	; 0x57
   b850c:	b2c9      	uxtb	r1, r1
   b850e:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b8512:	4630      	mov	r0, r6
	while(a){
   b8514:	e7e9      	b.n	b84ea <ultoa+0xc>

	*ptr = '\0';
   b8516:	2300      	movs	r3, #0
	str_reverse(buffer);
   b8518:	4620      	mov	r0, r4
	*ptr = '\0';
   b851a:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b851c:	f7ff ffce 	bl	b84bc <_Z11str_reversePc>
	return buffer;
   b8520:	4620      	mov	r0, r4
}
   b8522:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b8524:	2000      	movs	r0, #0
   b8526:	e7fc      	b.n	b8522 <ultoa+0x44>

000b8528 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8528:	4b01      	ldr	r3, [pc, #4]	; (b8530 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b852a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b852c:	4770      	bx	lr
   b852e:	bf00      	nop
   b8530:	2003e554 	.word	0x2003e554

000b8534 <serialEventRun>:
{
   b8534:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b8536:	4b0b      	ldr	r3, [pc, #44]	; (b8564 <serialEventRun+0x30>)
   b8538:	b143      	cbz	r3, b854c <serialEventRun+0x18>
   b853a:	f7ff ff5b 	bl	b83f4 <_Z16_fetch_usbserialv>
   b853e:	6803      	ldr	r3, [r0, #0]
   b8540:	691b      	ldr	r3, [r3, #16]
   b8542:	4798      	blx	r3
   b8544:	2800      	cmp	r0, #0
   b8546:	dd01      	ble.n	b854c <serialEventRun+0x18>
        serialEvent();
   b8548:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b854c:	4b06      	ldr	r3, [pc, #24]	; (b8568 <serialEventRun+0x34>)
   b854e:	b143      	cbz	r3, b8562 <serialEventRun+0x2e>
   b8550:	f000 f99a 	bl	b8888 <_Z22__fetch_global_Serial1v>
   b8554:	6803      	ldr	r3, [r0, #0]
   b8556:	691b      	ldr	r3, [r3, #16]
   b8558:	4798      	blx	r3
   b855a:	2800      	cmp	r0, #0
   b855c:	dd01      	ble.n	b8562 <serialEventRun+0x2e>
        serialEvent1();
   b855e:	f3af 8000 	nop.w
}
   b8562:	bd08      	pop	{r3, pc}
	...

000b856c <_post_loop>:
{
   b856c:	b508      	push	{r3, lr}
	serialEventRun();
   b856e:	f7ff ffe1 	bl	b8534 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8572:	f7fe fc8b 	bl	b6e8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8576:	4b01      	ldr	r3, [pc, #4]	; (b857c <_post_loop+0x10>)
   b8578:	6018      	str	r0, [r3, #0]
}
   b857a:	bd08      	pop	{r3, pc}
   b857c:	2003e72c 	.word	0x2003e72c

000b8580 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8580:	4805      	ldr	r0, [pc, #20]	; (b8598 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8582:	4a06      	ldr	r2, [pc, #24]	; (b859c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8584:	4906      	ldr	r1, [pc, #24]	; (b85a0 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8586:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8588:	1a12      	subs	r2, r2, r0
   b858a:	f000 fac9 	bl	b8b20 <memcpy>
    __backup_sram_signature = signature;
   b858e:	4b05      	ldr	r3, [pc, #20]	; (b85a4 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8590:	4a05      	ldr	r2, [pc, #20]	; (b85a8 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8592:	601a      	str	r2, [r3, #0]
}
   b8594:	bd08      	pop	{r3, pc}
   b8596:	bf00      	nop
   b8598:	2003f400 	.word	0x2003f400
   b859c:	2003f404 	.word	0x2003f404
   b85a0:	000ba364 	.word	0x000ba364
   b85a4:	2003f400 	.word	0x2003f400
   b85a8:	9a271c1e 	.word	0x9a271c1e

000b85ac <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b85ac:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85ae:	2300      	movs	r3, #0
   b85b0:	9300      	str	r3, [sp, #0]
   b85b2:	461a      	mov	r2, r3
   b85b4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85b8:	f7fe fe52 	bl	b7260 <system_ctrl_set_result>
}
   b85bc:	b003      	add	sp, #12
   b85be:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b85c4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b85c4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b85c6:	8843      	ldrh	r3, [r0, #2]
   b85c8:	2b0a      	cmp	r3, #10
   b85ca:	d008      	beq.n	b85de <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b85cc:	2b50      	cmp	r3, #80	; 0x50
   b85ce:	d10b      	bne.n	b85e8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b85d0:	4b09      	ldr	r3, [pc, #36]	; (b85f8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b85d2:	681b      	ldr	r3, [r3, #0]
   b85d4:	b14b      	cbz	r3, b85ea <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b85d6:	b003      	add	sp, #12
   b85d8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b85dc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b85de:	f7ff ffe5 	bl	b85ac <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b85e2:	b003      	add	sp, #12
   b85e4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b85e8:	2300      	movs	r3, #0
   b85ea:	9300      	str	r3, [sp, #0]
   b85ec:	461a      	mov	r2, r3
   b85ee:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b85f2:	f7fe fe35 	bl	b7260 <system_ctrl_set_result>
}
   b85f6:	e7f4      	b.n	b85e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b85f8:	2003e728 	.word	0x2003e728

000b85fc <module_user_init_hook>:
{
   b85fc:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b85fe:	4812      	ldr	r0, [pc, #72]	; (b8648 <module_user_init_hook+0x4c>)
   b8600:	2100      	movs	r1, #0
   b8602:	f7fe fee7 	bl	b73d4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b8606:	4b11      	ldr	r3, [pc, #68]	; (b864c <module_user_init_hook+0x50>)
   b8608:	681a      	ldr	r2, [r3, #0]
   b860a:	4b11      	ldr	r3, [pc, #68]	; (b8650 <module_user_init_hook+0x54>)
   b860c:	429a      	cmp	r2, r3
   b860e:	4b11      	ldr	r3, [pc, #68]	; (b8654 <module_user_init_hook+0x58>)
   b8610:	bf0c      	ite	eq
   b8612:	2201      	moveq	r2, #1
   b8614:	2200      	movne	r2, #0
   b8616:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8618:	d001      	beq.n	b861e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b861a:	f7ff ffb1 	bl	b8580 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b861e:	f7fe fc25 	bl	b6e6c <HAL_RNG_GetRandomNumber>
   b8622:	4604      	mov	r4, r0
    srand(seed);
   b8624:	f000 fa92 	bl	b8b4c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8628:	4b0b      	ldr	r3, [pc, #44]	; (b8658 <module_user_init_hook+0x5c>)
   b862a:	b113      	cbz	r3, b8632 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b862c:	4620      	mov	r0, r4
   b862e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b8632:	2100      	movs	r1, #0
   b8634:	4808      	ldr	r0, [pc, #32]	; (b8658 <module_user_init_hook+0x5c>)
   b8636:	f7fe fe25 	bl	b7284 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b863a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b863e:	4807      	ldr	r0, [pc, #28]	; (b865c <module_user_init_hook+0x60>)
   b8640:	2100      	movs	r1, #0
   b8642:	f7fe be03 	b.w	b724c <system_ctrl_set_app_request_handler>
   b8646:	bf00      	nop
   b8648:	000b8529 	.word	0x000b8529
   b864c:	2003f400 	.word	0x2003f400
   b8650:	9a271c1e 	.word	0x9a271c1e
   b8654:	2003e724 	.word	0x2003e724
   b8658:	00000000 	.word	0x00000000
   b865c:	000b85c5 	.word	0x000b85c5

000b8660 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8660:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8662:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8664:	d902      	bls.n	b866c <pinAvailable+0xc>
    return false;
   b8666:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8668:	b002      	add	sp, #8
   b866a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b866c:	f1a0 030b 	sub.w	r3, r0, #11
   b8670:	2b02      	cmp	r3, #2
   b8672:	d81a      	bhi.n	b86aa <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8674:	4c17      	ldr	r4, [pc, #92]	; (b86d4 <pinAvailable+0x74>)
   b8676:	7821      	ldrb	r1, [r4, #0]
   b8678:	f3bf 8f5b 	dmb	ish
   b867c:	f011 0101 	ands.w	r1, r1, #1
   b8680:	d10b      	bne.n	b869a <pinAvailable+0x3a>
   b8682:	4620      	mov	r0, r4
   b8684:	9101      	str	r1, [sp, #4]
   b8686:	f7fc fb41 	bl	b4d0c <__cxa_guard_acquire>
   b868a:	9901      	ldr	r1, [sp, #4]
   b868c:	b128      	cbz	r0, b869a <pinAvailable+0x3a>
   b868e:	4812      	ldr	r0, [pc, #72]	; (b86d8 <pinAvailable+0x78>)
   b8690:	f7ff f93c 	bl	b790c <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8694:	4620      	mov	r0, r4
   b8696:	f7fc fb3e 	bl	b4d16 <__cxa_guard_release>
   b869a:	4b0f      	ldr	r3, [pc, #60]	; (b86d8 <pinAvailable+0x78>)
   b869c:	7818      	ldrb	r0, [r3, #0]
   b869e:	f7fe fd15 	bl	b70cc <hal_spi_is_enabled>
   b86a2:	2800      	cmp	r0, #0
   b86a4:	d1df      	bne.n	b8666 <pinAvailable+0x6>
  return true; // 'pin' is available
   b86a6:	2001      	movs	r0, #1
   b86a8:	e7de      	b.n	b8668 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b86aa:	2801      	cmp	r0, #1
   b86ac:	d809      	bhi.n	b86c2 <pinAvailable+0x62>
   b86ae:	f000 f8ab 	bl	b8808 <_Z19__fetch_global_Wirev>
   b86b2:	2100      	movs	r1, #0
   b86b4:	7c00      	ldrb	r0, [r0, #16]
   b86b6:	f7fe fc79 	bl	b6fac <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b86ba:	f080 0001 	eor.w	r0, r0, #1
   b86be:	b2c0      	uxtb	r0, r0
   b86c0:	e7d2      	b.n	b8668 <pinAvailable+0x8>
   b86c2:	3809      	subs	r0, #9
   b86c4:	2801      	cmp	r0, #1
   b86c6:	d8ee      	bhi.n	b86a6 <pinAvailable+0x46>
   b86c8:	f000 f8de 	bl	b8888 <_Z22__fetch_global_Serial1v>
   b86cc:	7c00      	ldrb	r0, [r0, #16]
   b86ce:	f7fe fd4d 	bl	b716c <hal_usart_is_enabled>
   b86d2:	e7f2      	b.n	b86ba <pinAvailable+0x5a>
   b86d4:	2003e6bc 	.word	0x2003e6bc
   b86d8:	2003e6c0 	.word	0x2003e6c0

000b86dc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b86dc:	2823      	cmp	r0, #35	; 0x23
{
   b86de:	b538      	push	{r3, r4, r5, lr}
   b86e0:	4604      	mov	r4, r0
   b86e2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b86e4:	d80a      	bhi.n	b86fc <pinMode+0x20>
   b86e6:	29ff      	cmp	r1, #255	; 0xff
   b86e8:	d008      	beq.n	b86fc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b86ea:	f7ff ffb9 	bl	b8660 <pinAvailable>
   b86ee:	b128      	cbz	r0, b86fc <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b86f0:	4629      	mov	r1, r5
   b86f2:	4620      	mov	r0, r4
}
   b86f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b86f8:	f7fe bbd8 	b.w	b6eac <hal_gpio_mode>
}
   b86fc:	bd38      	pop	{r3, r4, r5, pc}

000b86fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b86fe:	b538      	push	{r3, r4, r5, lr}
   b8700:	4604      	mov	r4, r0
   b8702:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b8704:	f7fe fbda 	bl	b6ebc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8708:	28ff      	cmp	r0, #255	; 0xff
   b870a:	d010      	beq.n	b872e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b870c:	2806      	cmp	r0, #6
   b870e:	d804      	bhi.n	b871a <digitalWrite+0x1c>
   b8710:	234d      	movs	r3, #77	; 0x4d
   b8712:	fa23 f000 	lsr.w	r0, r3, r0
   b8716:	07c3      	lsls	r3, r0, #31
   b8718:	d409      	bmi.n	b872e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b871a:	4620      	mov	r0, r4
   b871c:	f7ff ffa0 	bl	b8660 <pinAvailable>
   b8720:	b128      	cbz	r0, b872e <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b8722:	4629      	mov	r1, r5
   b8724:	4620      	mov	r0, r4
}
   b8726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b872a:	f7fe bbcf 	b.w	b6ecc <hal_gpio_write>
}
   b872e:	bd38      	pop	{r3, r4, r5, pc}

000b8730 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b8730:	b510      	push	{r4, lr}
   b8732:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b8734:	f7fe fbc2 	bl	b6ebc <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b8738:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b873a:	b2db      	uxtb	r3, r3
   b873c:	2b01      	cmp	r3, #1
   b873e:	d908      	bls.n	b8752 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b8740:	4620      	mov	r0, r4
   b8742:	f7ff ff8d 	bl	b8660 <pinAvailable>
   b8746:	b120      	cbz	r0, b8752 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b8748:	4620      	mov	r0, r4
}
   b874a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b874e:	f7fe bbc5 	b.w	b6edc <hal_gpio_read>
}
   b8752:	2000      	movs	r0, #0
   b8754:	bd10      	pop	{r4, pc}

000b8756 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b8756:	280d      	cmp	r0, #13
{
   b8758:	b510      	push	{r4, lr}
   b875a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b875c:	bf9c      	itt	ls
   b875e:	340e      	addls	r4, #14
   b8760:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b8762:	4620      	mov	r0, r4
   b8764:	f7ff ff7c 	bl	b8660 <pinAvailable>
   b8768:	b150      	cbz	r0, b8780 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b876a:	2103      	movs	r1, #3
   b876c:	4620      	mov	r0, r4
   b876e:	f7fe fb95 	bl	b6e9c <hal_pin_validate_function>
   b8772:	2803      	cmp	r0, #3
   b8774:	d104      	bne.n	b8780 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8776:	4620      	mov	r0, r4
}
   b8778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b877c:	f7fe bbbe 	b.w	b6efc <hal_adc_read>
}
   b8780:	2000      	movs	r0, #0
   b8782:	bd10      	pop	{r4, pc}

000b8784 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b8784:	b538      	push	{r3, r4, r5, lr}
   b8786:	4604      	mov	r4, r0
   b8788:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b878a:	f7ff ff69 	bl	b8660 <pinAvailable>
   b878e:	b1f0      	cbz	r0, b87ce <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b8790:	2104      	movs	r1, #4
   b8792:	4620      	mov	r0, r4
   b8794:	f7fe fb82 	bl	b6e9c <hal_pin_validate_function>
   b8798:	2804      	cmp	r0, #4
   b879a:	d105      	bne.n	b87a8 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b879c:	b2a9      	uxth	r1, r5
   b879e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b87a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b87a4:	f7fe bba2 	b.w	b6eec <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b87a8:	2102      	movs	r1, #2
   b87aa:	4620      	mov	r0, r4
   b87ac:	f7fe fb76 	bl	b6e9c <hal_pin_validate_function>
   b87b0:	2802      	cmp	r0, #2
   b87b2:	d10c      	bne.n	b87ce <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b87b4:	4620      	mov	r0, r4
   b87b6:	f7fe fb81 	bl	b6ebc <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b87ba:	2801      	cmp	r0, #1
   b87bc:	d001      	beq.n	b87c2 <_Z11analogWritetm+0x3e>
   b87be:	2804      	cmp	r0, #4
   b87c0:	d105      	bne.n	b87ce <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b87c2:	4629      	mov	r1, r5
   b87c4:	4620      	mov	r0, r4
}
   b87c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b87ca:	f7fe bb9f 	b.w	b6f0c <hal_pwm_write_ext>
}
   b87ce:	bd38      	pop	{r3, r4, r5, pc}

000b87d0 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87d0:	4770      	bx	lr
	...

000b87d4 <_Z17acquireWireBufferv>:
{
   b87d4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b87d6:	4b0a      	ldr	r3, [pc, #40]	; (b8800 <_Z17acquireWireBufferv+0x2c>)
   b87d8:	6003      	str	r3, [r0, #0]
   b87da:	2301      	movs	r3, #1
{
   b87dc:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b87de:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b87e0:	4908      	ldr	r1, [pc, #32]	; (b8804 <_Z17acquireWireBufferv+0x30>)
   b87e2:	2020      	movs	r0, #32
   b87e4:	f000 f874 	bl	b88d0 <_ZnajRKSt9nothrow_t>
	};
   b87e8:	2520      	movs	r5, #32
   b87ea:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b87ec:	4905      	ldr	r1, [pc, #20]	; (b8804 <_Z17acquireWireBufferv+0x30>)
	};
   b87ee:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b87f0:	4628      	mov	r0, r5
   b87f2:	f000 f86d 	bl	b88d0 <_ZnajRKSt9nothrow_t>
	};
   b87f6:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b87fa:	4620      	mov	r0, r4
   b87fc:	bd38      	pop	{r3, r4, r5, pc}
   b87fe:	bf00      	nop
   b8800:	00010018 	.word	0x00010018
   b8804:	000ba040 	.word	0x000ba040

000b8808 <_Z19__fetch_global_Wirev>:
{
   b8808:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b880a:	4d0e      	ldr	r5, [pc, #56]	; (b8844 <_Z19__fetch_global_Wirev+0x3c>)
   b880c:	7829      	ldrb	r1, [r5, #0]
   b880e:	f3bf 8f5b 	dmb	ish
   b8812:	f011 0401 	ands.w	r4, r1, #1
{
   b8816:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8818:	d111      	bne.n	b883e <_Z19__fetch_global_Wirev+0x36>
   b881a:	4628      	mov	r0, r5
   b881c:	f7fc fa76 	bl	b4d0c <__cxa_guard_acquire>
   b8820:	b168      	cbz	r0, b883e <_Z19__fetch_global_Wirev+0x36>
   b8822:	4668      	mov	r0, sp
   b8824:	f7ff ffd6 	bl	b87d4 <_Z17acquireWireBufferv>
   b8828:	466a      	mov	r2, sp
   b882a:	4621      	mov	r1, r4
   b882c:	4806      	ldr	r0, [pc, #24]	; (b8848 <_Z19__fetch_global_Wirev+0x40>)
   b882e:	f7fe fe4f 	bl	b74d0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b8832:	4628      	mov	r0, r5
   b8834:	f7fc fa6f 	bl	b4d16 <__cxa_guard_release>
   b8838:	4804      	ldr	r0, [pc, #16]	; (b884c <_Z19__fetch_global_Wirev+0x44>)
   b883a:	f000 f963 	bl	b8b04 <atexit>
	return wire;
}
   b883e:	4802      	ldr	r0, [pc, #8]	; (b8848 <_Z19__fetch_global_Wirev+0x40>)
   b8840:	b007      	add	sp, #28
   b8842:	bd30      	pop	{r4, r5, pc}
   b8844:	2003e730 	.word	0x2003e730
   b8848:	2003e734 	.word	0x2003e734
   b884c:	000b87d1 	.word	0x000b87d1

000b8850 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8850:	4770      	bx	lr
	...

000b8854 <_Z20acquireSerial1Bufferv>:
{
   b8854:	b538      	push	{r3, r4, r5, lr}
   b8856:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8858:	2514      	movs	r5, #20
   b885a:	462a      	mov	r2, r5
   b885c:	2100      	movs	r1, #0
   b885e:	f000 f96d 	bl	b8b3c <memset>
   b8862:	8025      	strh	r5, [r4, #0]
   b8864:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8866:	4907      	ldr	r1, [pc, #28]	; (b8884 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8868:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b886a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b886c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b886e:	f000 f82f 	bl	b88d0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8872:	4904      	ldr	r1, [pc, #16]	; (b8884 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8874:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8876:	4628      	mov	r0, r5
   b8878:	f000 f82a 	bl	b88d0 <_ZnajRKSt9nothrow_t>
    };
   b887c:	60e0      	str	r0, [r4, #12]
}
   b887e:	4620      	mov	r0, r4
   b8880:	bd38      	pop	{r3, r4, r5, pc}
   b8882:	bf00      	nop
   b8884:	000ba040 	.word	0x000ba040

000b8888 <_Z22__fetch_global_Serial1v>:
{
   b8888:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b888a:	4d0e      	ldr	r5, [pc, #56]	; (b88c4 <_Z22__fetch_global_Serial1v+0x3c>)
   b888c:	7829      	ldrb	r1, [r5, #0]
   b888e:	f3bf 8f5b 	dmb	ish
   b8892:	f011 0401 	ands.w	r4, r1, #1
{
   b8896:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8898:	d111      	bne.n	b88be <_Z22__fetch_global_Serial1v+0x36>
   b889a:	4628      	mov	r0, r5
   b889c:	f7fc fa36 	bl	b4d0c <__cxa_guard_acquire>
   b88a0:	b168      	cbz	r0, b88be <_Z22__fetch_global_Serial1v+0x36>
   b88a2:	a801      	add	r0, sp, #4
   b88a4:	f7ff ffd6 	bl	b8854 <_Z20acquireSerial1Bufferv>
   b88a8:	aa01      	add	r2, sp, #4
   b88aa:	4621      	mov	r1, r4
   b88ac:	4806      	ldr	r0, [pc, #24]	; (b88c8 <_Z22__fetch_global_Serial1v+0x40>)
   b88ae:	f7ff fd33 	bl	b8318 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b88b2:	4628      	mov	r0, r5
   b88b4:	f7fc fa2f 	bl	b4d16 <__cxa_guard_release>
   b88b8:	4804      	ldr	r0, [pc, #16]	; (b88cc <_Z22__fetch_global_Serial1v+0x44>)
   b88ba:	f000 f923 	bl	b8b04 <atexit>
    return serial1;
}
   b88be:	4802      	ldr	r0, [pc, #8]	; (b88c8 <_Z22__fetch_global_Serial1v+0x40>)
   b88c0:	b007      	add	sp, #28
   b88c2:	bd30      	pop	{r4, r5, pc}
   b88c4:	2003e748 	.word	0x2003e748
   b88c8:	2003e74c 	.word	0x2003e74c
   b88cc:	000b8851 	.word	0x000b8851

000b88d0 <_ZnajRKSt9nothrow_t>:
   b88d0:	f7fc ba0b 	b.w	b4cea <_Znaj>

000b88d4 <_ZSt20__throw_length_errorPKc>:
   b88d4:	b508      	push	{r3, lr}
   b88d6:	f7fe fd65 	bl	b73a4 <abort>

000b88da <_ZSt25__throw_bad_function_callv>:
   b88da:	b508      	push	{r3, lr}
   b88dc:	f7fe fd62 	bl	b73a4 <abort>

000b88e0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b88e0:	4901      	ldr	r1, [pc, #4]	; (b88e8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b88e2:	f000 b8f9 	b.w	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b88e6:	bf00      	nop
   b88e8:	000ba05c 	.word	0x000ba05c

000b88ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b88ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b88ee:	2400      	movs	r4, #0
   b88f0:	2310      	movs	r3, #16
   b88f2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b88f6:	6803      	ldr	r3, [r0, #0]
   b88f8:	4615      	mov	r5, r2
   b88fa:	699e      	ldr	r6, [r3, #24]
   b88fc:	6812      	ldr	r2, [r2, #0]
   b88fe:	466b      	mov	r3, sp
   b8900:	e9cd 4400 	strd	r4, r4, [sp]
   b8904:	47b0      	blx	r6
   b8906:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b890a:	f003 0306 	and.w	r3, r3, #6
   b890e:	2b06      	cmp	r3, #6
   b8910:	bf03      	ittte	eq
   b8912:	9b00      	ldreq	r3, [sp, #0]
   b8914:	602b      	streq	r3, [r5, #0]
   b8916:	2001      	moveq	r0, #1
   b8918:	4620      	movne	r0, r4
   b891a:	b004      	add	sp, #16
   b891c:	bd70      	pop	{r4, r5, r6, pc}

000b891e <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b891e:	9800      	ldr	r0, [sp, #0]
   b8920:	4290      	cmp	r0, r2
   b8922:	bf14      	ite	ne
   b8924:	2001      	movne	r0, #1
   b8926:	2006      	moveq	r0, #6
   b8928:	4770      	bx	lr
	...

000b892c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b892c:	b510      	push	{r4, lr}
   b892e:	4b03      	ldr	r3, [pc, #12]	; (b893c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b8930:	6003      	str	r3, [r0, #0]
   b8932:	4604      	mov	r4, r0
   b8934:	f000 f8cd 	bl	b8ad2 <_ZNSt9type_infoD1Ev>
   b8938:	4620      	mov	r0, r4
   b893a:	bd10      	pop	{r4, pc}
   b893c:	000ba09c 	.word	0x000ba09c

000b8940 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b8940:	b510      	push	{r4, lr}
   b8942:	4604      	mov	r4, r0
   b8944:	f7ff fff2 	bl	b892c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8948:	4620      	mov	r0, r4
   b894a:	2108      	movs	r1, #8
   b894c:	f7fc f9cf 	bl	b4cee <_ZdlPvj>
   b8950:	4620      	mov	r0, r4
   b8952:	bd10      	pop	{r4, pc}

000b8954 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b8954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8958:	461f      	mov	r7, r3
   b895a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b895e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8962:	4598      	cmp	r8, r3
   b8964:	4606      	mov	r6, r0
   b8966:	4615      	mov	r5, r2
   b8968:	d107      	bne.n	b897a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b896a:	9907      	ldr	r1, [sp, #28]
   b896c:	f000 f8b4 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b8970:	b118      	cbz	r0, b897a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8972:	7165      	strb	r5, [r4, #5]
   b8974:	2000      	movs	r0, #0
   b8976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b897a:	4639      	mov	r1, r7
   b897c:	4630      	mov	r0, r6
   b897e:	f000 f8ab 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b8982:	2800      	cmp	r0, #0
   b8984:	d0f6      	beq.n	b8974 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8986:	2301      	movs	r3, #1
   b8988:	f8c4 8000 	str.w	r8, [r4]
   b898c:	7125      	strb	r5, [r4, #4]
   b898e:	71a3      	strb	r3, [r4, #6]
   b8990:	e7f0      	b.n	b8974 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8992 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8992:	b538      	push	{r3, r4, r5, lr}
   b8994:	4615      	mov	r5, r2
   b8996:	461c      	mov	r4, r3
   b8998:	f000 f89e 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b899c:	b120      	cbz	r0, b89a8 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b899e:	2308      	movs	r3, #8
   b89a0:	60e3      	str	r3, [r4, #12]
   b89a2:	2306      	movs	r3, #6
   b89a4:	6025      	str	r5, [r4, #0]
   b89a6:	7123      	strb	r3, [r4, #4]
   b89a8:	bd38      	pop	{r3, r4, r5, pc}

000b89aa <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b89aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b89ac:	4605      	mov	r5, r0
   b89ae:	460c      	mov	r4, r1
   b89b0:	9201      	str	r2, [sp, #4]
   b89b2:	461e      	mov	r6, r3
   b89b4:	f000 f890 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b89b8:	b950      	cbnz	r0, b89d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b89ba:	2e03      	cmp	r6, #3
   b89bc:	d808      	bhi.n	b89d0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b89be:	6823      	ldr	r3, [r4, #0]
   b89c0:	9a01      	ldr	r2, [sp, #4]
   b89c2:	695b      	ldr	r3, [r3, #20]
   b89c4:	4629      	mov	r1, r5
   b89c6:	4620      	mov	r0, r4
   b89c8:	b002      	add	sp, #8
   b89ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b89ce:	4718      	bx	r3
   b89d0:	b002      	add	sp, #8
   b89d2:	bd70      	pop	{r4, r5, r6, pc}

000b89d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b89d4:	b510      	push	{r4, lr}
   b89d6:	4b03      	ldr	r3, [pc, #12]	; (b89e4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b89d8:	6003      	str	r3, [r0, #0]
   b89da:	4604      	mov	r4, r0
   b89dc:	f7ff ffa6 	bl	b892c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b89e0:	4620      	mov	r0, r4
   b89e2:	bd10      	pop	{r4, pc}
   b89e4:	000ba0fc 	.word	0x000ba0fc

000b89e8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b89e8:	b510      	push	{r4, lr}
   b89ea:	4604      	mov	r4, r0
   b89ec:	f7ff fff2 	bl	b89d4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b89f0:	4620      	mov	r0, r4
   b89f2:	210c      	movs	r1, #12
   b89f4:	f7fc f97b 	bl	b4cee <_ZdlPvj>
   b89f8:	4620      	mov	r0, r4
   b89fa:	bd10      	pop	{r4, pc}

000b89fc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b89fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b89fe:	9f08      	ldr	r7, [sp, #32]
   b8a00:	4297      	cmp	r7, r2
   b8a02:	4605      	mov	r5, r0
   b8a04:	460e      	mov	r6, r1
   b8a06:	4614      	mov	r4, r2
   b8a08:	d00a      	beq.n	b8a20 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b8a0a:	68a8      	ldr	r0, [r5, #8]
   b8a0c:	6802      	ldr	r2, [r0, #0]
   b8a0e:	9708      	str	r7, [sp, #32]
   b8a10:	6a15      	ldr	r5, [r2, #32]
   b8a12:	4631      	mov	r1, r6
   b8a14:	4622      	mov	r2, r4
   b8a16:	46ac      	mov	ip, r5
   b8a18:	b003      	add	sp, #12
   b8a1a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b8a1e:	4760      	bx	ip
   b8a20:	4619      	mov	r1, r3
   b8a22:	9301      	str	r3, [sp, #4]
   b8a24:	f000 f858 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b8a28:	9b01      	ldr	r3, [sp, #4]
   b8a2a:	2800      	cmp	r0, #0
   b8a2c:	d0ed      	beq.n	b8a0a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b8a2e:	2006      	movs	r0, #6
   b8a30:	b003      	add	sp, #12
   b8a32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b8a34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b8a34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a38:	460d      	mov	r5, r1
   b8a3a:	4619      	mov	r1, r3
   b8a3c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b8a40:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b8a44:	4681      	mov	r9, r0
   b8a46:	4617      	mov	r7, r2
   b8a48:	4698      	mov	r8, r3
   b8a4a:	f000 f845 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b8a4e:	b190      	cbz	r0, b8a76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b8a50:	2d00      	cmp	r5, #0
   b8a52:	6034      	str	r4, [r6, #0]
   b8a54:	7137      	strb	r7, [r6, #4]
   b8a56:	db09      	blt.n	b8a6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b8a58:	1961      	adds	r1, r4, r5
   b8a5a:	458a      	cmp	sl, r1
   b8a5c:	bf0c      	ite	eq
   b8a5e:	2106      	moveq	r1, #6
   b8a60:	2101      	movne	r1, #1
   b8a62:	71b1      	strb	r1, [r6, #6]
   b8a64:	2000      	movs	r0, #0
   b8a66:	b001      	add	sp, #4
   b8a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a6c:	3502      	adds	r5, #2
   b8a6e:	d1f9      	bne.n	b8a64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8a70:	2301      	movs	r3, #1
   b8a72:	71b3      	strb	r3, [r6, #6]
   b8a74:	e7f6      	b.n	b8a64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8a76:	4554      	cmp	r4, sl
   b8a78:	d106      	bne.n	b8a88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8a7a:	4659      	mov	r1, fp
   b8a7c:	4648      	mov	r0, r9
   b8a7e:	f000 f82b 	bl	b8ad8 <_ZNKSt9type_infoeqERKS_>
   b8a82:	b108      	cbz	r0, b8a88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8a84:	7177      	strb	r7, [r6, #5]
   b8a86:	e7ed      	b.n	b8a64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8a88:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8a8c:	6803      	ldr	r3, [r0, #0]
   b8a8e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8a92:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8a96:	69dc      	ldr	r4, [r3, #28]
   b8a98:	463a      	mov	r2, r7
   b8a9a:	4643      	mov	r3, r8
   b8a9c:	4629      	mov	r1, r5
   b8a9e:	46a4      	mov	ip, r4
   b8aa0:	b001      	add	sp, #4
   b8aa2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8aa6:	4760      	bx	ip

000b8aa8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8aac:	4607      	mov	r7, r0
   b8aae:	460c      	mov	r4, r1
   b8ab0:	4615      	mov	r5, r2
   b8ab2:	461e      	mov	r6, r3
   b8ab4:	f7ff ff6d 	bl	b8992 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8ab8:	b948      	cbnz	r0, b8ace <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8aba:	68b8      	ldr	r0, [r7, #8]
   b8abc:	6803      	ldr	r3, [r0, #0]
   b8abe:	699f      	ldr	r7, [r3, #24]
   b8ac0:	462a      	mov	r2, r5
   b8ac2:	4633      	mov	r3, r6
   b8ac4:	4621      	mov	r1, r4
   b8ac6:	46bc      	mov	ip, r7
   b8ac8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8acc:	4760      	bx	ip
   b8ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8ad2 <_ZNSt9type_infoD1Ev>:
   b8ad2:	4770      	bx	lr

000b8ad4 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8ad4:	2000      	movs	r0, #0
   b8ad6:	4770      	bx	lr

000b8ad8 <_ZNKSt9type_infoeqERKS_>:
   b8ad8:	4281      	cmp	r1, r0
   b8ada:	b508      	push	{r3, lr}
   b8adc:	d00e      	beq.n	b8afc <_ZNKSt9type_infoeqERKS_+0x24>
   b8ade:	6840      	ldr	r0, [r0, #4]
   b8ae0:	7803      	ldrb	r3, [r0, #0]
   b8ae2:	2b2a      	cmp	r3, #42	; 0x2a
   b8ae4:	d00c      	beq.n	b8b00 <_ZNKSt9type_infoeqERKS_+0x28>
   b8ae6:	6849      	ldr	r1, [r1, #4]
   b8ae8:	780b      	ldrb	r3, [r1, #0]
   b8aea:	2b2a      	cmp	r3, #42	; 0x2a
   b8aec:	bf08      	it	eq
   b8aee:	3101      	addeq	r1, #1
   b8af0:	f7fc f8ac 	bl	b4c4c <strcmp>
   b8af4:	fab0 f080 	clz	r0, r0
   b8af8:	0940      	lsrs	r0, r0, #5
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	2001      	movs	r0, #1
   b8afe:	e7fc      	b.n	b8afa <_ZNKSt9type_infoeqERKS_+0x22>
   b8b00:	2000      	movs	r0, #0
   b8b02:	e7fa      	b.n	b8afa <_ZNKSt9type_infoeqERKS_+0x22>

000b8b04 <atexit>:
   b8b04:	2300      	movs	r3, #0
   b8b06:	4601      	mov	r1, r0
   b8b08:	461a      	mov	r2, r3
   b8b0a:	4618      	mov	r0, r3
   b8b0c:	f000 b8ec 	b.w	b8ce8 <__register_exitproc>

000b8b10 <atoi>:
   b8b10:	220a      	movs	r2, #10
   b8b12:	2100      	movs	r1, #0
   b8b14:	f000 b8de 	b.w	b8cd4 <strtol>

000b8b18 <atol>:
   b8b18:	220a      	movs	r2, #10
   b8b1a:	2100      	movs	r1, #0
   b8b1c:	f000 b8da 	b.w	b8cd4 <strtol>

000b8b20 <memcpy>:
   b8b20:	440a      	add	r2, r1
   b8b22:	4291      	cmp	r1, r2
   b8b24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8b28:	d100      	bne.n	b8b2c <memcpy+0xc>
   b8b2a:	4770      	bx	lr
   b8b2c:	b510      	push	{r4, lr}
   b8b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8b32:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8b36:	4291      	cmp	r1, r2
   b8b38:	d1f9      	bne.n	b8b2e <memcpy+0xe>
   b8b3a:	bd10      	pop	{r4, pc}

000b8b3c <memset>:
   b8b3c:	4402      	add	r2, r0
   b8b3e:	4603      	mov	r3, r0
   b8b40:	4293      	cmp	r3, r2
   b8b42:	d100      	bne.n	b8b46 <memset+0xa>
   b8b44:	4770      	bx	lr
   b8b46:	f803 1b01 	strb.w	r1, [r3], #1
   b8b4a:	e7f9      	b.n	b8b40 <memset+0x4>

000b8b4c <srand>:
   b8b4c:	b538      	push	{r3, r4, r5, lr}
   b8b4e:	4b10      	ldr	r3, [pc, #64]	; (b8b90 <srand+0x44>)
   b8b50:	681d      	ldr	r5, [r3, #0]
   b8b52:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b54:	4604      	mov	r4, r0
   b8b56:	b9b3      	cbnz	r3, b8b86 <srand+0x3a>
   b8b58:	2018      	movs	r0, #24
   b8b5a:	f7fe fbfb 	bl	b7354 <malloc>
   b8b5e:	4602      	mov	r2, r0
   b8b60:	63a8      	str	r0, [r5, #56]	; 0x38
   b8b62:	b920      	cbnz	r0, b8b6e <srand+0x22>
   b8b64:	4b0b      	ldr	r3, [pc, #44]	; (b8b94 <srand+0x48>)
   b8b66:	480c      	ldr	r0, [pc, #48]	; (b8b98 <srand+0x4c>)
   b8b68:	2142      	movs	r1, #66	; 0x42
   b8b6a:	f7fe fc2b 	bl	b73c4 <__assert_func>
   b8b6e:	490b      	ldr	r1, [pc, #44]	; (b8b9c <srand+0x50>)
   b8b70:	4b0b      	ldr	r3, [pc, #44]	; (b8ba0 <srand+0x54>)
   b8b72:	e9c0 1300 	strd	r1, r3, [r0]
   b8b76:	4b0b      	ldr	r3, [pc, #44]	; (b8ba4 <srand+0x58>)
   b8b78:	6083      	str	r3, [r0, #8]
   b8b7a:	230b      	movs	r3, #11
   b8b7c:	8183      	strh	r3, [r0, #12]
   b8b7e:	2100      	movs	r1, #0
   b8b80:	2001      	movs	r0, #1
   b8b82:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8b86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b88:	2200      	movs	r2, #0
   b8b8a:	611c      	str	r4, [r3, #16]
   b8b8c:	615a      	str	r2, [r3, #20]
   b8b8e:	bd38      	pop	{r3, r4, r5, pc}
   b8b90:	2003e554 	.word	0x2003e554
   b8b94:	000ba135 	.word	0x000ba135
   b8b98:	000ba14c 	.word	0x000ba14c
   b8b9c:	abcd330e 	.word	0xabcd330e
   b8ba0:	e66d1234 	.word	0xe66d1234
   b8ba4:	0005deec 	.word	0x0005deec

000b8ba8 <strncpy>:
   b8ba8:	b510      	push	{r4, lr}
   b8baa:	3901      	subs	r1, #1
   b8bac:	4603      	mov	r3, r0
   b8bae:	b132      	cbz	r2, b8bbe <strncpy+0x16>
   b8bb0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8bb4:	f803 4b01 	strb.w	r4, [r3], #1
   b8bb8:	3a01      	subs	r2, #1
   b8bba:	2c00      	cmp	r4, #0
   b8bbc:	d1f7      	bne.n	b8bae <strncpy+0x6>
   b8bbe:	441a      	add	r2, r3
   b8bc0:	2100      	movs	r1, #0
   b8bc2:	4293      	cmp	r3, r2
   b8bc4:	d100      	bne.n	b8bc8 <strncpy+0x20>
   b8bc6:	bd10      	pop	{r4, pc}
   b8bc8:	f803 1b01 	strb.w	r1, [r3], #1
   b8bcc:	e7f9      	b.n	b8bc2 <strncpy+0x1a>
	...

000b8bd0 <_strtol_l.constprop.0>:
   b8bd0:	2b01      	cmp	r3, #1
   b8bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8bd6:	d001      	beq.n	b8bdc <_strtol_l.constprop.0+0xc>
   b8bd8:	2b24      	cmp	r3, #36	; 0x24
   b8bda:	d906      	bls.n	b8bea <_strtol_l.constprop.0+0x1a>
   b8bdc:	f7fe fbea 	bl	b73b4 <__errno>
   b8be0:	2316      	movs	r3, #22
   b8be2:	6003      	str	r3, [r0, #0]
   b8be4:	2000      	movs	r0, #0
   b8be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8bea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8cd0 <_strtol_l.constprop.0+0x100>
   b8bee:	460d      	mov	r5, r1
   b8bf0:	462e      	mov	r6, r5
   b8bf2:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8bf6:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8bfa:	f017 0708 	ands.w	r7, r7, #8
   b8bfe:	d1f7      	bne.n	b8bf0 <_strtol_l.constprop.0+0x20>
   b8c00:	2c2d      	cmp	r4, #45	; 0x2d
   b8c02:	d132      	bne.n	b8c6a <_strtol_l.constprop.0+0x9a>
   b8c04:	782c      	ldrb	r4, [r5, #0]
   b8c06:	2701      	movs	r7, #1
   b8c08:	1cb5      	adds	r5, r6, #2
   b8c0a:	2b00      	cmp	r3, #0
   b8c0c:	d05b      	beq.n	b8cc6 <_strtol_l.constprop.0+0xf6>
   b8c0e:	2b10      	cmp	r3, #16
   b8c10:	d109      	bne.n	b8c26 <_strtol_l.constprop.0+0x56>
   b8c12:	2c30      	cmp	r4, #48	; 0x30
   b8c14:	d107      	bne.n	b8c26 <_strtol_l.constprop.0+0x56>
   b8c16:	782c      	ldrb	r4, [r5, #0]
   b8c18:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8c1c:	2c58      	cmp	r4, #88	; 0x58
   b8c1e:	d14d      	bne.n	b8cbc <_strtol_l.constprop.0+0xec>
   b8c20:	786c      	ldrb	r4, [r5, #1]
   b8c22:	2310      	movs	r3, #16
   b8c24:	3502      	adds	r5, #2
   b8c26:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8c2a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8c2e:	f04f 0c00 	mov.w	ip, #0
   b8c32:	fbb8 f9f3 	udiv	r9, r8, r3
   b8c36:	4666      	mov	r6, ip
   b8c38:	fb03 8a19 	mls	sl, r3, r9, r8
   b8c3c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8c40:	f1be 0f09 	cmp.w	lr, #9
   b8c44:	d816      	bhi.n	b8c74 <_strtol_l.constprop.0+0xa4>
   b8c46:	4674      	mov	r4, lr
   b8c48:	42a3      	cmp	r3, r4
   b8c4a:	dd24      	ble.n	b8c96 <_strtol_l.constprop.0+0xc6>
   b8c4c:	f1bc 0f00 	cmp.w	ip, #0
   b8c50:	db1e      	blt.n	b8c90 <_strtol_l.constprop.0+0xc0>
   b8c52:	45b1      	cmp	r9, r6
   b8c54:	d31c      	bcc.n	b8c90 <_strtol_l.constprop.0+0xc0>
   b8c56:	d101      	bne.n	b8c5c <_strtol_l.constprop.0+0x8c>
   b8c58:	45a2      	cmp	sl, r4
   b8c5a:	db19      	blt.n	b8c90 <_strtol_l.constprop.0+0xc0>
   b8c5c:	fb06 4603 	mla	r6, r6, r3, r4
   b8c60:	f04f 0c01 	mov.w	ip, #1
   b8c64:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8c68:	e7e8      	b.n	b8c3c <_strtol_l.constprop.0+0x6c>
   b8c6a:	2c2b      	cmp	r4, #43	; 0x2b
   b8c6c:	bf04      	itt	eq
   b8c6e:	782c      	ldrbeq	r4, [r5, #0]
   b8c70:	1cb5      	addeq	r5, r6, #2
   b8c72:	e7ca      	b.n	b8c0a <_strtol_l.constprop.0+0x3a>
   b8c74:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8c78:	f1be 0f19 	cmp.w	lr, #25
   b8c7c:	d801      	bhi.n	b8c82 <_strtol_l.constprop.0+0xb2>
   b8c7e:	3c37      	subs	r4, #55	; 0x37
   b8c80:	e7e2      	b.n	b8c48 <_strtol_l.constprop.0+0x78>
   b8c82:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8c86:	f1be 0f19 	cmp.w	lr, #25
   b8c8a:	d804      	bhi.n	b8c96 <_strtol_l.constprop.0+0xc6>
   b8c8c:	3c57      	subs	r4, #87	; 0x57
   b8c8e:	e7db      	b.n	b8c48 <_strtol_l.constprop.0+0x78>
   b8c90:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8c94:	e7e6      	b.n	b8c64 <_strtol_l.constprop.0+0x94>
   b8c96:	f1bc 0f00 	cmp.w	ip, #0
   b8c9a:	da05      	bge.n	b8ca8 <_strtol_l.constprop.0+0xd8>
   b8c9c:	2322      	movs	r3, #34	; 0x22
   b8c9e:	6003      	str	r3, [r0, #0]
   b8ca0:	4646      	mov	r6, r8
   b8ca2:	b942      	cbnz	r2, b8cb6 <_strtol_l.constprop.0+0xe6>
   b8ca4:	4630      	mov	r0, r6
   b8ca6:	e79e      	b.n	b8be6 <_strtol_l.constprop.0+0x16>
   b8ca8:	b107      	cbz	r7, b8cac <_strtol_l.constprop.0+0xdc>
   b8caa:	4276      	negs	r6, r6
   b8cac:	2a00      	cmp	r2, #0
   b8cae:	d0f9      	beq.n	b8ca4 <_strtol_l.constprop.0+0xd4>
   b8cb0:	f1bc 0f00 	cmp.w	ip, #0
   b8cb4:	d000      	beq.n	b8cb8 <_strtol_l.constprop.0+0xe8>
   b8cb6:	1e69      	subs	r1, r5, #1
   b8cb8:	6011      	str	r1, [r2, #0]
   b8cba:	e7f3      	b.n	b8ca4 <_strtol_l.constprop.0+0xd4>
   b8cbc:	2430      	movs	r4, #48	; 0x30
   b8cbe:	2b00      	cmp	r3, #0
   b8cc0:	d1b1      	bne.n	b8c26 <_strtol_l.constprop.0+0x56>
   b8cc2:	2308      	movs	r3, #8
   b8cc4:	e7af      	b.n	b8c26 <_strtol_l.constprop.0+0x56>
   b8cc6:	2c30      	cmp	r4, #48	; 0x30
   b8cc8:	d0a5      	beq.n	b8c16 <_strtol_l.constprop.0+0x46>
   b8cca:	230a      	movs	r3, #10
   b8ccc:	e7ab      	b.n	b8c26 <_strtol_l.constprop.0+0x56>
   b8cce:	bf00      	nop
   b8cd0:	000ba1a6 	.word	0x000ba1a6

000b8cd4 <strtol>:
   b8cd4:	4613      	mov	r3, r2
   b8cd6:	460a      	mov	r2, r1
   b8cd8:	4601      	mov	r1, r0
   b8cda:	4802      	ldr	r0, [pc, #8]	; (b8ce4 <strtol+0x10>)
   b8cdc:	6800      	ldr	r0, [r0, #0]
   b8cde:	f7ff bf77 	b.w	b8bd0 <_strtol_l.constprop.0>
   b8ce2:	bf00      	nop
   b8ce4:	2003e554 	.word	0x2003e554

000b8ce8 <__register_exitproc>:
   b8ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8cec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8da8 <__register_exitproc+0xc0>
   b8cf0:	4606      	mov	r6, r0
   b8cf2:	f8d8 0000 	ldr.w	r0, [r8]
   b8cf6:	461f      	mov	r7, r3
   b8cf8:	460d      	mov	r5, r1
   b8cfa:	4691      	mov	r9, r2
   b8cfc:	f000 f856 	bl	b8dac <__retarget_lock_acquire_recursive>
   b8d00:	4b25      	ldr	r3, [pc, #148]	; (b8d98 <__register_exitproc+0xb0>)
   b8d02:	681c      	ldr	r4, [r3, #0]
   b8d04:	b934      	cbnz	r4, b8d14 <__register_exitproc+0x2c>
   b8d06:	4c25      	ldr	r4, [pc, #148]	; (b8d9c <__register_exitproc+0xb4>)
   b8d08:	601c      	str	r4, [r3, #0]
   b8d0a:	4b25      	ldr	r3, [pc, #148]	; (b8da0 <__register_exitproc+0xb8>)
   b8d0c:	b113      	cbz	r3, b8d14 <__register_exitproc+0x2c>
   b8d0e:	681b      	ldr	r3, [r3, #0]
   b8d10:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8d14:	6863      	ldr	r3, [r4, #4]
   b8d16:	2b1f      	cmp	r3, #31
   b8d18:	dd07      	ble.n	b8d2a <__register_exitproc+0x42>
   b8d1a:	f8d8 0000 	ldr.w	r0, [r8]
   b8d1e:	f000 f847 	bl	b8db0 <__retarget_lock_release_recursive>
   b8d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8d2a:	b34e      	cbz	r6, b8d80 <__register_exitproc+0x98>
   b8d2c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8d30:	b988      	cbnz	r0, b8d56 <__register_exitproc+0x6e>
   b8d32:	4b1c      	ldr	r3, [pc, #112]	; (b8da4 <__register_exitproc+0xbc>)
   b8d34:	b923      	cbnz	r3, b8d40 <__register_exitproc+0x58>
   b8d36:	f8d8 0000 	ldr.w	r0, [r8]
   b8d3a:	f000 f838 	bl	b8dae <__retarget_lock_release>
   b8d3e:	e7f0      	b.n	b8d22 <__register_exitproc+0x3a>
   b8d40:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8d44:	f7fe fb06 	bl	b7354 <malloc>
   b8d48:	2800      	cmp	r0, #0
   b8d4a:	d0f4      	beq.n	b8d36 <__register_exitproc+0x4e>
   b8d4c:	2300      	movs	r3, #0
   b8d4e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8d52:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8d56:	6863      	ldr	r3, [r4, #4]
   b8d58:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8d5c:	2201      	movs	r2, #1
   b8d5e:	409a      	lsls	r2, r3
   b8d60:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8d64:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8d68:	4313      	orrs	r3, r2
   b8d6a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8d6e:	2e02      	cmp	r6, #2
   b8d70:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8d74:	bf02      	ittt	eq
   b8d76:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8d7a:	4313      	orreq	r3, r2
   b8d7c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8d80:	6863      	ldr	r3, [r4, #4]
   b8d82:	f8d8 0000 	ldr.w	r0, [r8]
   b8d86:	1c5a      	adds	r2, r3, #1
   b8d88:	3302      	adds	r3, #2
   b8d8a:	6062      	str	r2, [r4, #4]
   b8d8c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8d90:	f000 f80e 	bl	b8db0 <__retarget_lock_release_recursive>
   b8d94:	2000      	movs	r0, #0
   b8d96:	e7c6      	b.n	b8d26 <__register_exitproc+0x3e>
   b8d98:	2003e7ec 	.word	0x2003e7ec
   b8d9c:	2003e760 	.word	0x2003e760
   b8da0:	00000000 	.word	0x00000000
   b8da4:	000b7355 	.word	0x000b7355
   b8da8:	2003e5b8 	.word	0x2003e5b8

000b8dac <__retarget_lock_acquire_recursive>:
   b8dac:	4770      	bx	lr

000b8dae <__retarget_lock_release>:
   b8dae:	4770      	bx	lr

000b8db0 <__retarget_lock_release_recursive>:
   b8db0:	4770      	bx	lr

000b8db2 <link_code_end>:
	...

000b8db4 <dynalib_user>:
   b8db4:	4c71 000b 4cad 000b 4cd5 000b 4cd9 000b     qL...L...L...L..
   b8dc4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8dd4:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b8de4:	6576 7463 726f 3a3a 4d5f 725f 6165 6c6c     vector::_M_reall
   b8df4:	636f 695f 736e 7265 0074 6e69 6f00 7475     oc_insert.in.out
   b8e04:	7000 6d77 6400 0077 7761 7400 706d 006c     .pwm.dw.aw.tmpl.
   b8e14:	4d54 4c50 6232 6859 4e69 526b 0065 7776     TMPL2bYhiNkRe.vw
   b8e24:	2500 2e32 6637 5400 6d65 6570 6172 7574     .%2.7f.Temperatu
   b8e34:	6572 4120 656c 7472 0021 4162 635f 696c     re Alert!.bA_cli
   b8e44:	6b63 6465 5300 6e65 2074 6f4e 6974 6966     cked.Sent Notifi
   b8e54:	6163 6974 6e6f 4600 6861 6572 686e 6965     cation.Fahrenhei
   b8e64:	3a74 4300 6c65 6963 7375 003a 3179 4335     t:.Celcius:.y15C
   b8e74:	4e31 4a4e 5674 304a 4734 6f5a 4149 496f     1NNJtVJ04GZoIAoI
   b8e84:	314d 4145 5f75 696c 5046 6c69 6200 796c     M1EAu_liFPil.bly
   b8e94:	6b6e 632e 6f6c 6475                          nk.cloud.

000b8e9d <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b8e9d:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b8ead:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b8ebd:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b8ecd:	6974 6c63 2065 7241 6f67 006e 7766 742d     ticle Argon.fw-t
   b8edd:	7079 0065 4d54 4c50 6232 6859 4e69 526b     ype.TMPL2bYhiNkR
   b8eed:	0065 7562 6c69 0064 754a 206e 3033 3220     e.build.Jun 30 2
   b8efd:	3230 2033 3231 353a 3a33 3231 0000           023 12:53:12...

000b8f0c <_ZL4font>:
   b8f0c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8f1c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8f2c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8f3c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8f4c:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8f5c:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8f6c:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8f7c:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8f8c:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8f9c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8fac:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8fbc:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8fcc:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8fdc:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8fec:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8ffc:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b900c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b901c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b902c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b903c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b904c:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b905c:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b906c:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b907c:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b908c:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b909c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b90ac:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b90bc:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b90cc:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b90dc:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b90ec:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b90fc:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b910c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b911c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b912c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b913c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b914c:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b915c:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b916c:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b917c:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b918c:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b919c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b91ac:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b91bc:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b91cc:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b91dc:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b91ec:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b91fc:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b920c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b921c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b922c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b923c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b924c:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b925c:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b926c:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b927c:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b928c:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b929c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b92ac:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b92bc:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b92cc:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b92dc:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b92ec:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b92fc:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b930c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b931c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b932c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b933c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b934c:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b935c:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b936c:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b937c:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b938c:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b939c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b93ac:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b93bc:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b93cc:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b93dc:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b93ec:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b93fc:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b940c <_ZTV12Adafruit_GFX>:
	...
   b941c:	61a9 000b 77cd 000b 4cf5 000b 5baf 000b     .a...w...L...[..
   b942c:	5bb1 000b 5be3 000b 5bbf 000b 5bd1 000b     .[...[...[...[..
   b943c:	5af1 000b 5baf 000b 5ddb 000b 5dd9 000b     .Z...[...]...]..
   b944c:	5bfb 000b 5c39 000b 5c73 000b 5cb9 000b     .[..9\..s\...\..
   b945c:	5cd5 000b 5d59 000b 6564 6166 6c75 2074     .\..Y]..default 
   b946c:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b947c:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b948c:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b949c:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b94a8 <_ZTVN8particle11SPISettingsE>:
	...
   b94b0:	62e5 000b 62b7 000b 62b9 000b               .b...b...b..

000b94bc <_ZL12splash1_data>:
   b94bc:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b94cc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b94dc:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b94ec:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b94fc:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b950c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b9524:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b9534:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b9544:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b9554:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b9564:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b9574:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b9584:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b9594:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b95a4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b95b4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b95c4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b95d4:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b95e4:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b95f4:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b9604:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b9614:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b9624:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b9634:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b964c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b9664:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b9674:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b9684:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b9694:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b96a4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b96b4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b96c4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b96d4:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b96e4:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b96f4:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b9704:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b9714:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b9724:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b9734:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b9744:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b9754:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b9764:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b9774:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b977c <_ZL12splash2_data>:
   b977c:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b978c:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b979c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b97b8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b97c8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b97d8:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b97e8:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b97f8:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9808:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b9818:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b9828:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b9838:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b9848:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b9858:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b9868:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9878:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9888:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9898:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b98a8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b98b8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b98c8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b98d8:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b98e8:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b98f8:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b9910:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b9920:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b9930:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b9940:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b9950:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b995c <_ZTV16Adafruit_SSD1306>:
	...
   b9964:	6339 000b 6351 000b 61a9 000b 77cd 000b     9c..Qc...a...w..
   b9974:	6365 000b 5baf 000b 5bb1 000b 5be3 000b     ec...[...[...[..
   b9984:	5bbf 000b 5bd1 000b 5af1 000b 5baf 000b     .[...[...Z...[..
   b9994:	5ddb 000b 6503 000b 6aab 000b 6a5d 000b     .]...e...j..]j..
   b99a4:	5c73 000b 5cb9 000b 5cd5 000b 5d59 000b     s\...\...\..Y]..

000b99b4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b99b4:	8000 e0c0 f8f0 fefc                         ........

000b99bc <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b99bc:	0100 0703 1f0f 7f3f                         ......?.

000b99c4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b99c4:	d5ae a880                                   ....

000b99c8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b99c8:	00d3 8d40                                   ..@.

000b99cc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b99cc:	0020 c8a1                                    ...

000b99d0 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b99d0:	40db a6a4 af2e                              .@....

000b99d6 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b99d6:	02da 8f81                                   ....

000b99da <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b99da:	12da                                         ...

000b99dd <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b99dd:	02da                                         ...

000b99e0 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b99e0:	0022 21ff 0000 0000                         "..!....

000b99e8 <_ZL22BlynkReadHandlerVector>:
   b99e8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b99f8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a08:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a18:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a28:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a38:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a48:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a58:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a68:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a78:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a88:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9a98:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9aa8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9ab8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9ac8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9ad8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9ae8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9af8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b08:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b18:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b28:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b38:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b48:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b58:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b68:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b78:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b88:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9b98:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9ba8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9bb8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9bc8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..
   b9bd8:	6ce7 000b 6ce7 000b 6ce7 000b 6ce7 000b     .l...l...l...l..

000b9be8 <_ZL23BlynkWriteHandlerVector>:
   b9be8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9bf8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c08:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c18:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c28:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c38:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c48:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c58:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c68:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c78:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c88:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9c98:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9ca8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9cb8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9cc8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9cd8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9ce8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9cf8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d08:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d18:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d28:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d38:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d48:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d58:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d68:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d78:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d88:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9d98:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9da8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9db8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9dc8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..
   b9dd8:	6ce9 000b 6ce9 000b 6ce9 000b 6ce9 000b     .l...l...l...l..

000b9de8 <_ZTV16OledWingAdafruit>:
	...
   b9df0:	6d15 000b 6d35 000b 61a9 000b 77cd 000b     .m..5m...a...w..
   b9e00:	6365 000b 5baf 000b 5bb1 000b 5be3 000b     ec...[...[...[..
   b9e10:	5bbf 000b 5bd1 000b 5af1 000b 5baf 000b     .[...[...Z...[..
   b9e20:	5ddb 000b 6503 000b 6aab 000b 6a5d 000b     .]...e...j..]j..
   b9e30:	5c73 000b 5cb9 000b 5cd5 000b 5d59 000b     s\...\...\..Y]..

000b9e40 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9e48 <_ZTVN5spark13EthernetClassE>:
	...
   b9e50:	745b 000b 7451 000b 7447 000b 743d 000b     [t..Qt..Gt..=t..
   b9e60:	7431 000b 7425 000b 76a9 000b 76b1 000b     1t..%t...v...v..
   b9e70:	7419 000b 7411 000b 7407 000b 73fd 000b     .t...t...t...s..
   b9e80:	76e1 000b                                   .v..

000b9e84 <_ZTV7TwoWire>:
	...
   b9e8c:	7479 000b 74c3 000b 749b 000b 747b 000b     yt...t...t..{t..
   b9e9c:	74a3 000b 74ab 000b 74b3 000b 74bb 000b     .t...t...t...t..

000b9eac <_ZTV9IPAddress>:
	...
   b9eb4:	754d 000b 753d 000b 753f 000b 7061 0070     Mu..=u..?u..app.

000b9ec4 <_ZTVN5spark12NetworkClassE>:
	...
   b9ecc:	7669 000b 7673 000b 767d 000b 7687 000b     iv..sv..}v...v..
   b9edc:	7691 000b 769d 000b 76a9 000b 76b1 000b     .v...v...v...v..
   b9eec:	76b9 000b 76c5 000b 76cd 000b 76d7 000b     .v...v...v...v..
   b9efc:	76e1 000b                                   .v..

000b9f00 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9f00:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b9f10:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b9f20 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9f28:	7d2d 000b 7d51 000b 8283 000b 7d5f 000b     -}..Q}......_}..
   b9f38:	7d31 000b                                   1}..

000b9f3c <_ZTV9TCPClient>:
	...
   b9f44:	7ddd 000b 7e11 000b 7ca9 000b 7cc3 000b     .}...~...|...|..
   b9f54:	8119 000b 7ced 000b 7f8f 000b 7d21 000b     .....|......!}..
   b9f64:	8021 000b 7e61 000b 7fbd 000b 81cd 000b     !...a~..........
   b9f74:	7f5d 000b 7d23 000b 7cd5 000b 7d65 000b     ]...#}...|..e}..
   b9f84:	7e41 000b 5925 252d 2d6d 6425 2554 3a48     A~..%Y-%m-%dT%H:
   b9f94:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9fa4 <_ZTV11USARTSerial>:
	...
   b9fac:	829d 000b 8309 000b 82e1 000b 77cd 000b     .............w..
   b9fbc:	82b1 000b 82cd 000b 82bf 000b 82db 000b     ................
   b9fcc:	829f 000b 82a3 000b                         ........

000b9fd4 <_ZTV9USBSerial>:
	...
   b9fdc:	8347 000b 83af 000b 8385 000b 77cd 000b     G............w..
   b9fec:	8377 000b 8349 000b 8359 000b 83a9 000b     w...I...Y.......
   b9ffc:	8369 000b 8341 000b                         i...A...

000ba004 <_ZTVN5spark9WiFiClassE>:
	...
   ba00c:	849f 000b 8495 000b 848b 000b 8441 000b     ............A...
   ba01c:	847f 000b 8473 000b 76a9 000b 76b1 000b     ....s....v...v..
   ba02c:	8467 000b 845f 000b 8455 000b 844b 000b     g..._...U...K...
   ba03c:	76e1 000b                                   .v..

000ba040 <_ZSt7nothrow>:
	...

000ba041 <_ZTSSt19_Sp_make_shared_tag>:
   ba041:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   ba051:	6572 5f64 6174 0067 0000                     red_tag....

000ba05c <_ZTISt19_Sp_make_shared_tag>:
   ba05c:	a09c 000b a041 000b                         ....A...

000ba064 <_ZTIN10__cxxabiv117__class_type_infoE>:
   ba064:	a0fc 000b a070 000b a120 000b               ....p... ...

000ba070 <_ZTSN10__cxxabiv117__class_type_infoE>:
   ba070:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba080:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba090:	0045 0000                                   E...

000ba094 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba094:	0000 0000 a064 000b 892d 000b 8941 000b     ....d...-...A...
   ba0a4:	8ad5 000b 8ad5 000b 89ab 000b 88ed 000b     ................
   ba0b4:	8993 000b 8955 000b 891f 000b               ....U.......

000ba0c0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba0c0:	a0fc 000b a0cc 000b a064 000b               ........d...

000ba0cc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba0cc:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba0dc:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba0ec:	666e 456f 0000 0000                         nfoE....

000ba0f4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba0f4:	0000 0000 a0c0 000b 89d5 000b 89e9 000b     ................
   ba104:	8ad5 000b 8ad5 000b 89ab 000b 88ed 000b     ................
   ba114:	8aa9 000b 8a35 000b 89fd 000b               ....5.......

000ba120 <_ZTISt9type_info>:
   ba120:	a09c 000b a128 000b                         ....(...

000ba128 <_ZTSSt9type_info>:
   ba128:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba138:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba148:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   ba158:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   ba168:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   ba178:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   ba188:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   ba198:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000ba1a5 <_ctype_>:
   ba1a5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba1b5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba1c5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba1d5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba1e5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba1f5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba205:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba215:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba225:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba2a6 <link_const_data_end>:
	...

000ba2a8 <link_constructors_location>:
   ba2a8:	000b5a9d 	.word	0x000b5a9d
   ba2ac:	000b73ed 	.word	0x000b73ed
   ba2b0:	000b7465 	.word	0x000b7465
   ba2b4:	000b7659 	.word	0x000b7659
   ba2b8:	000b77b9 	.word	0x000b77b9
   ba2bc:	000b78f5 	.word	0x000b78f5
   ba2c0:	000b7c85 	.word	0x000b7c85
   ba2c4:	000b8289 	.word	0x000b8289
   ba2c8:	000b84a9 	.word	0x000b84a9
