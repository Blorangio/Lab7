
/Users/admin/Documents/CTD_2023/Labs/Lab7/target/5.3.0/argon/Lab7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006238  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000ba258  000ba258  0000a258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .note.gnu.build-id 00000024  000ba260  000ba260  0000a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         0000006c  2003e550  000ba284  0000e550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000234  2003e5c0  2003e5c0  0001e5c0  2**3
                  ALLOC
  7 .backup       00000004  2003f400  000ba2f0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .module_info_product 00000006  000ba2f4  000ba2f4  0001a2f4  2**0
                  ALLOC
  9 .module_info_suffix 00000024  000ba2fa  000ba2fa  0001a2fa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .module_info_crc 00000004  000ba31e  000ba31e  0001a31e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_info   00165e47  00000000  00000000  0001a322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00018a4a  00000000  00000000  00180169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0004b535  00000000  00000000  00198bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003600  00000000  00000000  001e40e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 0000c370  00000000  00000000  001e76e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00044575  00000000  00000000  001f3a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005701f  00000000  00000000  00237fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00149aad  00000000  00000000  0028efec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_frame  0000a3bc  00000000  00000000  003d8a9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_d2uiz>:
   b48cc:	004a      	lsls	r2, r1, #1
   b48ce:	d211      	bcs.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b48d4:	d211      	bcs.n	b48fa <__aeabi_d2uiz+0x2e>
   b48d6:	d50d      	bpl.n	b48f4 <__aeabi_d2uiz+0x28>
   b48d8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b48dc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b48e0:	d40e      	bmi.n	b4900 <__aeabi_d2uiz+0x34>
   b48e2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b48e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b48ea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b48ee:	fa23 f002 	lsr.w	r0, r3, r2
   b48f2:	4770      	bx	lr
   b48f4:	f04f 0000 	mov.w	r0, #0
   b48f8:	4770      	bx	lr
   b48fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b48fe:	d102      	bne.n	b4906 <__aeabi_d2uiz+0x3a>
   b4900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4904:	4770      	bx	lr
   b4906:	f04f 0000 	mov.w	r0, #0
   b490a:	4770      	bx	lr

000b490c <__aeabi_uldivmod>:
   b490c:	b953      	cbnz	r3, b4924 <__aeabi_uldivmod+0x18>
   b490e:	b94a      	cbnz	r2, b4924 <__aeabi_uldivmod+0x18>
   b4910:	2900      	cmp	r1, #0
   b4912:	bf08      	it	eq
   b4914:	2800      	cmpeq	r0, #0
   b4916:	bf1c      	itt	ne
   b4918:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b491c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b4920:	f000 b992 	b.w	b4c48 <__aeabi_idiv0>
   b4924:	f1ad 0c08 	sub.w	ip, sp, #8
   b4928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b492c:	f000 f824 	bl	b4978 <__udivmoddi4>
   b4930:	f8dd e004 	ldr.w	lr, [sp, #4]
   b4934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b4938:	b004      	add	sp, #16
   b493a:	4770      	bx	lr

000b493c <__aeabi_d2ulz>:
   b493c:	b5d0      	push	{r4, r6, r7, lr}
   b493e:	4b0c      	ldr	r3, [pc, #48]	; (b4970 <__aeabi_d2ulz+0x34>)
   b4940:	2200      	movs	r2, #0
   b4942:	4606      	mov	r6, r0
   b4944:	460f      	mov	r7, r1
   b4946:	f7ff fd27 	bl	b4398 <__aeabi_dmul>
   b494a:	f7ff ffbf 	bl	b48cc <__aeabi_d2uiz>
   b494e:	4604      	mov	r4, r0
   b4950:	f7ff fca8 	bl	b42a4 <__aeabi_ui2d>
   b4954:	4b07      	ldr	r3, [pc, #28]	; (b4974 <__aeabi_d2ulz+0x38>)
   b4956:	2200      	movs	r2, #0
   b4958:	f7ff fd1e 	bl	b4398 <__aeabi_dmul>
   b495c:	4602      	mov	r2, r0
   b495e:	460b      	mov	r3, r1
   b4960:	4630      	mov	r0, r6
   b4962:	4639      	mov	r1, r7
   b4964:	f7ff fb60 	bl	b4028 <__aeabi_dsub>
   b4968:	f7ff ffb0 	bl	b48cc <__aeabi_d2uiz>
   b496c:	4621      	mov	r1, r4
   b496e:	bdd0      	pop	{r4, r6, r7, pc}
   b4970:	3df00000 	.word	0x3df00000
   b4974:	41f00000 	.word	0x41f00000

000b4978 <__udivmoddi4>:
   b4978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b497c:	9d08      	ldr	r5, [sp, #32]
   b497e:	4604      	mov	r4, r0
   b4980:	468e      	mov	lr, r1
   b4982:	2b00      	cmp	r3, #0
   b4984:	d14d      	bne.n	b4a22 <__udivmoddi4+0xaa>
   b4986:	428a      	cmp	r2, r1
   b4988:	4694      	mov	ip, r2
   b498a:	d969      	bls.n	b4a60 <__udivmoddi4+0xe8>
   b498c:	fab2 f282 	clz	r2, r2
   b4990:	b152      	cbz	r2, b49a8 <__udivmoddi4+0x30>
   b4992:	fa01 f302 	lsl.w	r3, r1, r2
   b4996:	f1c2 0120 	rsb	r1, r2, #32
   b499a:	fa20 f101 	lsr.w	r1, r0, r1
   b499e:	fa0c fc02 	lsl.w	ip, ip, r2
   b49a2:	ea41 0e03 	orr.w	lr, r1, r3
   b49a6:	4094      	lsls	r4, r2
   b49a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b49ac:	0c21      	lsrs	r1, r4, #16
   b49ae:	fbbe f6f8 	udiv	r6, lr, r8
   b49b2:	fa1f f78c 	uxth.w	r7, ip
   b49b6:	fb08 e316 	mls	r3, r8, r6, lr
   b49ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b49be:	fb06 f107 	mul.w	r1, r6, r7
   b49c2:	4299      	cmp	r1, r3
   b49c4:	d90a      	bls.n	b49dc <__udivmoddi4+0x64>
   b49c6:	eb1c 0303 	adds.w	r3, ip, r3
   b49ca:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b49ce:	f080 811f 	bcs.w	b4c10 <__udivmoddi4+0x298>
   b49d2:	4299      	cmp	r1, r3
   b49d4:	f240 811c 	bls.w	b4c10 <__udivmoddi4+0x298>
   b49d8:	3e02      	subs	r6, #2
   b49da:	4463      	add	r3, ip
   b49dc:	1a5b      	subs	r3, r3, r1
   b49de:	b2a4      	uxth	r4, r4
   b49e0:	fbb3 f0f8 	udiv	r0, r3, r8
   b49e4:	fb08 3310 	mls	r3, r8, r0, r3
   b49e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b49ec:	fb00 f707 	mul.w	r7, r0, r7
   b49f0:	42a7      	cmp	r7, r4
   b49f2:	d90a      	bls.n	b4a0a <__udivmoddi4+0x92>
   b49f4:	eb1c 0404 	adds.w	r4, ip, r4
   b49f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b49fc:	f080 810a 	bcs.w	b4c14 <__udivmoddi4+0x29c>
   b4a00:	42a7      	cmp	r7, r4
   b4a02:	f240 8107 	bls.w	b4c14 <__udivmoddi4+0x29c>
   b4a06:	4464      	add	r4, ip
   b4a08:	3802      	subs	r0, #2
   b4a0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b4a0e:	1be4      	subs	r4, r4, r7
   b4a10:	2600      	movs	r6, #0
   b4a12:	b11d      	cbz	r5, b4a1c <__udivmoddi4+0xa4>
   b4a14:	40d4      	lsrs	r4, r2
   b4a16:	2300      	movs	r3, #0
   b4a18:	e9c5 4300 	strd	r4, r3, [r5]
   b4a1c:	4631      	mov	r1, r6
   b4a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a22:	428b      	cmp	r3, r1
   b4a24:	d909      	bls.n	b4a3a <__udivmoddi4+0xc2>
   b4a26:	2d00      	cmp	r5, #0
   b4a28:	f000 80ef 	beq.w	b4c0a <__udivmoddi4+0x292>
   b4a2c:	2600      	movs	r6, #0
   b4a2e:	e9c5 0100 	strd	r0, r1, [r5]
   b4a32:	4630      	mov	r0, r6
   b4a34:	4631      	mov	r1, r6
   b4a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4a3a:	fab3 f683 	clz	r6, r3
   b4a3e:	2e00      	cmp	r6, #0
   b4a40:	d14a      	bne.n	b4ad8 <__udivmoddi4+0x160>
   b4a42:	428b      	cmp	r3, r1
   b4a44:	d302      	bcc.n	b4a4c <__udivmoddi4+0xd4>
   b4a46:	4282      	cmp	r2, r0
   b4a48:	f200 80f9 	bhi.w	b4c3e <__udivmoddi4+0x2c6>
   b4a4c:	1a84      	subs	r4, r0, r2
   b4a4e:	eb61 0303 	sbc.w	r3, r1, r3
   b4a52:	2001      	movs	r0, #1
   b4a54:	469e      	mov	lr, r3
   b4a56:	2d00      	cmp	r5, #0
   b4a58:	d0e0      	beq.n	b4a1c <__udivmoddi4+0xa4>
   b4a5a:	e9c5 4e00 	strd	r4, lr, [r5]
   b4a5e:	e7dd      	b.n	b4a1c <__udivmoddi4+0xa4>
   b4a60:	b902      	cbnz	r2, b4a64 <__udivmoddi4+0xec>
   b4a62:	deff      	udf	#255	; 0xff
   b4a64:	fab2 f282 	clz	r2, r2
   b4a68:	2a00      	cmp	r2, #0
   b4a6a:	f040 8092 	bne.w	b4b92 <__udivmoddi4+0x21a>
   b4a6e:	eba1 010c 	sub.w	r1, r1, ip
   b4a72:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4a76:	fa1f fe8c 	uxth.w	lr, ip
   b4a7a:	2601      	movs	r6, #1
   b4a7c:	0c20      	lsrs	r0, r4, #16
   b4a7e:	fbb1 f3f7 	udiv	r3, r1, r7
   b4a82:	fb07 1113 	mls	r1, r7, r3, r1
   b4a86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4a8a:	fb0e f003 	mul.w	r0, lr, r3
   b4a8e:	4288      	cmp	r0, r1
   b4a90:	d908      	bls.n	b4aa4 <__udivmoddi4+0x12c>
   b4a92:	eb1c 0101 	adds.w	r1, ip, r1
   b4a96:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b4a9a:	d202      	bcs.n	b4aa2 <__udivmoddi4+0x12a>
   b4a9c:	4288      	cmp	r0, r1
   b4a9e:	f200 80cb 	bhi.w	b4c38 <__udivmoddi4+0x2c0>
   b4aa2:	4643      	mov	r3, r8
   b4aa4:	1a09      	subs	r1, r1, r0
   b4aa6:	b2a4      	uxth	r4, r4
   b4aa8:	fbb1 f0f7 	udiv	r0, r1, r7
   b4aac:	fb07 1110 	mls	r1, r7, r0, r1
   b4ab0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b4ab4:	fb0e fe00 	mul.w	lr, lr, r0
   b4ab8:	45a6      	cmp	lr, r4
   b4aba:	d908      	bls.n	b4ace <__udivmoddi4+0x156>
   b4abc:	eb1c 0404 	adds.w	r4, ip, r4
   b4ac0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b4ac4:	d202      	bcs.n	b4acc <__udivmoddi4+0x154>
   b4ac6:	45a6      	cmp	lr, r4
   b4ac8:	f200 80bb 	bhi.w	b4c42 <__udivmoddi4+0x2ca>
   b4acc:	4608      	mov	r0, r1
   b4ace:	eba4 040e 	sub.w	r4, r4, lr
   b4ad2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b4ad6:	e79c      	b.n	b4a12 <__udivmoddi4+0x9a>
   b4ad8:	f1c6 0720 	rsb	r7, r6, #32
   b4adc:	40b3      	lsls	r3, r6
   b4ade:	fa22 fc07 	lsr.w	ip, r2, r7
   b4ae2:	ea4c 0c03 	orr.w	ip, ip, r3
   b4ae6:	fa20 f407 	lsr.w	r4, r0, r7
   b4aea:	fa01 f306 	lsl.w	r3, r1, r6
   b4aee:	431c      	orrs	r4, r3
   b4af0:	40f9      	lsrs	r1, r7
   b4af2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b4af6:	fa00 f306 	lsl.w	r3, r0, r6
   b4afa:	fbb1 f8f9 	udiv	r8, r1, r9
   b4afe:	0c20      	lsrs	r0, r4, #16
   b4b00:	fa1f fe8c 	uxth.w	lr, ip
   b4b04:	fb09 1118 	mls	r1, r9, r8, r1
   b4b08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b4b0c:	fb08 f00e 	mul.w	r0, r8, lr
   b4b10:	4288      	cmp	r0, r1
   b4b12:	fa02 f206 	lsl.w	r2, r2, r6
   b4b16:	d90b      	bls.n	b4b30 <__udivmoddi4+0x1b8>
   b4b18:	eb1c 0101 	adds.w	r1, ip, r1
   b4b1c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b4b20:	f080 8088 	bcs.w	b4c34 <__udivmoddi4+0x2bc>
   b4b24:	4288      	cmp	r0, r1
   b4b26:	f240 8085 	bls.w	b4c34 <__udivmoddi4+0x2bc>
   b4b2a:	f1a8 0802 	sub.w	r8, r8, #2
   b4b2e:	4461      	add	r1, ip
   b4b30:	1a09      	subs	r1, r1, r0
   b4b32:	b2a4      	uxth	r4, r4
   b4b34:	fbb1 f0f9 	udiv	r0, r1, r9
   b4b38:	fb09 1110 	mls	r1, r9, r0, r1
   b4b3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b4b40:	fb00 fe0e 	mul.w	lr, r0, lr
   b4b44:	458e      	cmp	lr, r1
   b4b46:	d908      	bls.n	b4b5a <__udivmoddi4+0x1e2>
   b4b48:	eb1c 0101 	adds.w	r1, ip, r1
   b4b4c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b4b50:	d26c      	bcs.n	b4c2c <__udivmoddi4+0x2b4>
   b4b52:	458e      	cmp	lr, r1
   b4b54:	d96a      	bls.n	b4c2c <__udivmoddi4+0x2b4>
   b4b56:	3802      	subs	r0, #2
   b4b58:	4461      	add	r1, ip
   b4b5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b4b5e:	fba0 9402 	umull	r9, r4, r0, r2
   b4b62:	eba1 010e 	sub.w	r1, r1, lr
   b4b66:	42a1      	cmp	r1, r4
   b4b68:	46c8      	mov	r8, r9
   b4b6a:	46a6      	mov	lr, r4
   b4b6c:	d356      	bcc.n	b4c1c <__udivmoddi4+0x2a4>
   b4b6e:	d053      	beq.n	b4c18 <__udivmoddi4+0x2a0>
   b4b70:	b15d      	cbz	r5, b4b8a <__udivmoddi4+0x212>
   b4b72:	ebb3 0208 	subs.w	r2, r3, r8
   b4b76:	eb61 010e 	sbc.w	r1, r1, lr
   b4b7a:	fa01 f707 	lsl.w	r7, r1, r7
   b4b7e:	fa22 f306 	lsr.w	r3, r2, r6
   b4b82:	40f1      	lsrs	r1, r6
   b4b84:	431f      	orrs	r7, r3
   b4b86:	e9c5 7100 	strd	r7, r1, [r5]
   b4b8a:	2600      	movs	r6, #0
   b4b8c:	4631      	mov	r1, r6
   b4b8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4b92:	f1c2 0320 	rsb	r3, r2, #32
   b4b96:	40d8      	lsrs	r0, r3
   b4b98:	fa0c fc02 	lsl.w	ip, ip, r2
   b4b9c:	fa21 f303 	lsr.w	r3, r1, r3
   b4ba0:	4091      	lsls	r1, r2
   b4ba2:	4301      	orrs	r1, r0
   b4ba4:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b4ba8:	fa1f fe8c 	uxth.w	lr, ip
   b4bac:	fbb3 f0f7 	udiv	r0, r3, r7
   b4bb0:	fb07 3610 	mls	r6, r7, r0, r3
   b4bb4:	0c0b      	lsrs	r3, r1, #16
   b4bb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b4bba:	fb00 f60e 	mul.w	r6, r0, lr
   b4bbe:	429e      	cmp	r6, r3
   b4bc0:	fa04 f402 	lsl.w	r4, r4, r2
   b4bc4:	d908      	bls.n	b4bd8 <__udivmoddi4+0x260>
   b4bc6:	eb1c 0303 	adds.w	r3, ip, r3
   b4bca:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b4bce:	d22f      	bcs.n	b4c30 <__udivmoddi4+0x2b8>
   b4bd0:	429e      	cmp	r6, r3
   b4bd2:	d92d      	bls.n	b4c30 <__udivmoddi4+0x2b8>
   b4bd4:	3802      	subs	r0, #2
   b4bd6:	4463      	add	r3, ip
   b4bd8:	1b9b      	subs	r3, r3, r6
   b4bda:	b289      	uxth	r1, r1
   b4bdc:	fbb3 f6f7 	udiv	r6, r3, r7
   b4be0:	fb07 3316 	mls	r3, r7, r6, r3
   b4be4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b4be8:	fb06 f30e 	mul.w	r3, r6, lr
   b4bec:	428b      	cmp	r3, r1
   b4bee:	d908      	bls.n	b4c02 <__udivmoddi4+0x28a>
   b4bf0:	eb1c 0101 	adds.w	r1, ip, r1
   b4bf4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b4bf8:	d216      	bcs.n	b4c28 <__udivmoddi4+0x2b0>
   b4bfa:	428b      	cmp	r3, r1
   b4bfc:	d914      	bls.n	b4c28 <__udivmoddi4+0x2b0>
   b4bfe:	3e02      	subs	r6, #2
   b4c00:	4461      	add	r1, ip
   b4c02:	1ac9      	subs	r1, r1, r3
   b4c04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b4c08:	e738      	b.n	b4a7c <__udivmoddi4+0x104>
   b4c0a:	462e      	mov	r6, r5
   b4c0c:	4628      	mov	r0, r5
   b4c0e:	e705      	b.n	b4a1c <__udivmoddi4+0xa4>
   b4c10:	4606      	mov	r6, r0
   b4c12:	e6e3      	b.n	b49dc <__udivmoddi4+0x64>
   b4c14:	4618      	mov	r0, r3
   b4c16:	e6f8      	b.n	b4a0a <__udivmoddi4+0x92>
   b4c18:	454b      	cmp	r3, r9
   b4c1a:	d2a9      	bcs.n	b4b70 <__udivmoddi4+0x1f8>
   b4c1c:	ebb9 0802 	subs.w	r8, r9, r2
   b4c20:	eb64 0e0c 	sbc.w	lr, r4, ip
   b4c24:	3801      	subs	r0, #1
   b4c26:	e7a3      	b.n	b4b70 <__udivmoddi4+0x1f8>
   b4c28:	4646      	mov	r6, r8
   b4c2a:	e7ea      	b.n	b4c02 <__udivmoddi4+0x28a>
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	e794      	b.n	b4b5a <__udivmoddi4+0x1e2>
   b4c30:	4640      	mov	r0, r8
   b4c32:	e7d1      	b.n	b4bd8 <__udivmoddi4+0x260>
   b4c34:	46d0      	mov	r8, sl
   b4c36:	e77b      	b.n	b4b30 <__udivmoddi4+0x1b8>
   b4c38:	3b02      	subs	r3, #2
   b4c3a:	4461      	add	r1, ip
   b4c3c:	e732      	b.n	b4aa4 <__udivmoddi4+0x12c>
   b4c3e:	4630      	mov	r0, r6
   b4c40:	e709      	b.n	b4a56 <__udivmoddi4+0xde>
   b4c42:	4464      	add	r4, ip
   b4c44:	3802      	subs	r0, #2
   b4c46:	e742      	b.n	b4ace <__udivmoddi4+0x156>

000b4c48 <__aeabi_idiv0>:
   b4c48:	4770      	bx	lr
   b4c4a:	bf00      	nop

000b4c4c <strcmp>:
   b4c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
   b4c50:	f811 3b01 	ldrb.w	r3, [r1], #1
   b4c54:	2a01      	cmp	r2, #1
   b4c56:	bf28      	it	cs
   b4c58:	429a      	cmpcs	r2, r3
   b4c5a:	d0f7      	beq.n	b4c4c <strcmp>
   b4c5c:	1ad0      	subs	r0, r2, r3
   b4c5e:	4770      	bx	lr

000b4c60 <strlen>:
   b4c60:	4603      	mov	r3, r0
   b4c62:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4c66:	2a00      	cmp	r2, #0
   b4c68:	d1fb      	bne.n	b4c62 <strlen+0x2>
   b4c6a:	1a18      	subs	r0, r3, r0
   b4c6c:	3801      	subs	r0, #1
   b4c6e:	4770      	bx	lr

000b4c70 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4c70:	4809      	ldr	r0, [pc, #36]	; (b4c98 <module_user_pre_init+0x28>)
   b4c72:	490a      	ldr	r1, [pc, #40]	; (b4c9c <module_user_pre_init+0x2c>)
   b4c74:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4c76:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4c78:	d005      	beq.n	b4c86 <module_user_pre_init+0x16>
   b4c7a:	4a09      	ldr	r2, [pc, #36]	; (b4ca0 <module_user_pre_init+0x30>)
   b4c7c:	4282      	cmp	r2, r0
   b4c7e:	d002      	beq.n	b4c86 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4c80:	1a12      	subs	r2, r2, r0
   b4c82:	f003 ff1d 	bl	b8ac0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4c86:	4807      	ldr	r0, [pc, #28]	; (b4ca4 <module_user_pre_init+0x34>)
   b4c88:	4a07      	ldr	r2, [pc, #28]	; (b4ca8 <module_user_pre_init+0x38>)
   b4c8a:	2100      	movs	r1, #0
   b4c8c:	1a12      	subs	r2, r2, r0
   b4c8e:	f003 ff25 	bl	b8adc <memset>
    return &link_global_data_start;
}
   b4c92:	4801      	ldr	r0, [pc, #4]	; (b4c98 <module_user_pre_init+0x28>)
   b4c94:	bd08      	pop	{r3, pc}
   b4c96:	bf00      	nop
   b4c98:	2003e550 	.word	0x2003e550
   b4c9c:	000ba284 	.word	0x000ba284
   b4ca0:	2003e5bc 	.word	0x2003e5bc
   b4ca4:	2003e5c0 	.word	0x2003e5c0
   b4ca8:	2003e7f4 	.word	0x2003e7f4

000b4cac <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4cac:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cae:	4e07      	ldr	r6, [pc, #28]	; (b4ccc <module_user_init+0x20>)
   b4cb0:	4c07      	ldr	r4, [pc, #28]	; (b4cd0 <module_user_init+0x24>)
    module_user_init_hook();
   b4cb2:	f003 fc73 	bl	b859c <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cb6:	1ba4      	subs	r4, r4, r6
   b4cb8:	08a4      	lsrs	r4, r4, #2
   b4cba:	2500      	movs	r5, #0
   b4cbc:	42ac      	cmp	r4, r5
   b4cbe:	d100      	bne.n	b4cc2 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4cc0:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4cc2:	f856 3b04 	ldr.w	r3, [r6], #4
   b4cc6:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4cc8:	3501      	adds	r5, #1
   b4cca:	e7f7      	b.n	b4cbc <module_user_init+0x10>
   b4ccc:	000ba234 	.word	0x000ba234
   b4cd0:	000ba258 	.word	0x000ba258

000b4cd4 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4cd4:	f000 be38 	b.w	b5948 <setup>

000b4cd8 <module_user_loop>:
}

void module_user_loop() {
   b4cd8:	b508      	push	{r3, lr}
    loop();
   b4cda:	f000 fdf3 	bl	b58c4 <loop>
    _post_loop();
}
   b4cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4ce2:	f003 bc13 	b.w	b850c <_post_loop>

000b4ce6 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4ce6:	f002 bb05 	b.w	b72f4 <malloc>

000b4cea <_Znaj>:
   b4cea:	f002 bb03 	b.w	b72f4 <malloc>

000b4cee <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4cee:	f002 bb09 	b.w	b7304 <free>
	...

000b4cf4 <__cxa_pure_virtual>:
int __wrap_printf(const char* fmt, ...) {
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b4cf4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b4cf6:	4a03      	ldr	r2, [pc, #12]	; (b4d04 <__cxa_pure_virtual+0x10>)
   b4cf8:	4903      	ldr	r1, [pc, #12]	; (b4d08 <__cxa_pure_virtual+0x14>)
   b4cfa:	200c      	movs	r0, #12
   b4cfc:	f002 fa4e 	bl	b719c <panic_>
  while (1);
   b4d00:	e7fe      	b.n	b4d00 <__cxa_pure_virtual+0xc>
   b4d02:	bf00      	nop
   b4d04:	000b6e1d 	.word	0x000b6e1d
   b4d08:	000b8d68 	.word	0x000b8d68

000b4d0c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4d0c:	7800      	ldrb	r0, [r0, #0]
   b4d0e:	fab0 f080 	clz	r0, r0
   b4d12:	0940      	lsrs	r0, r0, #5
   b4d14:	4770      	bx	lr

000b4d16 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4d16:	2301      	movs	r3, #1
   b4d18:	7003      	strb	r3, [r0, #0]
   b4d1a:	4770      	bx	lr
   b4d1c:	0000      	movs	r0, r0
	...

000b4d20 <_ZN11Temperature6updateEv>:
  {
    pin = PIN;
    pinMode(pin, INPUT);
    updates.push_back(std::bind(&Temperature::update, this));
  }
  void update()
   b4d20:	b510      	push	{r4, lr}
   b4d22:	4604      	mov	r4, r0
  {
    val = analogRead(pin);
   b4d24:	8b00      	ldrh	r0, [r0, #24]
   b4d26:	f003 fce6 	bl	b86f6 <analogRead>
   b4d2a:	6020      	str	r0, [r4, #0]
    celcius = (((val * 3.3) / 4095.0) - 0.5) * 100;
   b4d2c:	f7ff faca 	bl	b42c4 <__aeabi_i2d>
   b4d30:	a316      	add	r3, pc, #88	; (adr r3, b4d8c <_ZN11Temperature6updateEv+0x6c>)
   b4d32:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d36:	f7ff fb2f 	bl	b4398 <__aeabi_dmul>
   b4d3a:	a316      	add	r3, pc, #88	; (adr r3, b4d94 <_ZN11Temperature6updateEv+0x74>)
   b4d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d40:	f7ff fc54 	bl	b45ec <__aeabi_ddiv>
   b4d44:	4b0e      	ldr	r3, [pc, #56]	; (b4d80 <_ZN11Temperature6updateEv+0x60>)
   b4d46:	2200      	movs	r2, #0
   b4d48:	f7ff f96e 	bl	b4028 <__aeabi_dsub>
   b4d4c:	4b0d      	ldr	r3, [pc, #52]	; (b4d84 <_ZN11Temperature6updateEv+0x64>)
   b4d4e:	2200      	movs	r2, #0
   b4d50:	f7ff fb22 	bl	b4398 <__aeabi_dmul>
   b4d54:	4602      	mov	r2, r0
   b4d56:	460b      	mov	r3, r1
   b4d58:	e9c4 2302 	strd	r2, r3, [r4, #8]
    fahrenheit = celcius * 1.8 + 32;
   b4d5c:	a306      	add	r3, pc, #24	; (adr r3, b4d78 <_ZN11Temperature6updateEv+0x58>)
   b4d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4d62:	f7ff fb19 	bl	b4398 <__aeabi_dmul>
   b4d66:	4b08      	ldr	r3, [pc, #32]	; (b4d88 <_ZN11Temperature6updateEv+0x68>)
   b4d68:	2200      	movs	r2, #0
   b4d6a:	f7ff f95f 	bl	b402c <__adddf3>
   b4d6e:	e9c4 0104 	strd	r0, r1, [r4, #16]
  }
   b4d72:	bd10      	pop	{r4, pc}
   b4d74:	f3af 8000 	nop.w
   b4d78:	cccccccd 	.word	0xcccccccd
   b4d7c:	3ffccccc 	.word	0x3ffccccc
   b4d80:	3fe00000 	.word	0x3fe00000
   b4d84:	40590000 	.word	0x40590000
   b4d88:	40400000 	.word	0x40400000
   b4d8c:	66666666 	.word	0x66666666
   b4d90:	400a6666 	.word	0x400a6666
   b4d94:	00000000 	.word	0x00000000
   b4d98:	40affe00 	.word	0x40affe00

000b4d9c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE9_M_invokeERKSt9_Any_data>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4d9c:	b410      	push	{r4}
	    return __source._M_access<_Functor*>();
   b4d9e:	6803      	ldr	r3, [r0, #0]
  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_deref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    {
      return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
   b4da0:	685a      	ldr	r2, [r3, #4]
   b4da2:	6899      	ldr	r1, [r3, #8]
   b4da4:	681b      	ldr	r3, [r3, #0]
   b4da6:	1054      	asrs	r4, r2, #1
   b4da8:	eb01 0062 	add.w	r0, r1, r2, asr #1
   b4dac:	07d2      	lsls	r2, r2, #31
   b4dae:	bf48      	it	mi
   b4db0:	590a      	ldrmi	r2, [r1, r4]
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4db2:	f85d 4b04 	ldr.w	r4, [sp], #4
   b4db6:	bf48      	it	mi
   b4db8:	58d3      	ldrmi	r3, [r2, r3]
   b4dba:	4718      	bx	r3

000b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
   b4dbc:	b513      	push	{r0, r1, r4, lr}
   b4dbe:	460a      	mov	r2, r1
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4dc0:	4603      	mov	r3, r0
   b4dc2:	b1b0      	cbz	r0, b4df2 <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0+0x36>
    _Function_base() : _M_manager(nullptr) { }
   b4dc4:	2100      	movs	r1, #0
   b4dc6:	6081      	str	r1, [r0, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4dcc:	466c      	mov	r4, sp
   b4dce:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
   b4dd6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4dda:	e894 0003 	ldmia.w	r4, {r0, r1}
   b4dde:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b4de2:	6898      	ldr	r0, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4de4:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b4de6:	6090      	str	r0, [r2, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b4de8:	6099      	str	r1, [r3, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4dea:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4dec:	68d8      	ldr	r0, [r3, #12]
   b4dee:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4df0:	60d9      	str	r1, [r3, #12]
   b4df2:	b002      	add	sp, #8
   b4df4:	bd10      	pop	{r4, pc}

000b4df6 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation>:
	switch (__op)
   b4df6:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4df8:	b538      	push	{r3, r4, r5, lr}
   b4dfa:	4604      	mov	r4, r0
	switch (__op)
   b4dfc:	d102      	bne.n	b4e04 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4dfe:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4e00:	6023      	str	r3, [r4, #0]
	}
   b4e02:	e003      	b.n	b4e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	  switch (__op)
   b4e04:	2a02      	cmp	r2, #2
   b4e06:	d003      	beq.n	b4e10 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x1a>
   b4e08:	2a03      	cmp	r2, #3
   b4e0a:	d00d      	beq.n	b4e28 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x32>
      }
   b4e0c:	2000      	movs	r0, #0
   b4e0e:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e10:	200c      	movs	r0, #12
	  __dest._M_access<_Functor*>() =
   b4e12:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4e14:	f7ff ff67 	bl	b4ce6 <_Znwj>
   b4e18:	4603      	mov	r3, r0
   b4e1a:	2800      	cmp	r0, #0
   b4e1c:	d0f0      	beq.n	b4e00 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
   b4e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   b4e22:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   b4e26:	e7eb      	b.n	b4e00 <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4e28:	6800      	ldr	r0, [r0, #0]
   b4e2a:	2800      	cmp	r0, #0
   b4e2c:	d0ee      	beq.n	b4e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
   b4e2e:	210c      	movs	r1, #12
   b4e30:	f7ff ff5d 	bl	b4cee <_ZdlPvj>
   b4e34:	e7ea      	b.n	b4e0c <_ZNSt17_Function_handlerIFvvESt5_BindIFM11TemperatureFvvEPS2_EEE10_M_managerERSt9_Any_dataRKS9_St18_Manager_operation+0x16>
	...

000b4e38 <_ZN10CloudClass7processEv.isra.0>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
   b4e38:	b508      	push	{r3, lr}
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b4e3a:	f001 fff7 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b4e3e:	4b03      	ldr	r3, [pc, #12]	; (b4e4c <_ZN10CloudClass7processEv.isra.0+0x14>)
   b4e40:	6018      	str	r0, [r3, #0]
            application_checkin();
            return spark_process();
    }
   b4e42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            return spark_process();
   b4e46:	f002 b9e5 	b.w	b7214 <spark_process>
   b4e4a:	bf00      	nop
   b4e4c:	2003e72c 	.word	0x2003e72c

000b4e50 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4e50:	b510      	push	{r4, lr}
      if (_M_manager)
   b4e52:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4e54:	4604      	mov	r4, r0
      if (_M_manager)
   b4e56:	b113      	cbz	r3, b4e5e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4e58:	2203      	movs	r2, #3
   b4e5a:	4601      	mov	r1, r0
   b4e5c:	4798      	blx	r3
    }
   b4e5e:	4620      	mov	r0, r4
   b4e60:	bd10      	pop	{r4, pc}

000b4e62 <_ZNK10BlynkParam8iterator5asIntEv>:
#endif
#if !defined(BLYNK_NO_FLOAT)
        double      asDouble() const    { if(!isValid()) return 0; return atof(ptr); }
        float       asFloat() const     { if(!isValid()) return 0; return atof(ptr); }
#endif
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e62:	6803      	ldr	r3, [r0, #0]
   b4e64:	b12b      	cbz	r3, b4e72 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
   b4e66:	6842      	ldr	r2, [r0, #4]
   b4e68:	4293      	cmp	r3, r2
   b4e6a:	d202      	bcs.n	b4e72 <_ZNK10BlynkParam8iterator5asIntEv+0x10>
        int         asInt() const       { if(!isValid()) return 0; return atoi(ptr); }
   b4e6c:	4618      	mov	r0, r3
   b4e6e:	f003 be1f 	b.w	b8ab0 <atoi>
   b4e72:	2000      	movs	r0, #0
   b4e74:	4770      	bx	lr

000b4e76 <_ZN10BlynkParam8iteratorppEv>:
        bool isEmpty() const            { if(!isValid()) return true; return *ptr == '\0'; }

        bool operator <  (const iterator& it) const { return ptr < it.ptr; }
        bool operator >= (const iterator& it) const { return ptr >= it.ptr; }

        iterator& operator ++() {
   b4e76:	b538      	push	{r3, r4, r5, lr}
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e78:	6805      	ldr	r5, [r0, #0]
        iterator& operator ++() {
   b4e7a:	4604      	mov	r4, r0
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b4e7c:	b145      	cbz	r5, b4e90 <_ZN10BlynkParam8iteratorppEv+0x1a>
   b4e7e:	6843      	ldr	r3, [r0, #4]
   b4e80:	429d      	cmp	r5, r3
   b4e82:	d205      	bcs.n	b4e90 <_ZN10BlynkParam8iteratorppEv+0x1a>
            if(isValid()) {
                ptr += strlen(ptr) + 1;
   b4e84:	4628      	mov	r0, r5
   b4e86:	f7ff feeb 	bl	b4c60 <strlen>
   b4e8a:	3001      	adds	r0, #1
   b4e8c:	4405      	add	r5, r0
   b4e8e:	6025      	str	r5, [r4, #0]
            }
            return *this;
        }
   b4e90:	4620      	mov	r0, r4
   b4e92:	bd38      	pop	{r3, r4, r5, pc}

000b4e94 <_ZN10BlynkParam3addEPKc>:
    len += l;
}

inline
void BlynkParam::add(const char* str)
{
   b4e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e96:	4604      	mov	r4, r0
   b4e98:	6847      	ldr	r7, [r0, #4]
    if (str == NULL) {
   b4e9a:	460d      	mov	r5, r1
   b4e9c:	b921      	cbnz	r1, b4ea8 <_ZN10BlynkParam3addEPKc+0x14>
        buff[len++] = '\0';
   b4e9e:	6803      	ldr	r3, [r0, #0]
   b4ea0:	1c7a      	adds	r2, r7, #1
   b4ea2:	6042      	str	r2, [r0, #4]
   b4ea4:	55d9      	strb	r1, [r3, r7]
        return;
    }
    add(str, strlen(str)+1);
}
   b4ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    add(str, strlen(str)+1);
   b4ea8:	4608      	mov	r0, r1
   b4eaa:	f7ff fed9 	bl	b4c60 <strlen>
    if (len + l > buff_size)
   b4eae:	68a3      	ldr	r3, [r4, #8]
    add(str, strlen(str)+1);
   b4eb0:	1c46      	adds	r6, r0, #1
    if (len + l > buff_size)
   b4eb2:	19f2      	adds	r2, r6, r7
   b4eb4:	429a      	cmp	r2, r3
   b4eb6:	d8f6      	bhi.n	b4ea6 <_ZN10BlynkParam3addEPKc+0x12>
    memcpy(buff+len, b, l);
   b4eb8:	6820      	ldr	r0, [r4, #0]
   b4eba:	4632      	mov	r2, r6
   b4ebc:	4629      	mov	r1, r5
   b4ebe:	4438      	add	r0, r7
   b4ec0:	f003 fdfe 	bl	b8ac0 <memcpy>
    len += l;
   b4ec4:	6860      	ldr	r0, [r4, #4]
   b4ec6:	4430      	add	r0, r6
   b4ec8:	6060      	str	r0, [r4, #4]
   b4eca:	e7ec      	b.n	b4ea6 <_ZN10BlynkParam3addEPKc+0x12>

000b4ecc <_ZN10BlynkParam3addEi>:

    #include <stdio.h>

    inline
    void BlynkParam::add(int value)
    {
   b4ecc:	b538      	push	{r3, r4, r5, lr}
   b4ece:	4604      	mov	r4, r0
   b4ed0:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%i", value)+1;
   b4ed2:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4ed6:	6825      	ldr	r5, [r4, #0]
   b4ed8:	4a04      	ldr	r2, [pc, #16]	; (b4eec <_ZN10BlynkParam3addEi+0x20>)
   b4eda:	1a09      	subs	r1, r1, r0
   b4edc:	4428      	add	r0, r5
   b4ede:	f002 fa21 	bl	b7324 <snprintf>
   b4ee2:	6863      	ldr	r3, [r4, #4]
   b4ee4:	3001      	adds	r0, #1
   b4ee6:	4403      	add	r3, r0
   b4ee8:	6063      	str	r3, [r4, #4]
    }
   b4eea:	bd38      	pop	{r3, r4, r5, pc}
   b4eec:	000b8d7d 	.word	0x000b8d7d

000b4ef0 <_ZN10BlynkParam3addEl>:
        len += snprintf(buff+len, buff_size-len, "%u", value)+1;
    }

    inline
    void BlynkParam::add(long value)
    {
   b4ef0:	b538      	push	{r3, r4, r5, lr}
   b4ef2:	4604      	mov	r4, r0
   b4ef4:	460b      	mov	r3, r1
        len += snprintf(buff+len, buff_size-len, "%li", value)+1;
   b4ef6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
   b4efa:	6825      	ldr	r5, [r4, #0]
   b4efc:	4a04      	ldr	r2, [pc, #16]	; (b4f10 <_ZN10BlynkParam3addEl+0x20>)
   b4efe:	1a09      	subs	r1, r1, r0
   b4f00:	4428      	add	r0, r5
   b4f02:	f002 fa0f 	bl	b7324 <snprintf>
   b4f06:	6863      	ldr	r3, [r4, #4]
   b4f08:	3001      	adds	r0, #1
   b4f0a:	4403      	add	r3, r0
   b4f0c:	6063      	str	r3, [r4, #4]
    }
   b4f0e:	bd38      	pop	{r3, r4, r5, pc}
   b4f10:	000b8d80 	.word	0x000b8d80

000b4f14 <_Z6updatev>:
};

void update()
{
   b4f14:	b538      	push	{r3, r4, r5, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f16:	4d09      	ldr	r5, [pc, #36]	; (b4f3c <_Z6updatev+0x28>)
  for (uint i = 0; i < updates.size(); i++)
   b4f18:	2400      	movs	r4, #0
   b4f1a:	e9d5 0300 	ldrd	r0, r3, [r5]
   b4f1e:	1a1b      	subs	r3, r3, r0
   b4f20:	ebb4 1f23 	cmp.w	r4, r3, asr #4
   b4f24:	d209      	bcs.n	b4f3a <_Z6updatev+0x26>
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this->_M_impl._M_start + __n);
   b4f26:	eb00 1004 	add.w	r0, r0, r4, lsl #4
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b4f2a:	6883      	ldr	r3, [r0, #8]
   b4f2c:	b90b      	cbnz	r3, b4f32 <_Z6updatev+0x1e>
	__throw_bad_function_call();
   b4f2e:	f003 fca4 	bl	b887a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4f32:	68c3      	ldr	r3, [r0, #12]
   b4f34:	4798      	blx	r3
   b4f36:	3401      	adds	r4, #1
   b4f38:	e7ef      	b.n	b4f1a <_Z6updatev+0x6>
  {
    updates[i]();
  }
   b4f3a:	bd38      	pop	{r3, r4, r5, pc}
   b4f3c:	2003e6b0 	.word	0x2003e6b0

000b4f40 <_Z11printToOled6String>:
  Blynk.virtualWrite(V0, tempMonitor.fahrenheit);
  printToOled((String)tempMonitor.fahrenheit); // One of the values of the Temperature class
}

void printToOled(String msg)
{
   b4f40:	b538      	push	{r3, r4, r5, lr}
  display.clearDisplay();
   b4f42:	4c0b      	ldr	r4, [pc, #44]	; (b4f70 <_Z11printToOled6String+0x30>)
{
   b4f44:	4605      	mov	r5, r0
  display.clearDisplay();
   b4f46:	4620      	mov	r0, r4
   b4f48:	f001 fb36 	bl	b65b8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.setTextSize(2);
   b4f4c:	4620      	mov	r0, r4
   b4f4e:	2102      	movs	r1, #2
   b4f50:	f001 f979 	bl	b6246 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b4f54:	f04f 1301 	mov.w	r3, #65537	; 0x10001
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println(msg);
   b4f58:	6829      	ldr	r1, [r5, #0]
   b4f5a:	2200      	movs	r2, #0
   b4f5c:	4620      	mov	r0, r4
   b4f5e:	e9c4 2304 	strd	r2, r3, [r4, #16]
   b4f62:	f002 fc3e 	bl	b77e2 <_ZN5Print7printlnEPKc>
  display.display();
   b4f66:	4620      	mov	r0, r4
   b4f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  display.display();
   b4f6c:	f001 bd92 	b.w	b6a94 <_ZN16Adafruit_SSD13067displayEv>
   b4f70:	2003e61c 	.word	0x2003e61c

000b4f74 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>:
#endif
    }

private:

    void internalReconnect() {
   b4f74:	b508      	push	{r3, lr}
        state = CONNECTING;
   b4f76:	2300      	movs	r3, #0
   b4f78:	7743      	strb	r3, [r0, #29]
            return (1 == client.connect(addr, port));
        }
        return 0;
    }

    void disconnect() { client.stop(); }
   b4f7a:	6800      	ldr	r0, [r0, #0]
   b4f7c:	f003 f8f6 	bl	b816c <_ZN9TCPClient4stopEv>
        conn.disconnect();
        BlynkOnDisconnected();
    }
   b4f80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        BlynkOnDisconnected();
   b4f84:	f001 bf14 	b.w	b6db0 <BlynkNoOpCbk>

000b4f88 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4f88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f8c:	e9d0 8b00 	ldrd	r8, fp, [r0]
   b4f90:	4607      	mov	r7, r0

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4f92:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4f96:	ebab 0008 	sub.w	r0, fp, r8
	if (max_size() - size() < __n)
   b4f9a:	ebb3 1f20 	cmp.w	r3, r0, asr #4
   b4f9e:	468a      	mov	sl, r1
   b4fa0:	4611      	mov	r1, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fa2:	ea4f 1220 	mov.w	r2, r0, asr #4
	if (max_size() - size() < __n)
   b4fa6:	d102      	bne.n	b4fae <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4fa8:	4824      	ldr	r0, [pc, #144]	; (b503c <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xb4>)
   b4faa:	f003 fc63 	bl	b8874 <_ZSt20__throw_length_errorPKc>
   b4fae:	2a01      	cmp	r2, #1
   b4fb0:	4614      	mov	r4, r2
   b4fb2:	bf38      	it	cc
   b4fb4:	2401      	movcc	r4, #1
   b4fb6:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b4fb8:	ebaa 0508 	sub.w	r5, sl, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4fbc:	d21b      	bcs.n	b4ff6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x6e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4fbe:	b1e4      	cbz	r4, b4ffa <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x72>
   b4fc0:	429c      	cmp	r4, r3
   b4fc2:	bf28      	it	cs
   b4fc4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fc6:	0120      	lsls	r0, r4, #4
   b4fc8:	9101      	str	r1, [sp, #4]
   b4fca:	f7ff fe8c 	bl	b4ce6 <_Znwj>
   b4fce:	9901      	ldr	r1, [sp, #4]
   b4fd0:	4606      	mov	r6, r0
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
   b4fd2:	1970      	adds	r0, r6, r5
   b4fd4:	f7ff fef2 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fd8:	4645      	mov	r5, r8
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
   b4fda:	4630      	mov	r0, r6
      for (; __first != __last; ++__first, (void)++__cur)
   b4fdc:	45aa      	cmp	sl, r5
   b4fde:	f100 0910 	add.w	r9, r0, #16
   b4fe2:	d00c      	beq.n	b4ffe <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
   b4fe4:	4629      	mov	r1, r5
   b4fe6:	f7ff fee9 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
    class function<_Res(_ArgTypes...)>
   b4fea:	4628      	mov	r0, r5
   b4fec:	f7ff ff30 	bl	b4e50 <_ZNSt14_Function_baseD1Ev>
   b4ff0:	3510      	adds	r5, #16
   b4ff2:	4648      	mov	r0, r9
   b4ff4:	e7f2      	b.n	b4fdc <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x54>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4ff6:	461c      	mov	r4, r3
   b4ff8:	e7e5      	b.n	b4fc6 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4ffa:	4626      	mov	r6, r4
   b4ffc:	e7e9      	b.n	b4fd2 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x4a>
   b4ffe:	455d      	cmp	r5, fp
   b5000:	d00a      	beq.n	b5018 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x90>
   b5002:	4629      	mov	r1, r5
   b5004:	4648      	mov	r0, r9
   b5006:	f7ff fed9 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
   b500a:	4628      	mov	r0, r5
   b500c:	f7ff ff20 	bl	b4e50 <_ZNSt14_Function_baseD1Ev>
   b5010:	3510      	adds	r5, #16
   b5012:	f109 0910 	add.w	r9, r9, #16
   b5016:	e7f2      	b.n	b4ffe <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0x76>
	if (__p)
   b5018:	f1b8 0f00 	cmp.w	r8, #0
   b501c:	d005      	beq.n	b502a <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xa2>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b501e:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b5020:	4640      	mov	r0, r8
   b5022:	eba1 0108 	sub.w	r1, r1, r8
   b5026:	f7ff fe62 	bl	b4cee <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b502a:	eb06 1404 	add.w	r4, r6, r4, lsl #4
      this->_M_impl._M_finish = __new_finish;
   b502e:	e9c7 6900 	strd	r6, r9, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b5032:	60bc      	str	r4, [r7, #8]
    }
   b5034:	b003      	add	sp, #12
   b5036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b503a:	bf00      	nop
   b503c:	000b8d84 	.word	0x000b8d84

000b5040 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>:
    #endif
#endif

template<class Proto>
BLYNK_FORCE_INLINE
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b5040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    iterator begin() const { return iterator(buff, buff+len); }
   b5044:	eb01 0902 	add.w	r9, r1, r2
   b5048:	b08f      	sub	sp, #60	; 0x3c
{
    BlynkParam param((void*)buff, len);
    BlynkParam::iterator it = param.begin();
    if (it >= param.end())
   b504a:	4549      	cmp	r1, r9
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b504c:	e9cd 1905 	strd	r1, r9, [sp, #20]
void BlynkApi<Proto>::processCmd(const void* buff, size_t len)
   b5050:	4680      	mov	r8, r0
   b5052:	460d      	mov	r5, r1
   b5054:	4616      	mov	r6, r2
    if (it >= param.end())
   b5056:	f080 8092 	bcs.w	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;
    const char* cmd = it.asStr();
    uint16_t cmd16;
    memcpy(&cmd16, cmd, sizeof(cmd16));
    if (++it >= param.end())
   b505a:	a805      	add	r0, sp, #20
   b505c:	880f      	ldrh	r7, [r1, #0]
   b505e:	f7ff ff0a 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b5062:	6803      	ldr	r3, [r0, #0]
   b5064:	454b      	cmp	r3, r9
   b5066:	f080 808a 	bcs.w	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        return;

    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b506a:	a805      	add	r0, sp, #20
   b506c:	f7ff fef9 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>

    switch(cmd16) {
   b5070:	f247 2376 	movw	r3, #29302	; 0x7276
   b5074:	429f      	cmp	r7, r3
    const uint8_t pin = BLYNK_DECODE_PIN(it);
   b5076:	b2c4      	uxtb	r4, r0
    switch(cmd16) {
   b5078:	f000 80a9 	beq.w	b51ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x18e>
   b507c:	d827      	bhi.n	b50ce <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x8e>
   b507e:	f247 2361 	movw	r3, #29281	; 0x7261
   b5082:	429f      	cmp	r7, r3
   b5084:	d07e      	beq.n	b5184 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x144>
   b5086:	f247 2364 	movw	r3, #29284	; 0x7264
   b508a:	429f      	cmp	r7, r3
   b508c:	d042      	beq.n	b5114 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd4>
   b508e:	f646 5370 	movw	r3, #28016	; 0x6d70
   b5092:	429f      	cmp	r7, r3
   b5094:	d128      	bne.n	b50e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xa8>

    case BLYNK_HW_PM: {
        while (it < param.end()) {
            const uint8_t pin = BLYNK_DECODE_PIN(it);
            ++it;
            if (!strcmp(it.asStr(), "in")) {
   b5096:	4e63      	ldr	r6, [pc, #396]	; (b5224 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e4>)
                pinMode(pin, INPUT);
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b5098:	4f63      	ldr	r7, [pc, #396]	; (b5228 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1e8>)
   b509a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; b523c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1fc>
        while (it < param.end()) {
   b509e:	9b05      	ldr	r3, [sp, #20]
   b50a0:	4599      	cmp	r9, r3
   b50a2:	d96c      	bls.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            const uint8_t pin = BLYNK_DECODE_PIN(it);
   b50a4:	a805      	add	r0, sp, #20
   b50a6:	f7ff fedc 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>
   b50aa:	b2c4      	uxtb	r4, r0
            ++it;
   b50ac:	a805      	add	r0, sp, #20
   b50ae:	f7ff fee2 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b50b2:	9d05      	ldr	r5, [sp, #20]
            if (!strcmp(it.asStr(), "in")) {
   b50b4:	4631      	mov	r1, r6
   b50b6:	4628      	mov	r0, r5
   b50b8:	f7ff fdc8 	bl	b4c4c <strcmp>
   b50bc:	4601      	mov	r1, r0
   b50be:	b9e0      	cbnz	r0, b50fa <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xba>
                pinMode(pin, OUTPUT);
   b50c0:	4620      	mov	r0, r4
   b50c2:	f003 fadb 	bl	b867c <pinMode>
            } else {
#ifdef BLYNK_DEBUG
                BLYNK_LOG4(BLYNK_F("Invalid pin "), pin, BLYNK_F(" mode "), it.asStr());
#endif
            }
            ++it;
   b50c6:	a805      	add	r0, sp, #20
   b50c8:	f7ff fed5 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        while (it < param.end()) {
   b50cc:	e7e7      	b.n	b509e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x5e>
    switch(cmd16) {
   b50ce:	f247 7364 	movw	r3, #30564	; 0x7764
   b50d2:	429f      	cmp	r7, r3
   b50d4:	d03f      	beq.n	b5156 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x116>
   b50d6:	f247 7376 	movw	r3, #30582	; 0x7776
   b50da:	429f      	cmp	r7, r3
   b50dc:	f000 8087 	beq.w	b51ee <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ae>
   b50e0:	f247 7361 	movw	r3, #30561	; 0x7761
   b50e4:	429f      	cmp	r7, r3
   b50e6:	d05f      	beq.n	b51a8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x168>
        BlynkParam param2(start, len - (start - (char*)buff));
        callWriteHandler(pin, param2);
    } break;
    default:
        BLYNK_LOG2(BLYNK_F("Invalid HW cmd: "), cmd);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b50e8:	2300      	movs	r3, #0
   b50ea:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b50ee:	2202      	movs	r2, #2
   b50f0:	9200      	str	r2, [sp, #0]
   b50f2:	f8b8 201a 	ldrh.w	r2, [r8, #26]
   b50f6:	4619      	mov	r1, r3
   b50f8:	e029      	b.n	b514e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x10e>
            } else if (!strcmp(it.asStr(), "out") || !strcmp(it.asStr(), "pwm")) {
   b50fa:	4639      	mov	r1, r7
   b50fc:	4628      	mov	r0, r5
   b50fe:	f7ff fda5 	bl	b4c4c <strcmp>
   b5102:	b128      	cbz	r0, b5110 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xd0>
   b5104:	4641      	mov	r1, r8
   b5106:	4628      	mov	r0, r5
   b5108:	f7ff fda0 	bl	b4c4c <strcmp>
   b510c:	2800      	cmp	r0, #0
   b510e:	d1da      	bne.n	b50c6 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x86>
                pinMode(pin, OUTPUT);
   b5110:	2101      	movs	r1, #1
   b5112:	e7d5      	b.n	b50c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x80>
        : buff((char*)addr), len(length), buff_size(buffsize)
   b5114:	ab0a      	add	r3, sp, #40	; 0x28
        rsp.add("dw");
   b5116:	4945      	ldr	r1, [pc, #276]	; (b522c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1ec>)
   b5118:	9307      	str	r3, [sp, #28]
   b511a:	a807      	add	r0, sp, #28
   b511c:	2310      	movs	r3, #16
   b511e:	2500      	movs	r5, #0
   b5120:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5124:	f7ff feb6 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5128:	a807      	add	r0, sp, #28
   b512a:	4621      	mov	r1, r4
   b512c:	f7ff fece 	bl	b4ecc <_ZN10BlynkParam3addEi>
        rsp.add(digitalRead(pin));
   b5130:	4620      	mov	r0, r4
   b5132:	f003 facd 	bl	b86d0 <digitalRead>
        rsp.add(analogRead(pin));
   b5136:	4601      	mov	r1, r0
   b5138:	a807      	add	r0, sp, #28
   b513a:	f7ff fed9 	bl	b4ef0 <_ZN10BlynkParam3addEl>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, rsp.getBuffer(), rsp.getLength()-1);
   b513e:	9b08      	ldr	r3, [sp, #32]
   b5140:	e9cd 5501 	strd	r5, r5, [sp, #4]
   b5144:	3b01      	subs	r3, #1
   b5146:	9300      	str	r3, [sp, #0]
   b5148:	9b07      	ldr	r3, [sp, #28]
   b514a:	462a      	mov	r2, r5
   b514c:	2114      	movs	r1, #20
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_RESPONSE, static_cast<Proto*>(this)->msgIdOutOverride, NULL, BLYNK_ILLEGAL_COMMAND);
   b514e:	4640      	mov	r0, r8
   b5150:	f000 fa84 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
   b5154:	e013      	b.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        if (++it >= param.end())
   b5156:	a805      	add	r0, sp, #20
   b5158:	f7ff fe8d 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b515c:	6803      	ldr	r3, [r0, #0]
   b515e:	4599      	cmp	r9, r3
   b5160:	d90d      	bls.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b5162:	b2a4      	uxth	r4, r4
   b5164:	2101      	movs	r1, #1
   b5166:	4620      	mov	r0, r4
   b5168:	f003 fa88 	bl	b867c <pinMode>
        digitalWrite(pin, it.asInt() ? HIGH : LOW);
   b516c:	a805      	add	r0, sp, #20
   b516e:	f7ff fe78 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>
   b5172:	1e01      	subs	r1, r0, #0
   b5174:	bf18      	it	ne
   b5176:	2101      	movne	r1, #1
   b5178:	4620      	mov	r0, r4
   b517a:	f003 fa90 	bl	b869e <digitalWrite>
    }
}
   b517e:	b00f      	add	sp, #60	; 0x3c
   b5180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   b5184:	ab0a      	add	r3, sp, #40	; 0x28
   b5186:	9307      	str	r3, [sp, #28]
        rsp.add("aw");
   b5188:	a807      	add	r0, sp, #28
   b518a:	2310      	movs	r3, #16
   b518c:	4928      	ldr	r1, [pc, #160]	; (b5230 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f0>)
   b518e:	2500      	movs	r5, #0
   b5190:	e9cd 5308 	strd	r5, r3, [sp, #32]
   b5194:	f7ff fe7e 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        rsp.add(pin);
   b5198:	a807      	add	r0, sp, #28
   b519a:	4621      	mov	r1, r4
   b519c:	f7ff fe96 	bl	b4ecc <_ZN10BlynkParam3addEi>
        rsp.add(analogRead(pin));
   b51a0:	4620      	mov	r0, r4
   b51a2:	f003 faa8 	bl	b86f6 <analogRead>
   b51a6:	e7c6      	b.n	b5136 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0xf6>
        if (++it >= param.end())
   b51a8:	a805      	add	r0, sp, #20
   b51aa:	f7ff fe64 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b51ae:	6803      	ldr	r3, [r0, #0]
   b51b0:	4599      	cmp	r9, r3
   b51b2:	d9e4      	bls.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        pinMode(pin, OUTPUT);
   b51b4:	b2a4      	uxth	r4, r4
   b51b6:	2101      	movs	r1, #1
   b51b8:	4620      	mov	r0, r4
   b51ba:	f003 fa5f 	bl	b867c <pinMode>
        analogWrite(pin, it.asInt());
   b51be:	a805      	add	r0, sp, #20
   b51c0:	f7ff fe4f 	bl	b4e62 <_ZNK10BlynkParam8iterator5asIntEv>
   b51c4:	4601      	mov	r1, r0
   b51c6:	4620      	mov	r0, r4
   b51c8:	f003 faac 	bl	b8724 <_Z11analogWritetm>
    } break;
   b51cc:	e7d7      	b.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        }
    }

    void callReadHandler(int pin) {
        BlynkReq req = { (uint8_t)pin };
        WidgetReadHandler handler = GetReadHandler(pin);
   b51ce:	4620      	mov	r0, r4
        BlynkReq req = { (uint8_t)pin };
   b51d0:	f88d 4028 	strb.w	r4, [sp, #40]	; 0x28
        WidgetReadHandler handler = GetReadHandler(pin);
   b51d4:	f001 fdee 	bl	b6db4 <GetReadHandler>
        if (handler && (handler != BlynkWidgetRead)) {
   b51d8:	4603      	mov	r3, r0
            handler(req);
   b51da:	a80a      	add	r0, sp, #40	; 0x28
        if (handler && (handler != BlynkWidgetRead)) {
   b51dc:	b123      	cbz	r3, b51e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
   b51de:	4a15      	ldr	r2, [pc, #84]	; (b5234 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f4>)
   b51e0:	4293      	cmp	r3, r2
   b51e2:	d001      	beq.n	b51e8 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1a8>
            handler(req);
   b51e4:	4798      	blx	r3
   b51e6:	e7ca      	b.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        } else {
            BlynkWidgetReadDefault(req);
   b51e8:	f001 fde0 	bl	b6dac <BlynkWidgetRead>
        }
    }
   b51ec:	e7c7      	b.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
        ++it;
   b51ee:	a805      	add	r0, sp, #20
   b51f0:	f7ff fe41 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b51f4:	9b05      	ldr	r3, [sp, #20]
        BlynkReq req = { (uint8_t)pin };
   b51f6:	f88d 401c 	strb.w	r4, [sp, #28]
        BlynkParam param2(start, len - (start - (char*)buff));
   b51fa:	1b5d      	subs	r5, r3, r5
   b51fc:	1b75      	subs	r5, r6, r5
        WidgetWriteHandler handler = GetWriteHandler(pin);
   b51fe:	4620      	mov	r0, r4
        : buff((char*)addr), len(length), buff_size(length)
   b5200:	e9cd 350a 	strd	r3, r5, [sp, #40]	; 0x28
   b5204:	950c      	str	r5, [sp, #48]	; 0x30
   b5206:	f001 fddf 	bl	b6dc8 <GetWriteHandler>
        if (handler && (handler != BlynkWidgetWrite)) {
   b520a:	4603      	mov	r3, r0
            handler(req, param);
   b520c:	a90a      	add	r1, sp, #40	; 0x28
   b520e:	a807      	add	r0, sp, #28
        if (handler && (handler != BlynkWidgetWrite)) {
   b5210:	b123      	cbz	r3, b521c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
   b5212:	4a09      	ldr	r2, [pc, #36]	; (b5238 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1f8>)
   b5214:	4293      	cmp	r3, r2
   b5216:	d001      	beq.n	b521c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x1dc>
            handler(req, param);
   b5218:	4798      	blx	r3
   b521a:	e7b0      	b.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
            BlynkWidgetWriteDefault(req, param);
   b521c:	f001 fdc7 	bl	b6dae <BlynkWidgetWrite>
    } break;
   b5220:	e7ad      	b.n	b517e <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj+0x13e>
   b5222:	bf00      	nop
   b5224:	000b8d9e 	.word	0x000b8d9e
   b5228:	000b8da1 	.word	0x000b8da1
   b522c:	000b8da9 	.word	0x000b8da9
   b5230:	000b8dac 	.word	0x000b8dac
   b5234:	000b6dad 	.word	0x000b6dad
   b5238:	000b6daf 	.word	0x000b6daf
   b523c:	000b8da5 	.word	0x000b8da5

000b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>:
    return true;
}

template <class Transp>
BLYNK_FORCE_INLINE
bool BlynkProtocol<Transp>::processInput(void)
   b5240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5244:	b08c      	sub	sp, #48	; 0x30
   b5246:	af04      	add	r7, sp, #16
   b5248:	4604      	mov	r4, r0

    size_t read(void* buf, size_t len) {
        return client.readBytes((char*)buf, len);
   b524a:	2205      	movs	r2, #5
   b524c:	6800      	ldr	r0, [r0, #0]
   b524e:	1d39      	adds	r1, r7, #4
   b5250:	f002 fbed 	bl	b7a2e <_ZN6Stream9readBytesEPcj>

template <class Transp>
int BlynkProtocol<Transp>::readHeader(BlynkHeader& hdr)
{
    size_t rlen = conn.read(&hdr, sizeof(hdr));
    if (rlen == 0) {
   b5254:	b3a8      	cbz	r0, b52c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
        return 0;
    }

    if (sizeof(hdr) != rlen) {
   b5256:	2805      	cmp	r0, #5
   b5258:	d004      	beq.n	b5264 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x24>
        return false;
   b525a:	2000      	movs	r0, #0
}
   b525c:	3720      	adds	r7, #32
   b525e:	46bd      	mov	sp, r7
   b5260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return -1;
    }

    BLYNK_DBG_DUMP(">", &hdr, sizeof(BlynkHeader));

    hdr.msg_id = ntohs(hdr.msg_id);
   b5264:	f8b7 0005 	ldrh.w	r0, [r7, #5]
   b5268:	f001 fe98 	bl	b6f9c <inet_ntohs>
   b526c:	f8a7 0005 	strh.w	r0, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b5270:	f8b7 0007 	ldrh.w	r0, [r7, #7]
   b5274:	f001 fe92 	bl	b6f9c <inet_ntohs>
    if (ret < 0 || hdr.msg_id == 0) {
   b5278:	f8b7 3005 	ldrh.w	r3, [r7, #5]
    hdr.length = ntohs(hdr.length);
   b527c:	f8a7 0007 	strh.w	r0, [r7, #7]
   b5280:	4680      	mov	r8, r0
    if (ret < 0 || hdr.msg_id == 0) {
   b5282:	2b00      	cmp	r3, #0
   b5284:	d0e9      	beq.n	b525a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a>
    if (hdr.type == BLYNK_CMD_RESPONSE) {
   b5286:	793b      	ldrb	r3, [r7, #4]
   b5288:	bb23      	cbnz	r3, b52d4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x94>
        lastActivityIn = BlynkMillis();
   b528a:	f001 fd8d 	bl	b6da8 <_Z11BlynkMillisv>
   b528e:	4602      	mov	r2, r0
   b5290:	60e0      	str	r0, [r4, #12]
        if (state == CONNECTING && (1 == hdr.msg_id)) {
   b5292:	7f60      	ldrb	r0, [r4, #29]
   b5294:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5298:	b9c0      	cbnz	r0, b52cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
   b529a:	f8b7 1005 	ldrh.w	r1, [r7, #5]
   b529e:	2901      	cmp	r1, #1
   b52a0:	d114      	bne.n	b52cc <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x8c>
            switch (hdr.length) {
   b52a2:	2b09      	cmp	r3, #9
   b52a4:	d00f      	beq.n	b52c6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x86>
   b52a6:	2bc8      	cmp	r3, #200	; 0xc8
   b52a8:	d001      	beq.n	b52ae <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x6e>
   b52aa:	2b04      	cmp	r3, #4
   b52ac:	d1d6      	bne.n	b525c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = CONNECTED;
   b52ae:	2501      	movs	r5, #1
                lastHeartbeat = lastActivityIn;
   b52b0:	6162      	str	r2, [r4, #20]
                this->sendInfo();
   b52b2:	4620      	mov	r0, r4
                state = CONNECTED;
   b52b4:	7765      	strb	r5, [r4, #29]
                this->sendInfo();
   b52b6:	f000 fa81 	bl	b57bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
                BLYNK_RUN_YIELD();
   b52ba:	f7ff fdbd 	bl	b4e38 <_ZN10CloudClass7processEv.isra.0>
                BlynkOnConnected();
   b52be:	f001 fd77 	bl	b6db0 <BlynkNoOpCbk>
        return true; // Considered OK (no data on input)
   b52c2:	2001      	movs	r0, #1
   b52c4:	e7ca      	b.n	b525c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
                state = TOKEN_INVALID;
   b52c6:	2303      	movs	r3, #3
   b52c8:	7763      	strb	r3, [r4, #29]
                break;
   b52ca:	e7c7      	b.n	b525c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        if (BLYNK_NOT_AUTHENTICATED == hdr.length) {
   b52cc:	1f58      	subs	r0, r3, #5
   b52ce:	bf18      	it	ne
   b52d0:	2001      	movne	r0, #1
   b52d2:	e7c3      	b.n	b525c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
    if (hdr.length > BLYNK_MAX_READBYTES) {
   b52d4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   b52d8:	d903      	bls.n	b52e2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xa2>
        internalReconnect();
   b52da:	4620      	mov	r0, r4
   b52dc:	f7ff fe4a 	bl	b4f74 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b52e0:	e7ef      	b.n	b52c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x82>
    uint8_t inputBuffer[hdr.length+1]; // Add 1 to zero-terminate
   b52e2:	f100 0308 	add.w	r3, r0, #8
   b52e6:	f023 0307 	bic.w	r3, r3, #7
   b52ea:	466e      	mov	r6, sp
   b52ec:	ebad 0d03 	sub.w	sp, sp, r3
   b52f0:	ad04      	add	r5, sp, #16
   b52f2:	4602      	mov	r2, r0
   b52f4:	4629      	mov	r1, r5
   b52f6:	6820      	ldr	r0, [r4, #0]
   b52f8:	f002 fb99 	bl	b7a2e <_ZN6Stream9readBytesEPcj>
    if (hdr.length != conn.read(inputBuffer, hdr.length)) {
   b52fc:	4580      	cmp	r8, r0
   b52fe:	f04f 0000 	mov.w	r0, #0
   b5302:	d17f      	bne.n	b5404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
    inputBuffer[hdr.length] = '\0';
   b5304:	f8b7 3007 	ldrh.w	r3, [r7, #7]
   b5308:	54e8      	strb	r0, [r5, r3]
    lastActivityIn = BlynkMillis();
   b530a:	f001 fd4d 	bl	b6da8 <_Z11BlynkMillisv>
    switch (hdr.type)
   b530e:	793b      	ldrb	r3, [r7, #4]
    lastActivityIn = BlynkMillis();
   b5310:	60e0      	str	r0, [r4, #12]
    switch (hdr.type)
   b5312:	2b14      	cmp	r3, #20
   b5314:	f000 80a6 	beq.w	b5464 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5318:	d848      	bhi.n	b53ac <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x16c>
   b531a:	2b0f      	cmp	r3, #15
   b531c:	f000 80a2 	beq.w	b5464 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x224>
   b5320:	d807      	bhi.n	b5332 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xf2>
   b5322:	2b02      	cmp	r3, #2
   b5324:	d048      	beq.n	b53b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x178>
   b5326:	2b06      	cmp	r3, #6
   b5328:	d051      	beq.n	b53ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
        internalReconnect();
   b532a:	4620      	mov	r0, r4
   b532c:	f7ff fe22 	bl	b4f74 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
   b5330:	e058      	b.n	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
    switch (hdr.type)
   b5332:	2b11      	cmp	r3, #17
   b5334:	d1f9      	bne.n	b532a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        BlynkReq req = { 0 };
   b5336:	2300      	movs	r3, #0
   b5338:	703b      	strb	r3, [r7, #0]
        BlynkParam param(inputBuffer, hdr.length);
   b533a:	f8b7 3007 	ldrh.w	r3, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b533e:	442b      	add	r3, r5
        if (it >= param.end())
   b5340:	429d      	cmp	r5, r3
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b5342:	e9c7 5303 	strd	r5, r3, [r7, #12]
   b5346:	d24d      	bcs.n	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
        ++it;
   b5348:	f107 000c 	add.w	r0, r7, #12
   b534c:	f8d5 8000 	ldr.w	r8, [r5]
   b5350:	f7ff fd91 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
        const char* asStr() const       { return ptr; }
   b5354:	68fb      	ldr	r3, [r7, #12]
        unsigned length = hdr.length - (start - (char*)inputBuffer);
   b5356:	f8b7 1007 	ldrh.w	r1, [r7, #7]
   b535a:	1b5d      	subs	r5, r3, r5
   b535c:	1b4d      	subs	r5, r1, r5
        : buff((char*)addr), len(length), buff_size(length)
   b535e:	e9c7 3505 	strd	r3, r5, [r7, #20]
        msgIdOutOverride = hdr.msg_id;
   b5362:	687b      	ldr	r3, [r7, #4]
   b5364:	61fd      	str	r5, [r7, #28]
   b5366:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b536a:	8363      	strh	r3, [r4, #26]
   b536c:	4b64      	ldr	r3, [pc, #400]	; (b5500 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c0>)
   b536e:	4598      	cmp	r8, r3
   b5370:	f000 80bf 	beq.w	b54f2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2b2>
   b5374:	f200 808c 	bhi.w	b5490 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x250>
   b5378:	f5a3 237f 	sub.w	r3, r3, #1044480	; 0xff000
   b537c:	f46f 7200 	mvn.w	r2, #512	; 0x200
   b5380:	4413      	add	r3, r2
   b5382:	4598      	cmp	r8, r3
   b5384:	f000 809d 	beq.w	b54c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x282>
   b5388:	d879      	bhi.n	b547e <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x23e>
   b538a:	f5a3 3300 	sub.w	r3, r3, #131072	; 0x20000
   b538e:	3b06      	subs	r3, #6
   b5390:	4598      	cmp	r8, r3
   b5392:	f000 809c 	beq.w	b54ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x28e>
   b5396:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b539a:	3303      	adds	r3, #3
   b539c:	4598      	cmp	r8, r3
   b539e:	d16b      	bne.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_RTC:  BlynkWidgetWriteInternalPinRTC(req, param2);    break;
   b53a0:	f107 0114 	add.w	r1, r7, #20
   b53a4:	4638      	mov	r0, r7
   b53a6:	f001 fd02 	bl	b6dae <BlynkWidgetWrite>
   b53aa:	e065      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
    switch (hdr.type)
   b53ac:	2b29      	cmp	r3, #41	; 0x29
   b53ae:	d01b      	beq.n	b53e8 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a8>
   b53b0:	2b37      	cmp	r3, #55	; 0x37
   b53b2:	d017      	beq.n	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b53b4:	2b1d      	cmp	r3, #29
   b53b6:	d1b8      	bne.n	b532a <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0xea>
        if (state == CONNECTING) {
   b53b8:	7f63      	ldrb	r3, [r4, #29]
   b53ba:	b943      	cbnz	r3, b53ce <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x18e>
            state = CONNECTED;
   b53bc:	2301      	movs	r3, #1
   b53be:	7763      	strb	r3, [r4, #29]
            this->sendInfo();
   b53c0:	4620      	mov	r0, r4
   b53c2:	f000 f9fb 	bl	b57bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>
            BLYNK_RUN_YIELD();
   b53c6:	f7ff fd37 	bl	b4e38 <_ZN10CloudClass7processEv.isra.0>
            BlynkOnConnected();
   b53ca:	f001 fcf1 	bl	b6db0 <BlynkNoOpCbk>
        sendCmd(BLYNK_CMD_RESPONSE, id, NULL, rsp);
   b53ce:	2300      	movs	r3, #0
   b53d0:	21c8      	movs	r1, #200	; 0xc8
   b53d2:	f8b7 2005 	ldrh.w	r2, [r7, #5]
   b53d6:	9100      	str	r1, [sp, #0]
   b53d8:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b53dc:	4619      	mov	r1, r3
   b53de:	4620      	mov	r0, r4
   b53e0:	f000 f93c 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    switch (hdr.type)
   b53e4:	2001      	movs	r0, #1
   b53e6:	e00d      	b.n	b5404 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c4>
        if (!redir_serv) {
   b53e8:	68a3      	ldr	r3, [r4, #8]
   b53ea:	b91b      	cbnz	r3, b53f4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1b4>
             redir_serv = (char*)malloc(64);
   b53ec:	2040      	movs	r0, #64	; 0x40
   b53ee:	f001 ff81 	bl	b72f4 <malloc>
   b53f2:	60a0      	str	r0, [r4, #8]
        BlynkParam param(inputBuffer, hdr.length);
   b53f4:	f8b7 8007 	ldrh.w	r8, [r7, #7]
    iterator begin() const { return iterator(buff, buff+len); }
   b53f8:	44a8      	add	r8, r5
        if (it >= param.end())
   b53fa:	4545      	cmp	r5, r8
        iterator(const char* c, const char* l) : ptr(c), limit(l) {}
   b53fc:	e9c7 5805 	strd	r5, r8, [r7, #20]
   b5400:	d302      	bcc.n	b5408 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c8>
            return false;
   b5402:	2000      	movs	r0, #0
   b5404:	46b5      	mov	sp, r6
   b5406:	e729      	b.n	b525c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1c>
        strncpy(redir_serv, it.asStr(), 64);
   b5408:	4629      	mov	r1, r5
   b540a:	2240      	movs	r2, #64	; 0x40
   b540c:	68a0      	ldr	r0, [r4, #8]
   b540e:	f003 fb9b 	bl	b8b48 <strncpy>
        redir_serv[63] = '\0';
   b5412:	68a3      	ldr	r3, [r4, #8]
   b5414:	2500      	movs	r5, #0
   b5416:	f883 503f 	strb.w	r5, [r3, #63]	; 0x3f
        if (++it < param.end())
   b541a:	f107 0014 	add.w	r0, r7, #20
   b541e:	f7ff fd2a 	bl	b4e76 <_ZN10BlynkParam8iteratorppEv>
   b5422:	6803      	ldr	r3, [r0, #0]
   b5424:	4598      	cmp	r8, r3
   b5426:	d91b      	bls.n	b5460 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x220>
        bool isValid() const            { return ptr != NULL && ptr < limit; }
   b5428:	6978      	ldr	r0, [r7, #20]
   b542a:	b120      	cbz	r0, b5436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
   b542c:	69bb      	ldr	r3, [r7, #24]
   b542e:	4298      	cmp	r0, r3
   b5430:	d214      	bcs.n	b545c <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x21c>
        long        asLong() const      { if(!isValid()) return 0; return atol(ptr); }
   b5432:	f003 fb41 	bl	b8ab8 <atol>
            redir_port = it.asLong();
   b5436:	b285      	uxth	r5, r0
    void disconnect() { client.stop(); }
   b5438:	6820      	ldr	r0, [r4, #0]
   b543a:	f002 fe97 	bl	b816c <_ZN9TCPClient4stopEv>
        conn.begin(redir_serv, redir_port);
   b543e:	6823      	ldr	r3, [r4, #0]
   b5440:	68a2      	ldr	r2, [r4, #8]
        domain = d;
   b5442:	635a      	str	r2, [r3, #52]	; 0x34
        port = p;
   b5444:	871d      	strh	r5, [r3, #56]	; 0x38
        state = CONNECTING;
   b5446:	2300      	movs	r3, #0
   b5448:	7763      	strb	r3, [r4, #29]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b544a:	f001 fcad 	bl	b6da8 <_Z11BlynkMillisv>
   b544e:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
   b5452:	3808      	subs	r0, #8
   b5454:	e9c4 0003 	strd	r0, r0, [r4, #12]
   b5458:	6160      	str	r0, [r4, #20]
   b545a:	e7c3      	b.n	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b545c:	4628      	mov	r0, r5
   b545e:	e7ea      	b.n	b5436 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f6>
        uint16_t redir_port = BLYNK_DEFAULT_PORT;
   b5460:	2550      	movs	r5, #80	; 0x50
   b5462:	e7e9      	b.n	b5438 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1f8>
        msgIdOutOverride = hdr.msg_id;
   b5464:	687b      	ldr	r3, [r7, #4]
        this->processCmd(inputBuffer, hdr.length);
   b5466:	f8b7 2007 	ldrh.w	r2, [r7, #7]
        msgIdOutOverride = hdr.msg_id;
   b546a:	f3c3 230f 	ubfx	r3, r3, #8, #16
   b546e:	8363      	strh	r3, [r4, #26]
        this->processCmd(inputBuffer, hdr.length);
   b5470:	4629      	mov	r1, r5
   b5472:	4620      	mov	r0, r4
   b5474:	f7ff fde4 	bl	b5040 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE10processCmdEPKvj>
        msgIdOutOverride = 0;
   b5478:	2300      	movs	r3, #0
   b547a:	8363      	strh	r3, [r4, #26]
   b547c:	e7b2      	b.n	b53e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x1a4>
   b547e:	4b21      	ldr	r3, [pc, #132]	; (b5504 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c4>)
   b5480:	4598      	cmp	r8, r3
   b5482:	d1f9      	bne.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_DBG:  BlynkWidgetWriteInternalPinDBG(req, param2);    break;
   b5484:	f107 0114 	add.w	r1, r7, #20
   b5488:	4638      	mov	r0, r7
   b548a:	f001 fc90 	bl	b6dae <BlynkWidgetWrite>
   b548e:	e7f3      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b5490:	4b1d      	ldr	r3, [pc, #116]	; (b5508 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2c8>)
   b5492:	4598      	cmp	r8, r3
   b5494:	d021      	beq.n	b54da <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x29a>
   b5496:	f103 639f 	add.w	r3, r3, #83361792	; 0x4f80000
   b549a:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   b549e:	f503 7380 	add.w	r3, r3, #256	; 0x100
   b54a2:	4598      	cmp	r8, r3
   b54a4:	d01f      	beq.n	b54e6 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x2a6>
   b54a6:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
   b54aa:	f503 2330 	add.w	r3, r3, #720896	; 0xb0000
   b54ae:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   b54b2:	4598      	cmp	r8, r3
   b54b4:	d1e0      	bne.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_META: BlynkWidgetWriteInternalPinMETA(req, param2);   break;
   b54b6:	f107 0114 	add.w	r1, r7, #20
   b54ba:	4638      	mov	r0, r7
   b54bc:	f001 fc77 	bl	b6dae <BlynkWidgetWrite>
   b54c0:	e7da      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_UTC:  BlynkWidgetWriteInternalPinUTC(req, param2);    break;
   b54c2:	f107 0114 	add.w	r1, r7, #20
   b54c6:	4638      	mov	r0, r7
   b54c8:	f001 fc71 	bl	b6dae <BlynkWidgetWrite>
   b54cc:	e7d4      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_OTA:  BlynkWidgetWriteInternalPinOTA(req, param2);    break;
   b54ce:	f107 0114 	add.w	r1, r7, #20
   b54d2:	4638      	mov	r0, r7
   b54d4:	f001 fc6b 	bl	b6dae <BlynkWidgetWrite>
   b54d8:	e7ce      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ACON: BlynkWidgetWriteInternalPinACON(req, param2);   break;
   b54da:	f107 0114 	add.w	r1, r7, #20
   b54de:	4638      	mov	r0, r7
   b54e0:	f001 fc65 	bl	b6dae <BlynkWidgetWrite>
   b54e4:	e7c8      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_ADIS: BlynkWidgetWriteInternalPinADIS(req, param2);   break;
   b54e6:	f107 0114 	add.w	r1, r7, #20
   b54ea:	4638      	mov	r0, r7
   b54ec:	f001 fc5f 	bl	b6dae <BlynkWidgetWrite>
   b54f0:	e7c2      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
        case BLYNK_INT_VFS:  BlynkWidgetWriteInternalPinVFS(req, param2);    break;
   b54f2:	f107 0114 	add.w	r1, r7, #20
   b54f6:	4638      	mov	r0, r7
   b54f8:	f001 fc59 	bl	b6dae <BlynkWidgetWrite>
   b54fc:	e7bc      	b.n	b5478 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv+0x238>
   b54fe:	bf00      	nop
   b5500:	00736676 	.word	0x00736676
   b5504:	00676264 	.word	0x00676264
   b5508:	6e6f6361 	.word	0x6e6f6361

000b550c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>:
bool BlynkProtocol<Transp>::run(bool avail)
   b550c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5510:	4604      	mov	r4, r0
   b5512:	b08c      	sub	sp, #48	; 0x30
   b5514:	460d      	mov	r5, r1
    BLYNK_RUN_YIELD();
   b5516:	f7ff fc8f 	bl	b4e38 <_ZN10CloudClass7processEv.isra.0>
    if (state == DISCONNECTED) {
   b551a:	7f63      	ldrb	r3, [r4, #29]
   b551c:	2b02      	cmp	r3, #2
   b551e:	d01e      	beq.n	b555e <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x52>
    return false;
}

class BlynkHelperAutoInc {
public:
    BlynkHelperAutoInc(uint8_t& counter) : c(counter) { ++c; }
   b5520:	7f23      	ldrb	r3, [r4, #28]
    if (msgIdOutOverride || nesting > 2) {
   b5522:	8b62      	ldrh	r2, [r4, #26]
   b5524:	3301      	adds	r3, #1
   b5526:	b2db      	uxtb	r3, r3
   b5528:	7723      	strb	r3, [r4, #28]
   b552a:	b9aa      	cbnz	r2, b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b552c:	2b02      	cmp	r3, #2
   b552e:	d813      	bhi.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    size_t write(const void* buf, size_t len) {
        return client.write((const uint8_t*)buf, len);
    }

    void flush() { client.flush(); }
    bool connected() { return client.connected(); }
   b5530:	6820      	ldr	r0, [r4, #0]
   b5532:	f002 fce3 	bl	b7efc <_ZN9TCPClient9connectedEv>
    if (conn.connected()) {
   b5536:	b1a8      	cbz	r0, b5564 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
        while (avail || conn.available() > 0) {
   b5538:	b925      	cbnz	r5, b5544 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x38>
    int available() { return client.available(); }
   b553a:	6820      	ldr	r0, [r4, #0]
   b553c:	f002 fdbc 	bl	b80b8 <_ZN9TCPClient9availableEv>
   b5540:	2800      	cmp	r0, #0
   b5542:	dd0f      	ble.n	b5564 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x58>
            if (!processInput()) {
   b5544:	4620      	mov	r0, r4
   b5546:	f7ff fe7b 	bl	b5240 <_ZN13BlynkProtocolI22BlynkTransportParticleE12processInputEv>
   b554a:	2800      	cmp	r0, #0
   b554c:	d1f5      	bne.n	b553a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x2e>
    void disconnect() { client.stop(); }
   b554e:	6820      	ldr	r0, [r4, #0]
   b5550:	f002 fe0c 	bl	b816c <_ZN9TCPClient4stopEv>
                BlynkOnDisconnected();
   b5554:	f001 fc2c 	bl	b6db0 <BlynkNoOpCbk>
    ~BlynkHelperAutoInc() { --c; }
   b5558:	7f23      	ldrb	r3, [r4, #28]
   b555a:	3b01      	subs	r3, #1
   b555c:	7723      	strb	r3, [r4, #28]
}
   b555e:	b00c      	add	sp, #48	; 0x30
   b5560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    const millis_time_t t = BlynkMillis();
   b5564:	f001 fc20 	bl	b6da8 <_Z11BlynkMillisv>
   b5568:	4605      	mov	r5, r0
    bool connected() { return client.connected(); }
   b556a:	6820      	ldr	r0, [r4, #0]
   b556c:	f002 fcc6 	bl	b7efc <_ZN9TCPClient9connectedEv>
    if (state == CONNECTED) {
   b5570:	7f67      	ldrb	r7, [r4, #29]
   b5572:	2f01      	cmp	r7, #1
   b5574:	4606      	mov	r6, r0
   b5576:	d124      	bne.n	b55c2 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb6>
        if (!tconn) {
   b5578:	b920      	cbnz	r0, b5584 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x78>
            lastHeartbeat = t;
   b557a:	6165      	str	r5, [r4, #20]
            internalReconnect();
   b557c:	4620      	mov	r0, r4
   b557e:	f7ff fcf9 	bl	b4f74 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
            return false;
   b5582:	e7e9      	b.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        if (t - lastActivityIn > (1000UL * BLYNK_HEARTBEAT + BLYNK_TIMEOUT_MS*3)) {
   b5584:	68e3      	ldr	r3, [r4, #12]
   b5586:	f24f 6218 	movw	r2, #63000	; 0xf618
   b558a:	1aeb      	subs	r3, r5, r3
   b558c:	4293      	cmp	r3, r2
   b558e:	d8f5      	bhi.n	b557c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x70>
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b5590:	f64a 72c8 	movw	r2, #45000	; 0xafc8
   b5594:	4293      	cmp	r3, r2
   b5596:	d803      	bhi.n	b55a0 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x94>
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b5598:	6923      	ldr	r3, [r4, #16]
   b559a:	1aeb      	subs	r3, r5, r3
        } else if ((t - lastActivityIn  > 1000UL * BLYNK_HEARTBEAT ||
   b559c:	4293      	cmp	r3, r2
   b559e:	d9db      	bls.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55a0:	6963      	ldr	r3, [r4, #20]
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b55a2:	f241 7270 	movw	r2, #6000	; 0x1770
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55a6:	1aeb      	subs	r3, r5, r3
                    t - lastActivityOut > 1000UL * BLYNK_HEARTBEAT) &&
   b55a8:	4293      	cmp	r3, r2
   b55aa:	d9d5      	bls.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
            sendCmd(BLYNK_CMD_PING);
   b55ac:	2300      	movs	r3, #0
   b55ae:	e9cd 3301 	strd	r3, r3, [sp, #4]
   b55b2:	9300      	str	r3, [sp, #0]
   b55b4:	461a      	mov	r2, r3
   b55b6:	2106      	movs	r1, #6
   b55b8:	4620      	mov	r0, r4
   b55ba:	f000 f84f 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
                lastLogin = t;
   b55be:	6165      	str	r5, [r4, #20]
                return false;
   b55c0:	e7ca      	b.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    } else if (state == CONNECTING) {
   b55c2:	2f00      	cmp	r7, #0
   b55c4:	d1c8      	bne.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
                    t - lastHeartbeat   > BLYNK_TIMEOUT_MS)
   b55c6:	6963      	ldr	r3, [r4, #20]
   b55c8:	1aeb      	subs	r3, r5, r3
        if (tconn && (t - lastLogin > BLYNK_TIMEOUT_MS)) {
   b55ca:	b140      	cbz	r0, b55de <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xd2>
   b55cc:	f241 7270 	movw	r2, #6000	; 0x1770
   b55d0:	4293      	cmp	r3, r2
   b55d2:	d9c1      	bls.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
    void disconnect() { client.stop(); }
   b55d4:	6820      	ldr	r0, [r4, #0]
   b55d6:	f002 fdc9 	bl	b816c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b55da:	7767      	strb	r7, [r4, #29]
            return false;
   b55dc:	e7bc      	b.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
        } else if (!tconn && (t - lastLogin > 5000UL)) {
   b55de:	f241 3288 	movw	r2, #5000	; 0x1388
   b55e2:	4293      	cmp	r3, r2
   b55e4:	d9b8      	bls.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>
   b55e6:	6820      	ldr	r0, [r4, #0]
   b55e8:	f002 fdc0 	bl	b816c <_ZN9TCPClient4stopEv>
            if (!conn.connect()) {
   b55ec:	f8d4 c000 	ldr.w	ip, [r4]
        if (domain) {
   b55f0:	f8dc e034 	ldr.w	lr, [ip, #52]	; 0x34
   b55f4:	f8bc 8038 	ldrh.w	r8, [ip, #56]	; 0x38
   b55f8:	f1be 0f00 	cmp.w	lr, #0
   b55fc:	d01b      	beq.n	b5636 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x12a>
            return (1 == client.connect(domain, port));
   b55fe:	4633      	mov	r3, r6
   b5600:	4642      	mov	r2, r8
   b5602:	4671      	mov	r1, lr
   b5604:	4660      	mov	r0, ip
   b5606:	f002 fbfb 	bl	b7e00 <_ZN9TCPClient7connectEPKctm>
   b560a:	2801      	cmp	r0, #1
   b560c:	d1d7      	bne.n	b55be <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xb2>
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b560e:	6863      	ldr	r3, [r4, #4]
   b5610:	9305      	str	r3, [sp, #20]
            msgIdOut = 1;
   b5612:	2501      	movs	r5, #1
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5614:	4618      	mov	r0, r3
            msgIdOut = 1;
   b5616:	8325      	strh	r5, [r4, #24]
            sendCmd(BLYNK_CMD_HW_LOGIN, 1, authkey, strlen(authkey));
   b5618:	f7ff fb22 	bl	b4c60 <strlen>
   b561c:	2200      	movs	r2, #0
   b561e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b5622:	9b05      	ldr	r3, [sp, #20]
   b5624:	9000      	str	r0, [sp, #0]
   b5626:	462a      	mov	r2, r5
   b5628:	211d      	movs	r1, #29
   b562a:	4620      	mov	r0, r4
   b562c:	f000 f816 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
            lastLogin = lastActivityOut;
   b5630:	6923      	ldr	r3, [r4, #16]
   b5632:	6163      	str	r3, [r4, #20]
            return true;
   b5634:	e790      	b.n	b5558 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x4c>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   b5636:	4b08      	ldr	r3, [pc, #32]	; (b5658 <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0x14c>)
   b5638:	9306      	str	r3, [sp, #24]
   b563a:	f10c 0720 	add.w	r7, ip, #32
   b563e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   b5640:	ae07      	add	r6, sp, #28
   b5642:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b5644:	683b      	ldr	r3, [r7, #0]
   b5646:	7033      	strb	r3, [r6, #0]
            return (1 == client.connect(addr, port));
   b5648:	4642      	mov	r2, r8
   b564a:	4673      	mov	r3, lr
   b564c:	a906      	add	r1, sp, #24
   b564e:	4660      	mov	r0, ip
   b5650:	f002 fcb6 	bl	b7fc0 <_ZN9TCPClient7connectE9IPAddresstm>
   b5654:	e7d9      	b.n	b560a <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0+0xfe>
   b5656:	bf00      	nop
   b5658:	000b9e40 	.word	0x000b9e40

000b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>:
#ifndef BLYNK_SEND_CHUNK
#define BLYNK_SEND_CHUNK 1024 // Just a big number
#endif

template <class Transp>
void BlynkProtocol<Transp>::sendCmd(uint8_t cmd, uint16_t id, const void* data, size_t length, const void* data2, size_t length2)
   b565c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5660:	b083      	sub	sp, #12
   b5662:	af00      	add	r7, sp, #0
   b5664:	4604      	mov	r4, r0
    bool connected() { return client.connected(); }
   b5666:	6800      	ldr	r0, [r0, #0]
   b5668:	6b3d      	ldr	r5, [r7, #48]	; 0x30
   b566a:	4688      	mov	r8, r1
   b566c:	4616      	mov	r6, r2
   b566e:	4699      	mov	r9, r3
#endif
        internalReconnect();
        return;
    }

    lastActivityOut = BlynkMillis();
   b5670:	46eb      	mov	fp, sp
   b5672:	f002 fc43 	bl	b7efc <_ZN9TCPClient9connectedEv>
    if (!conn.connected() || (cmd != BLYNK_CMD_RESPONSE && cmd != BLYNK_CMD_PING && cmd != BLYNK_CMD_LOGIN && cmd != BLYNK_CMD_HW_LOGIN && state != CONNECTED) ) {
   b5676:	2800      	cmp	r0, #0
   b5678:	f000 8081 	beq.w	b577e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b567c:	f1b8 0f1d 	cmp.w	r8, #29
   b5680:	d804      	bhi.n	b568c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x30>
   b5682:	4b4d      	ldr	r3, [pc, #308]	; (b57b8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x15c>)
   b5684:	fa23 f308 	lsr.w	r3, r3, r8
   b5688:	07db      	lsls	r3, r3, #31
   b568a:	d402      	bmi.n	b5692 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x36>
   b568c:	7f63      	ldrb	r3, [r4, #29]
   b568e:	2b01      	cmp	r3, #1
   b5690:	d175      	bne.n	b577e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    if (0 == id) {
   b5692:	b946      	cbnz	r6, b56a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
}

template <class Transp>
uint16_t BlynkProtocol<Transp>::getNextMsgId()
{
    if (msgIdOutOverride != 0)
   b5694:	8b66      	ldrh	r6, [r4, #26]
   b5696:	b936      	cbnz	r6, b56a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x4a>
        return msgIdOutOverride;
    if (++msgIdOut == 0)
   b5698:	8b23      	ldrh	r3, [r4, #24]
   b569a:	3301      	adds	r3, #1
   b569c:	b29b      	uxth	r3, r3
   b569e:	2b00      	cmp	r3, #0
   b56a0:	d072      	beq.n	b5788 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x12c>
        msgIdOut = 1;
   b56a2:	8323      	strh	r3, [r4, #24]
    return msgIdOut;
   b56a4:	8b26      	ldrh	r6, [r4, #24]
    if (cmd >= BLYNK_CMD_TWEET && cmd <= BLYNK_CMD_HARDWARE) {
   b56a6:	f1a8 030c 	sub.w	r3, r8, #12
   b56aa:	2b08      	cmp	r3, #8
   b56ac:	d816      	bhi.n	b56dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
        const millis_time_t allowed_time = BlynkMax(lastActivityOut, lastActivityIn) + 1000/BLYNK_MSG_LIMIT;
   b56ae:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
   b56b2:	4293      	cmp	r3, r2
   b56b4:	bf38      	it	cc
   b56b6:	4613      	movcc	r3, r2
   b56b8:	f103 0a42 	add.w	sl, r3, #66	; 0x42
        int32_t wait_time = allowed_time - BlynkMillis();
   b56bc:	f001 fb74 	bl	b6da8 <_Z11BlynkMillisv>
   b56c0:	ebaa 0000 	sub.w	r0, sl, r0
        if (wait_time >= 0) {
   b56c4:	2800      	cmp	r0, #0
   b56c6:	db61      	blt.n	b578c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x130>
                run();
   b56c8:	2100      	movs	r1, #0
   b56ca:	4620      	mov	r0, r4
   b56cc:	f7ff ff1e 	bl	b550c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
                wait_time = allowed_time - BlynkMillis();
   b56d0:	f001 fb6a 	bl	b6da8 <_Z11BlynkMillisv>
   b56d4:	ebaa 0000 	sub.w	r0, sl, r0
            while (wait_time >= 0) {
   b56d8:	2800      	cmp	r0, #0
   b56da:	daf5      	bge.n	b56c8 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x6c>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b56dc:	f1b9 0f00 	cmp.w	r9, #0
   b56e0:	d05b      	beq.n	b579a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x13e>
   b56e2:	1d6b      	adds	r3, r5, #5
                               (data2 ? length2 : 0);
   b56e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   b56e6:	2a00      	cmp	r2, #0
   b56e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   b56ea:	bf08      	it	eq
   b56ec:	2200      	moveq	r2, #0
    const size_t full_length = (sizeof(BlynkHeader)) +
   b56ee:	eb03 0a02 	add.w	sl, r3, r2
    uint8_t buff[full_length];
   b56f2:	f10a 0307 	add.w	r3, sl, #7
   b56f6:	f023 0307 	bic.w	r3, r3, #7
   b56fa:	ebad 0d03 	sub.w	sp, sp, r3
    hdr->msg_id = htons(id);
   b56fe:	4630      	mov	r0, r6
    hdr->type = cmd;
   b5700:	f88d 8000 	strb.w	r8, [sp]
    uint8_t buff[full_length];
   b5704:	f8c7 d004 	str.w	sp, [r7, #4]
    hdr->msg_id = htons(id);
   b5708:	f001 fc50 	bl	b6fac <inet_htons>
    hdr->length = htons(length+length2);
   b570c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    hdr->msg_id = htons(id);
   b570e:	f8ad 0001 	strh.w	r0, [sp, #1]
    hdr->length = htons(length+length2);
   b5712:	18e8      	adds	r0, r5, r3
   b5714:	b280      	uxth	r0, r0
   b5716:	f001 fc49 	bl	b6fac <inet_htons>
   b571a:	f8ad 0003 	strh.w	r0, [sp, #3]
    if (data && length) {
   b571e:	f1b9 0f00 	cmp.w	r9, #0
   b5722:	d03c      	beq.n	b579e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
   b5724:	2d00      	cmp	r5, #0
   b5726:	d03a      	beq.n	b579e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x142>
        memcpy(buff + pos, data, length);
   b5728:	462a      	mov	r2, r5
   b572a:	4649      	mov	r1, r9
   b572c:	f10d 0005 	add.w	r0, sp, #5
   b5730:	f003 f9c6 	bl	b8ac0 <memcpy>
        pos += length;
   b5734:	1d68      	adds	r0, r5, #5
    if (data2 && length2) {
   b5736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   b5738:	b13b      	cbz	r3, b574a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
   b573a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   b573c:	b12b      	cbz	r3, b574a <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xee>
        memcpy(buff + pos, data2, length2);
   b573e:	461a      	mov	r2, r3
   b5740:	687b      	ldr	r3, [r7, #4]
   b5742:	6b79      	ldr	r1, [r7, #52]	; 0x34
   b5744:	4418      	add	r0, r3
   b5746:	f003 f9bb 	bl	b8ac0 <memcpy>
    size_t pos = sizeof(BlynkHeader);
   b574a:	2500      	movs	r5, #0
    while (wlen < full_length) {
   b574c:	4555      	cmp	r5, sl
   b574e:	d22a      	bcs.n	b57a6 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x14a>
        const size_t chunk = BlynkMin(size_t(BLYNK_SEND_CHUNK), full_length - wlen);
   b5750:	ebaa 0205 	sub.w	r2, sl, r5
        return client.write((const uint8_t*)buf, len);
   b5754:	687b      	ldr	r3, [r7, #4]
   b5756:	6820      	ldr	r0, [r4, #0]
   b5758:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   b575c:	bf28      	it	cs
   b575e:	f44f 6280 	movcs.w	r2, #1024	; 0x400
   b5762:	1959      	adds	r1, r3, r5
   b5764:	f002 fa7d 	bl	b7c62 <_ZN9TCPClient5writeEPKhj>
   b5768:	4606      	mov	r6, r0
        BlynkDelay(BLYNK_SEND_THROTTLE);
   b576a:	2000      	movs	r0, #0
   b576c:	f001 fb1a 	bl	b6da4 <_Z10BlynkDelaym>
        if (w == 0) {
   b5770:	b9be      	cbnz	r6, b57a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x146>
    void disconnect() { client.stop(); }
   b5772:	6820      	ldr	r0, [r4, #0]
   b5774:	f002 fcfa 	bl	b816c <_ZN9TCPClient4stopEv>
            state = CONNECTING;
   b5778:	7766      	strb	r6, [r4, #29]
            BlynkOnDisconnected();
   b577a:	f001 fb19 	bl	b6db0 <BlynkNoOpCbk>
}
   b577e:	370c      	adds	r7, #12
   b5780:	46dd      	mov	sp, fp
   b5782:	46bd      	mov	sp, r7
   b5784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msgIdOut = 1;
   b5788:	2301      	movs	r3, #1
   b578a:	e78a      	b.n	b56a2 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x46>
        } else if (nesting == 0) {
   b578c:	7f21      	ldrb	r1, [r4, #28]
   b578e:	2900      	cmp	r1, #0
   b5790:	d1a4      	bne.n	b56dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
            run();
   b5792:	4620      	mov	r0, r4
   b5794:	f7ff feba 	bl	b550c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
   b5798:	e7a0      	b.n	b56dc <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x80>
    const size_t full_length = (sizeof(BlynkHeader)) +
   b579a:	2305      	movs	r3, #5
   b579c:	e7a2      	b.n	b56e4 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x88>
    size_t pos = sizeof(BlynkHeader);
   b579e:	2005      	movs	r0, #5
   b57a0:	e7c9      	b.n	b5736 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xda>
        wlen += w;
   b57a2:	4435      	add	r5, r6
    while (wlen < full_length) {
   b57a4:	e7d2      	b.n	b574c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0xf0>
    if (wlen != full_length) {
   b57a6:	d003      	beq.n	b57b0 <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x154>
        internalReconnect();
   b57a8:	4620      	mov	r0, r4
   b57aa:	f7ff fbe3 	bl	b4f74 <_ZN13BlynkProtocolI22BlynkTransportParticleE17internalReconnectEv>
        return;
   b57ae:	e7e6      	b.n	b577e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
    lastActivityOut = BlynkMillis();
   b57b0:	f001 fafa 	bl	b6da8 <_Z11BlynkMillisv>
   b57b4:	6120      	str	r0, [r4, #16]
   b57b6:	e7e2      	b.n	b577e <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j+0x122>
   b57b8:	20000045 	.word	0x20000045

000b57bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv>:
void BlynkApi<Proto>::sendInfo()
   b57bc:	b530      	push	{r4, r5, lr}
   b57be:	b099      	sub	sp, #100	; 0x64
        : buff((char*)addr), len(length), buff_size(buffsize)
   b57c0:	ab08      	add	r3, sp, #32
   b57c2:	4604      	mov	r4, r0
   b57c4:	9305      	str	r3, [sp, #20]
   b57c6:	2500      	movs	r5, #0
   b57c8:	2340      	movs	r3, #64	; 0x40
        add(key);
   b57ca:	a805      	add	r0, sp, #20
   b57cc:	490b      	ldr	r1, [pc, #44]	; (b57fc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x40>)
        : buff((char*)addr), len(length), buff_size(buffsize)
   b57ce:	e9cd 5306 	strd	r5, r3, [sp, #24]
        add(key);
   b57d2:	f7ff fb5f 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        add(val);
   b57d6:	a805      	add	r0, sp, #20
   b57d8:	4909      	ldr	r1, [pc, #36]	; (b5800 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x44>)
   b57da:	f7ff fb5b 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
    static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_INTERNAL, 0, profile+8, profile_len, profile_dyn.getBuffer(), profile_dyn.getLength());
   b57de:	9b06      	ldr	r3, [sp, #24]
   b57e0:	9302      	str	r3, [sp, #8]
   b57e2:	9b05      	ldr	r3, [sp, #20]
   b57e4:	9301      	str	r3, [sp, #4]
   b57e6:	2365      	movs	r3, #101	; 0x65
   b57e8:	9300      	str	r3, [sp, #0]
   b57ea:	462a      	mov	r2, r5
   b57ec:	4b05      	ldr	r3, [pc, #20]	; (b5804 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEv+0x48>)
   b57ee:	2111      	movs	r1, #17
   b57f0:	4620      	mov	r0, r4
   b57f2:	f7ff ff33 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
}
   b57f6:	b019      	add	sp, #100	; 0x64
   b57f8:	bd30      	pop	{r4, r5, pc}
   b57fa:	bf00      	nop
   b57fc:	000b8daf 	.word	0x000b8daf
   b5800:	000b8db4 	.word	0x000b8db4
   b5804:	000b8e30 	.word	0x000b8e30

000b5808 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA11_cA19_cEEvRKT_RKT0_>:
        cmd.add(event_name);
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
    }

    template <typename NAME, typename DESCR>
    void logEvent(const NAME& event_name, const DESCR& description) {
   b5808:	b570      	push	{r4, r5, r6, lr}
   b580a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
        : buff((char*)addr), len(length), buff_size(buffsize)
   b580e:	ab08      	add	r3, sp, #32
   b5810:	4616      	mov	r6, r2
   b5812:	2400      	movs	r4, #0
   b5814:	4605      	mov	r5, r0
   b5816:	9305      	str	r3, [sp, #20]
        char mem[BLYNK_MAX_SENDBYTES];
        BlynkParam cmd(mem, 0, sizeof(mem));
        cmd.add(event_name);
   b5818:	a805      	add	r0, sp, #20
   b581a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b581e:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b5822:	f7ff fb37 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        cmd.add(description);
   b5826:	4631      	mov	r1, r6
   b5828:	a805      	add	r0, sp, #20
   b582a:	f7ff fb33 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_EVENT_LOG, 0, cmd.getBuffer(), cmd.getLength()-1);
   b582e:	9b06      	ldr	r3, [sp, #24]
   b5830:	3b01      	subs	r3, #1
   b5832:	9300      	str	r3, [sp, #0]
   b5834:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b5838:	9b05      	ldr	r3, [sp, #20]
   b583a:	4622      	mov	r2, r4
   b583c:	2140      	movs	r1, #64	; 0x40
   b583e:	4628      	mov	r0, r5
   b5840:	f7ff ff0c 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b5844:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b5848:	bd70      	pop	{r4, r5, r6, pc}
	...

000b584c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>:
    void virtualWrite(int pin, Args... values) {
   b584c:	b570      	push	{r4, r5, r6, lr}
   b584e:	ed2d 8b02 	vpush	{d8}
   b5852:	eeb0 8a40 	vmov.f32	s16, s0
   b5856:	eef0 8a60 	vmov.f32	s17, s1
   b585a:	f5ad 6d84 	sub.w	sp, sp, #1056	; 0x420
   b585e:	ab08      	add	r3, sp, #32
   b5860:	2400      	movs	r4, #0
   b5862:	4605      	mov	r5, r0
   b5864:	460e      	mov	r6, r1
   b5866:	9305      	str	r3, [sp, #20]
        cmd.add("vw");
   b5868:	a805      	add	r0, sp, #20
   b586a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   b586e:	4913      	ldr	r1, [pc, #76]	; (b58bc <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x70>)
   b5870:	e9cd 4306 	strd	r4, r3, [sp, #24]
   b5874:	f7ff fb0e 	bl	b4e94 <_ZN10BlynkParam3addEPKc>
        cmd.add(pin);
   b5878:	4631      	mov	r1, r6
   b587a:	a805      	add	r0, sp, #20
   b587c:	f7ff fb26 	bl	b4ecc <_ZN10BlynkParam3addEi>
    }

    inline
    void BlynkParam::add(double value)
    {
        len += snprintf(buff+len, buff_size-len, "%2.7f", value)+1;
   b5880:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
   b5884:	9805      	ldr	r0, [sp, #20]
   b5886:	4a0e      	ldr	r2, [pc, #56]	; (b58c0 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_+0x74>)
   b5888:	1ac9      	subs	r1, r1, r3
   b588a:	ed8d 8b00 	vstr	d8, [sp]
   b588e:	4418      	add	r0, r3
   b5890:	f001 fd48 	bl	b7324 <snprintf>
   b5894:	1c43      	adds	r3, r0, #1
   b5896:	9806      	ldr	r0, [sp, #24]
   b5898:	4403      	add	r3, r0
   b589a:	9306      	str	r3, [sp, #24]
        static_cast<Proto*>(this)->sendCmd(BLYNK_CMD_HARDWARE, 0, cmd.getBuffer(), cmd.getLength()-1);
   b589c:	3b01      	subs	r3, #1
   b589e:	9300      	str	r3, [sp, #0]
   b58a0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b58a4:	9b05      	ldr	r3, [sp, #20]
   b58a6:	4622      	mov	r2, r4
   b58a8:	2114      	movs	r1, #20
   b58aa:	4628      	mov	r0, r5
   b58ac:	f7ff fed6 	bl	b565c <_ZN13BlynkProtocolI22BlynkTransportParticleE7sendCmdEhtPKvjS3_j>
    }
   b58b0:	f50d 6d84 	add.w	sp, sp, #1056	; 0x420
   b58b4:	ecbd 8b02 	vpop	{d8}
   b58b8:	bd70      	pop	{r4, r5, r6, pc}
   b58ba:	bf00      	nop
   b58bc:	000b8dc2 	.word	0x000b8dc2
   b58c0:	000b8dc5 	.word	0x000b8dc5

000b58c4 <loop>:
{
   b58c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  update(); // This is the classes update
   b58c6:	f7ff fb25 	bl	b4f14 <_Z6updatev>
  Blynk.run();
   b58ca:	4819      	ldr	r0, [pc, #100]	; (b5930 <loop+0x6c>)
   b58cc:	2100      	movs	r1, #0
   b58ce:	f7ff fe1d 	bl	b550c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
  display.loop();
   b58d2:	4818      	ldr	r0, [pc, #96]	; (b5934 <loop+0x70>)
   b58d4:	f001 fa43 	bl	b6d5e <_ZN16OledWingAdafruit4loopEv>
  if (display.pressedA())
   b58d8:	4816      	ldr	r0, [pc, #88]	; (b5934 <loop+0x70>)
   b58da:	f001 fa59 	bl	b6d90 <_ZN16OledWingAdafruit8pressedAEv>
   b58de:	b190      	cbz	r0, b5906 <loop+0x42>
    Blynk.logEvent(BUTTON_A_CLICKED_EVENT, BUTTON_A_CLICKED_MSG);
   b58e0:	4a15      	ldr	r2, [pc, #84]	; (b5938 <loop+0x74>)
   b58e2:	4916      	ldr	r1, [pc, #88]	; (b593c <loop+0x78>)
   b58e4:	4812      	ldr	r0, [pc, #72]	; (b5930 <loop+0x6c>)
   b58e6:	f7ff ff8f 	bl	b5808 <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8logEventIA11_cA19_cEEvRKT_RKT0_>
    printToOled("Sent Notification");
   b58ea:	4915      	ldr	r1, [pc, #84]	; (b5940 <loop+0x7c>)
   b58ec:	4668      	mov	r0, sp
   b58ee:	f002 f95e 	bl	b7bae <_ZN6StringC1EPK19__FlashStringHelper>
   b58f2:	4668      	mov	r0, sp
   b58f4:	f7ff fb24 	bl	b4f40 <_Z11printToOled6String>
   b58f8:	4668      	mov	r0, sp
   b58fa:	f002 f90d 	bl	b7b18 <_ZN6StringD1Ev>
    delay(3000);
   b58fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5902:	f001 fd3f 	bl	b7384 <delay>
  Blynk.virtualWrite(V0, tempMonitor.fahrenheit);
   b5906:	4c0f      	ldr	r4, [pc, #60]	; (b5944 <loop+0x80>)
   b5908:	4809      	ldr	r0, [pc, #36]	; (b5930 <loop+0x6c>)
   b590a:	ed94 0b04 	vldr	d0, [r4, #16]
   b590e:	2100      	movs	r1, #0
   b5910:	f7ff ff9c 	bl	b584c <_ZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE12virtualWriteIJdEEEviDpT_>
  printToOled((String)tempMonitor.fahrenheit); // One of the values of the Temperature class
   b5914:	ed94 0b04 	vldr	d0, [r4, #16]
   b5918:	2106      	movs	r1, #6
   b591a:	4668      	mov	r0, sp
   b591c:	f002 f96d 	bl	b7bfa <_ZN6StringC1Edi>
   b5920:	4668      	mov	r0, sp
   b5922:	f7ff fb0d 	bl	b4f40 <_Z11printToOled6String>
   b5926:	4668      	mov	r0, sp
   b5928:	f002 f8f6 	bl	b7b18 <_ZN6StringD1Ev>
}
   b592c:	b004      	add	sp, #16
   b592e:	bd10      	pop	{r4, pc}
   b5930:	2003e5c0 	.word	0x2003e5c0
   b5934:	2003e61c 	.word	0x2003e61c
   b5938:	000b8dcb 	.word	0x000b8dcb
   b593c:	000b8dde 	.word	0x000b8dde
   b5940:	000b8de9 	.word	0x000b8de9
   b5944:	2003e690 	.word	0x2003e690

000b5948 <setup>:
{
   b5948:	b5f0      	push	{r4, r5, r6, r7, lr}
    pin = PIN;
   b594a:	4c32      	ldr	r4, [pc, #200]	; (b5a14 <setup+0xcc>)
   b594c:	b085      	sub	sp, #20
   b594e:	200f      	movs	r0, #15
    pinMode(pin, INPUT);
   b5950:	2100      	movs	r1, #0
    pin = PIN;
   b5952:	8320      	strh	r0, [r4, #24]
    _Function_base() : _M_manager(nullptr) { }
   b5954:	2500      	movs	r5, #0
    pinMode(pin, INPUT);
   b5956:	f002 fe91 	bl	b867c <pinMode>
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b595a:	200c      	movs	r0, #12
    _Function_base() : _M_manager(nullptr) { }
   b595c:	9502      	str	r5, [sp, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b595e:	f7ff f9c2 	bl	b4ce6 <_Znwj>
   b5962:	b118      	cbz	r0, b596c <setup+0x24>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b5964:	4b2c      	ldr	r3, [pc, #176]	; (b5a18 <setup+0xd0>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5966:	6084      	str	r4, [r0, #8]
   b5968:	e9c0 3500 	strd	r3, r5, [r0]
	    _M_invoker = &_My_handler::_M_invoke;
   b596c:	4b2b      	ldr	r3, [pc, #172]	; (b5a1c <setup+0xd4>)
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b596e:	4c2c      	ldr	r4, [pc, #176]	; (b5a20 <setup+0xd8>)
   b5970:	9303      	str	r3, [sp, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5972:	4b2c      	ldr	r3, [pc, #176]	; (b5a24 <setup+0xdc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5974:	9000      	str	r0, [sp, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5976:	9302      	str	r3, [sp, #8]
   b5978:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
   b597c:	4298      	cmp	r0, r3
   b597e:	d033      	beq.n	b59e8 <setup+0xa0>
   b5980:	4669      	mov	r1, sp
   b5982:	f7ff fa1b 	bl	b4dbc <_ZN9__gnu_cxx13new_allocatorISt8functionIFvvEEE9constructIS3_JS3_EEEvPT_DpOT0_.isra.0>
	    ++this->_M_impl._M_finish;
   b5986:	6863      	ldr	r3, [r4, #4]
   b5988:	3310      	adds	r3, #16
   b598a:	6063      	str	r3, [r4, #4]
    class function<_Res(_ArgTypes...)>
   b598c:	4668      	mov	r0, sp
   b598e:	f7ff fa5f 	bl	b4e50 <_ZNSt14_Function_baseD1Ev>
        this->authkey = auth;
   b5992:	4c25      	ldr	r4, [pc, #148]	; (b5a28 <setup+0xe0>)

    void begin( const char* auth,
                const char* domain = BLYNK_DEFAULT_DOMAIN,
                uint16_t port      = BLYNK_DEFAULT_PORT)
    {
        BlynkDelay(3000); // Give the board time to settle
   b5994:	f640 30b8 	movw	r0, #3000	; 0xbb8
   b5998:	f001 fa04 	bl	b6da4 <_Z10BlynkDelaym>
   b599c:	4b23      	ldr	r3, [pc, #140]	; (b5a2c <setup+0xe4>)
   b599e:	6063      	str	r3, [r4, #4]
        lastHeartbeat = lastActivityIn = lastActivityOut = (BlynkMillis() - 5000UL);
   b59a0:	f001 fa02 	bl	b6da8 <_Z11BlynkMillisv>
   b59a4:	f5a0 509c 	sub.w	r0, r0, #4992	; 0x1380
        this->conn.begin(domain, port);
   b59a8:	6823      	ldr	r3, [r4, #0]
        domain = d;
   b59aa:	4a21      	ldr	r2, [pc, #132]	; (b5a30 <setup+0xe8>)
   b59ac:	635a      	str	r2, [r3, #52]	; 0x34
   b59ae:	3808      	subs	r0, #8
   b59b0:	e9c4 0003 	strd	r0, r0, [r4, #12]
        port = p;
   b59b4:	2250      	movs	r2, #80	; 0x50
   b59b6:	6160      	str	r0, [r4, #20]
   b59b8:	871a      	strh	r2, [r3, #56]	; 0x38
        state = CONNECTING;
   b59ba:	2600      	movs	r6, #0
        while ((state != CONNECTED) &&
   b59bc:	f244 674f 	movw	r7, #17999	; 0x464f
    void disconnect() { client.stop(); }
   b59c0:	6820      	ldr	r0, [r4, #0]
   b59c2:	f002 fbd3 	bl	b816c <_ZN9TCPClient4stopEv>
        state = CONNECTING;
   b59c6:	7766      	strb	r6, [r4, #29]
        millis_time_t started = BlynkMillis();
   b59c8:	f001 f9ee 	bl	b6da8 <_Z11BlynkMillisv>
   b59cc:	4605      	mov	r5, r0
        while ((state != CONNECTED) &&
   b59ce:	7f63      	ldrb	r3, [r4, #29]
   b59d0:	2b01      	cmp	r3, #1
   b59d2:	d012      	beq.n	b59fa <setup+0xb2>
               (BlynkMillis() - started < timeout))
   b59d4:	f001 f9e8 	bl	b6da8 <_Z11BlynkMillisv>
   b59d8:	1b40      	subs	r0, r0, r5
        while ((state != CONNECTED) &&
   b59da:	42b8      	cmp	r0, r7
   b59dc:	d80a      	bhi.n	b59f4 <setup+0xac>
            run();
   b59de:	2100      	movs	r1, #0
   b59e0:	4620      	mov	r0, r4
   b59e2:	f7ff fd93 	bl	b550c <_ZN13BlynkProtocolI22BlynkTransportParticleE3runEb.isra.0>
        while ((state != CONNECTED) &&
   b59e6:	e7f2      	b.n	b59ce <setup+0x86>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
   b59e8:	4601      	mov	r1, r0
   b59ea:	466a      	mov	r2, sp
   b59ec:	4620      	mov	r0, r4
   b59ee:	f7ff facb 	bl	b4f88 <_ZNSt6vectorISt8functionIFvvEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
   b59f2:	e7cb      	b.n	b598c <setup+0x44>
        config(auth, domain, port);
        while(this->connect() != true) {}
   b59f4:	7f63      	ldrb	r3, [r4, #29]
   b59f6:	2b01      	cmp	r3, #1
   b59f8:	d1e2      	bne.n	b59c0 <setup+0x78>
  display.setup();
   b59fa:	480e      	ldr	r0, [pc, #56]	; (b5a34 <setup+0xec>)
   b59fc:	f001 f986 	bl	b6d0c <_ZN16OledWingAdafruit5setupEv>
  display.clearDisplay();
   b5a00:	480c      	ldr	r0, [pc, #48]	; (b5a34 <setup+0xec>)
   b5a02:	f000 fdd9 	bl	b65b8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  display.display();
   b5a06:	480b      	ldr	r0, [pc, #44]	; (b5a34 <setup+0xec>)
}
   b5a08:	b005      	add	sp, #20
   b5a0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  display.display();
   b5a0e:	f001 b841 	b.w	b6a94 <_ZN16Adafruit_SSD13067displayEv>
   b5a12:	bf00      	nop
   b5a14:	2003e690 	.word	0x2003e690
   b5a18:	000b4d21 	.word	0x000b4d21
   b5a1c:	000b4d9d 	.word	0x000b4d9d
   b5a20:	2003e6b0 	.word	0x2003e6b0
   b5a24:	000b4df7 	.word	0x000b4df7
   b5a28:	2003e5c0 	.word	0x2003e5c0
   b5a2c:	000b8dfb 	.word	0x000b8dfb
   b5a30:	000b8e1c 	.word	0x000b8e1c
   b5a34:	2003e61c 	.word	0x2003e61c

000b5a38 <_GLOBAL__sub_I_Blynk>:
   b5a38:	b510      	push	{r4, lr}
        : domain(NULL), port(0)
   b5a3a:	4c10      	ldr	r4, [pc, #64]	; (b5a7c <_GLOBAL__sub_I_Blynk+0x44>)
   b5a3c:	4620      	mov	r0, r4
   b5a3e:	f002 fbdf 	bl	b8200 <_ZN9TCPClientC1Ev>
   b5a42:	f104 001c 	add.w	r0, r4, #28
   b5a46:	f001 fd83 	bl	b7550 <_ZN9IPAddressC1Ev>
        , state(CONNECTING)
   b5a4a:	4b0d      	ldr	r3, [pc, #52]	; (b5a80 <_GLOBAL__sub_I_Blynk+0x48>)
   b5a4c:	2100      	movs	r1, #0
   b5a4e:	e9c3 4100 	strd	r4, r1, [r3]
   b5a52:	e9c3 1102 	strd	r1, r1, [r3, #8]
   b5a56:	e9c3 1104 	strd	r1, r1, [r3, #16]
   b5a5a:	6199      	str	r1, [r3, #24]
   b5a5c:	8399      	strh	r1, [r3, #28]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b5a5e:	4b09      	ldr	r3, [pc, #36]	; (b5a84 <_GLOBAL__sub_I_Blynk+0x4c>)
   b5a60:	6361      	str	r1, [r4, #52]	; 0x34
   b5a62:	e9c3 1100 	strd	r1, r1, [r3]
   b5a66:	6099      	str	r1, [r3, #8]
SYSTEM_THREAD(ENABLED)
   b5a68:	2001      	movs	r0, #1
   b5a6a:	8721      	strh	r1, [r4, #56]	; 0x38
   b5a6c:	f001 fbb6 	bl	b71dc <system_thread_set_state>
   b5a70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
OledWingAdafruit display;
   b5a74:	4804      	ldr	r0, [pc, #16]	; (b5a88 <_GLOBAL__sub_I_Blynk+0x50>)
   b5a76:	2107      	movs	r1, #7
   b5a78:	f001 b91a 	b.w	b6cb0 <_ZN16OledWingAdafruitC1Ei>
   b5a7c:	2003e5e0 	.word	0x2003e5e0
   b5a80:	2003e5c0 	.word	0x2003e5c0
   b5a84:	2003e6b0 	.word	0x2003e6b0
   b5a88:	2003e61c 	.word	0x2003e61c

000b5a8c <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5a90:	b085      	sub	sp, #20
   b5a92:	461f      	mov	r7, r3
   b5a94:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5a98:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5a9c:	eba8 0902 	sub.w	r9, r8, r2
   b5aa0:	eba7 0a01 	sub.w	sl, r7, r1
   b5aa4:	f1b9 0f00 	cmp.w	r9, #0
   b5aa8:	bfb8      	it	lt
   b5aaa:	f1c9 0900 	rsblt	r9, r9, #0
   b5aae:	f1ba 0f00 	cmp.w	sl, #0
   b5ab2:	bfb8      	it	lt
   b5ab4:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5ab8:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5aba:	4683      	mov	fp, r0
   b5abc:	460c      	mov	r4, r1
   b5abe:	4615      	mov	r5, r2
    if (steep) {
   b5ac0:	dd04      	ble.n	b5acc <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5ac2:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5ac4:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5ac6:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5ac8:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5aca:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5acc:	42bc      	cmp	r4, r7
   b5ace:	dd05      	ble.n	b5adc <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5ad0:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5ad2:	4645      	mov	r5, r8
   b5ad4:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5ad6:	4622      	mov	r2, r4
   b5ad8:	463c      	mov	r4, r7
   b5ada:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5adc:	1b3e      	subs	r6, r7, r4
   b5ade:	b2b2      	uxth	r2, r6
   b5ae0:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5ae2:	eba8 0205 	sub.w	r2, r8, r5
   b5ae6:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5aea:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5aee:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5af2:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5af6:	4545      	cmp	r5, r8
   b5af8:	bfb4      	ite	lt
   b5afa:	2201      	movlt	r2, #1
   b5afc:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
   b5b00:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5b02:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5b04:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5b06:	42bc      	cmp	r4, r7
   b5b08:	dc1c      	bgt.n	b5b44 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5b0a:	f8db 2000 	ldr.w	r2, [fp]
   b5b0e:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5b10:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5b12:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5b16:	bfc7      	ittee	gt
   b5b18:	4629      	movgt	r1, r5
   b5b1a:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5b1c:	462a      	movle	r2, r5
   b5b1e:	4621      	movle	r1, r4
   b5b20:	4658      	mov	r0, fp
   b5b22:	47c0      	blx	r8
        }
        err -= dy;
   b5b24:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5b26:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5b28:	1ab6      	subs	r6, r6, r2
   b5b2a:	b2b1      	uxth	r1, r6
   b5b2c:	b236      	sxth	r6, r6
        if (err < 0) {
   b5b2e:	2e00      	cmp	r6, #0
   b5b30:	da05      	bge.n	b5b3e <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5b32:	9a02      	ldr	r2, [sp, #8]
   b5b34:	4415      	add	r5, r2
            err += dx;
   b5b36:	9a00      	ldr	r2, [sp, #0]
   b5b38:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5b3a:	b22d      	sxth	r5, r5
            err += dx;
   b5b3c:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5b3e:	3401      	adds	r4, #1
   b5b40:	b224      	sxth	r4, r4
   b5b42:	e7e0      	b.n	b5b06 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5b44:	b005      	add	sp, #20
   b5b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5b4a <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5b4a:	4770      	bx	lr

000b5b4c <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5b4c:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5b4e:	6804      	ldr	r4, [r0, #0]
   b5b50:	6924      	ldr	r4, [r4, #16]
   b5b52:	46a4      	mov	ip, r4
}
   b5b54:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5b58:	4760      	bx	ip

000b5b5a <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5b5a:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5b5c:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5b5e:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5b62:	9502      	str	r5, [sp, #8]
   b5b64:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5b66:	46a4      	mov	ip, r4
}
   b5b68:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5b6a:	4760      	bx	ip

000b5b6c <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5b6c:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5b6e:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5b70:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5b74:	9502      	str	r5, [sp, #8]
   b5b76:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5b78:	46a4      	mov	ip, r4
}
   b5b7a:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5b7c:	4760      	bx	ip

000b5b7e <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5b7e:	b470      	push	{r4, r5, r6}
   b5b80:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5b84:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5b88:	6804      	ldr	r4, [r0, #0]
   b5b8a:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5b8e:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5b90:	46a4      	mov	ip, r4
}
   b5b92:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5b94:	4760      	bx	ip

000b5b96 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5b96:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5b9a:	461c      	mov	r4, r3
    startWrite();
   b5b9c:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5b9e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5ba2:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5ba4:	4605      	mov	r5, r0
   b5ba6:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5ba8:	3c01      	subs	r4, #1
   b5baa:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5bac:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5bae:	b224      	sxth	r4, r4
    startWrite();
   b5bb0:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5bb2:	682b      	ldr	r3, [r5, #0]
   b5bb4:	f8cd 8004 	str.w	r8, [sp, #4]
   b5bb8:	9400      	str	r4, [sp, #0]
   b5bba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5bbc:	4628      	mov	r0, r5
   b5bbe:	463b      	mov	r3, r7
   b5bc0:	4632      	mov	r2, r6
   b5bc2:	4639      	mov	r1, r7
   b5bc4:	47a0      	blx	r4
    endWrite();
   b5bc6:	682b      	ldr	r3, [r5, #0]
   b5bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5bca:	4628      	mov	r0, r5
}
   b5bcc:	b002      	add	sp, #8
   b5bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5bd2:	4718      	bx	r3

000b5bd4 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5bd8:	461d      	mov	r5, r3
    startWrite();
   b5bda:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5bdc:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5be0:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5be2:	4604      	mov	r4, r0
   b5be4:	4617      	mov	r7, r2
   b5be6:	460e      	mov	r6, r1
    startWrite();
   b5be8:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5bea:	e9cd 7800 	strd	r7, r8, [sp]
   b5bee:	6822      	ldr	r2, [r4, #0]
   b5bf0:	1e6b      	subs	r3, r5, #1
   b5bf2:	4433      	add	r3, r6
   b5bf4:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5bf6:	4620      	mov	r0, r4
   b5bf8:	b21b      	sxth	r3, r3
   b5bfa:	463a      	mov	r2, r7
   b5bfc:	4631      	mov	r1, r6
   b5bfe:	47a8      	blx	r5
    endWrite();
   b5c00:	6823      	ldr	r3, [r4, #0]
   b5c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c04:	4620      	mov	r0, r4
}
   b5c06:	b002      	add	sp, #8
   b5c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5c0c:	4718      	bx	r3

000b5c0e <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5c0e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5c12:	461e      	mov	r6, r3
    startWrite();
   b5c14:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5c16:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5c1a:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5c1c:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5c20:	460c      	mov	r4, r1
   b5c22:	4605      	mov	r5, r0
   b5c24:	4617      	mov	r7, r2
    startWrite();
   b5c26:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5c28:	4426      	add	r6, r4
   b5c2a:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5c2c:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5c2e:	da0b      	bge.n	b5c48 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5c30:	f8cd 8000 	str.w	r8, [sp]
   b5c34:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5c38:	4621      	mov	r1, r4
   b5c3a:	464b      	mov	r3, r9
   b5c3c:	463a      	mov	r2, r7
   b5c3e:	4628      	mov	r0, r5
   b5c40:	3401      	adds	r4, #1
   b5c42:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5c44:	b224      	sxth	r4, r4
   b5c46:	e7f0      	b.n	b5c2a <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5c4a:	4628      	mov	r0, r5
}
   b5c4c:	b002      	add	sp, #8
   b5c4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5c52:	4718      	bx	r3

000b5c54 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5c54:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5c56:	6802      	ldr	r2, [r0, #0]
   b5c58:	9101      	str	r1, [sp, #4]
   b5c5a:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5c5e:	9100      	str	r1, [sp, #0]
   b5c60:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5c62:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5c66:	2200      	movs	r2, #0
   b5c68:	4611      	mov	r1, r2
   b5c6a:	47a0      	blx	r4
}
   b5c6c:	b002      	add	sp, #8
   b5c6e:	bd10      	pop	{r4, pc}

000b5c70 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5c70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5c74:	4299      	cmp	r1, r3
        uint16_t color) {
   b5c76:	4616      	mov	r6, r2
   b5c78:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5c7c:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5c80:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5c82:	4680      	mov	r8, r0
   b5c84:	460d      	mov	r5, r1
   b5c86:	461c      	mov	r4, r3
    if(x0 == x1){
   b5c88:	d113      	bne.n	b5cb2 <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5c8a:	42be      	cmp	r6, r7
   b5c8c:	bfc8      	it	gt
   b5c8e:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5c90:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5c94:	bfc4      	itt	gt
   b5c96:	463e      	movgt	r6, r7
   b5c98:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5c9a:	1c7b      	adds	r3, r7, #1
   b5c9c:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5c9e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5ca0:	b21b      	sxth	r3, r3
   b5ca2:	4632      	mov	r2, r6
   b5ca4:	4629      	mov	r1, r5
   b5ca6:	4640      	mov	r0, r8
   b5ca8:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5caa:	b003      	add	sp, #12
   b5cac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5cb0:	4760      	bx	ip
    } else if(y0 == y1){
   b5cb2:	42be      	cmp	r6, r7
   b5cb4:	d10a      	bne.n	b5ccc <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5cb6:	4299      	cmp	r1, r3
   b5cb8:	bfc2      	ittt	gt
   b5cba:	460b      	movgt	r3, r1
   b5cbc:	4625      	movgt	r5, r4
   b5cbe:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5cc0:	1c63      	adds	r3, r4, #1
   b5cc2:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5cc6:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5cc8:	1b5b      	subs	r3, r3, r5
   b5cca:	e7e9      	b.n	b5ca0 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5ccc:	6953      	ldr	r3, [r2, #20]
   b5cce:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5cd0:	e9cd 7900 	strd	r7, r9, [sp]
   b5cd4:	f8d8 3000 	ldr.w	r3, [r8]
   b5cd8:	4640      	mov	r0, r8
   b5cda:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5cdc:	4632      	mov	r2, r6
   b5cde:	4623      	mov	r3, r4
   b5ce0:	4629      	mov	r1, r5
   b5ce2:	47b8      	blx	r7
        endWrite();
   b5ce4:	f8d8 3000 	ldr.w	r3, [r8]
   b5ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5cea:	4640      	mov	r0, r8
}
   b5cec:	b003      	add	sp, #12
   b5cee:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5cf2:	4718      	bx	r3

000b5cf4 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5cf4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5cf8:	461d      	mov	r5, r3
    startWrite();
   b5cfa:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5cfc:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5d00:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5d02:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5d06:	4604      	mov	r4, r0
   b5d08:	460f      	mov	r7, r1
   b5d0a:	4616      	mov	r6, r2
    startWrite();
   b5d0c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5d0e:	6823      	ldr	r3, [r4, #0]
   b5d10:	f8cd 8000 	str.w	r8, [sp]
   b5d14:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5d18:	4632      	mov	r2, r6
   b5d1a:	462b      	mov	r3, r5
   b5d1c:	4639      	mov	r1, r7
   b5d1e:	4620      	mov	r0, r4
   b5d20:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5d22:	6823      	ldr	r3, [r4, #0]
   b5d24:	f8cd 8000 	str.w	r8, [sp]
   b5d28:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
   b5d2c:	4432      	add	r2, r6
   b5d2e:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5d32:	4639      	mov	r1, r7
   b5d34:	462b      	mov	r3, r5
   b5d36:	4620      	mov	r0, r4
   b5d38:	b212      	sxth	r2, r2
   b5d3a:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5d3c:	6823      	ldr	r3, [r4, #0]
   b5d3e:	f8cd 8000 	str.w	r8, [sp]
   b5d42:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5d46:	4632      	mov	r2, r6
   b5d48:	464b      	mov	r3, r9
   b5d4a:	4639      	mov	r1, r7
   b5d4c:	4620      	mov	r0, r4
   b5d4e:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5d50:	1e6b      	subs	r3, r5, #1
   b5d52:	19d9      	adds	r1, r3, r7
   b5d54:	6823      	ldr	r3, [r4, #0]
   b5d56:	f8cd 8000 	str.w	r8, [sp]
   b5d5a:	6a1d      	ldr	r5, [r3, #32]
   b5d5c:	4620      	mov	r0, r4
   b5d5e:	464b      	mov	r3, r9
   b5d60:	4632      	mov	r2, r6
   b5d62:	b209      	sxth	r1, r1
   b5d64:	47a8      	blx	r5
    endWrite();
   b5d66:	6823      	ldr	r3, [r4, #0]
   b5d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d6a:	4620      	mov	r0, r4
}
   b5d6c:	b002      	add	sp, #8
   b5d6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5d72:	4718      	bx	r3

000b5d74 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5d74:	4770      	bx	lr

000b5d76 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5d76:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5d7a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5d7e:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5d80:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5d82:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5d86:	bf59      	ittee	pl
   b5d88:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5d8a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5d8c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5d8e:	81c3      	strhmi	r3, [r0, #14]
}
   b5d90:	4770      	bx	lr
	...

000b5d94 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5d94:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5d96:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5d98:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5d9a:	4a07      	ldr	r2, [pc, #28]	; (b5db8 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5d9c:	4d07      	ldr	r5, [pc, #28]	; (b5dbc <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5d9e:	8101      	strh	r1, [r0, #8]
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }

  public:
    Print() : write_error(0) {}
   b5da0:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5da2:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   b5da8:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5dac:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5dae:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5db0:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5db2:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5db4:	6204      	str	r4, [r0, #32]
}
   b5db6:	bd30      	pop	{r4, r5, pc}
   b5db8:	01000101 	.word	0x01000101
   b5dbc:	000b93a0 	.word	0x000b93a0

000b5dc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5dc4:	b089      	sub	sp, #36	; 0x24
   b5dc6:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b5dca:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5dcc:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b5dd0:	9304      	str	r3, [sp, #16]
   b5dd2:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b5dd6:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b5dd8:	9305      	str	r3, [sp, #20]
   b5dda:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b5dde:	4604      	mov	r4, r0
    startWrite();
   b5de0:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5de2:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b5de6:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b5dea:	bf48      	it	mi
   b5dec:	f108 020e 	addmi.w	r2, r8, #14
   b5df0:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b5df4:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b5df6:	4635      	mov	r5, r6
   b5df8:	9b03      	ldr	r3, [sp, #12]
   b5dfa:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b5dfc:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b5e00:	189a      	adds	r2, r3, r2
   b5e02:	9b05      	ldr	r3, [sp, #20]
   b5e04:	428b      	cmp	r3, r1
   b5e06:	b212      	sxth	r2, r2
   b5e08:	dd27      	ble.n	b5e5a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e0a:	9b04      	ldr	r3, [sp, #16]
   b5e0c:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b5e0e:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e12:	9306      	str	r3, [sp, #24]
   b5e14:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b5e18:	4580      	cmp	r8, r0
   b5e1a:	fa1f f189 	uxth.w	r1, r9
   b5e1e:	dd17      	ble.n	b5e50 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b5e20:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e22:	bf05      	ittet	eq
   b5e24:	9b06      	ldreq	r3, [sp, #24]
   b5e26:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b5e28:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b5e2a:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b5e2c:	bf18      	it	ne
   b5e2e:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b5e30:	062b      	lsls	r3, r5, #24
   b5e32:	d50a      	bpl.n	b5e4a <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b5e34:	9b02      	ldr	r3, [sp, #8]
   b5e36:	6820      	ldr	r0, [r4, #0]
   b5e38:	9207      	str	r2, [sp, #28]
   b5e3a:	4419      	add	r1, r3
   b5e3c:	6983      	ldr	r3, [r0, #24]
   b5e3e:	b209      	sxth	r1, r1
   b5e40:	461f      	mov	r7, r3
   b5e42:	4620      	mov	r0, r4
   b5e44:	4653      	mov	r3, sl
   b5e46:	47b8      	blx	r7
   b5e48:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b5e4a:	f109 0901 	add.w	r9, r9, #1
   b5e4e:	e7e1      	b.n	b5e14 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b5e50:	9b01      	ldr	r3, [sp, #4]
   b5e52:	3301      	adds	r3, #1
   b5e54:	9301      	str	r3, [sp, #4]
   b5e56:	445e      	add	r6, fp
   b5e58:	e7ce      	b.n	b5df8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b5e5a:	6823      	ldr	r3, [r4, #0]
   b5e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e5e:	4620      	mov	r0, r4
}
   b5e60:	b009      	add	sp, #36	; 0x24
   b5e62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b5e66:	4718      	bx	r3

000b5e68 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5e6c:	ed2d 8b02 	vpush	{d8}
   b5e70:	b091      	sub	sp, #68	; 0x44
   b5e72:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b5e74:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b5e76:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b5e7a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b5e7e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b5e82:	9103      	str	r1, [sp, #12]
   b5e84:	461f      	mov	r7, r3
   b5e86:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b5e8a:	9304      	str	r3, [sp, #16]
   b5e8c:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b5e8e:	2a00      	cmp	r2, #0
   b5e90:	f040 80c5 	bne.w	b601e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b5e94:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5e98:	428b      	cmp	r3, r1
   b5e9a:	f340 814c 	ble.w	b6136 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b5e9e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b5ea2:	42b3      	cmp	r3, r6
   b5ea4:	f340 8147 	ble.w	b6136 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5ea8:	2306      	movs	r3, #6
   b5eaa:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b5eae:	2b00      	cmp	r3, #0
   b5eb0:	f340 8141 	ble.w	b6136 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b5eb4:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b5eb8:	2b00      	cmp	r3, #0
   b5eba:	f340 813c 	ble.w	b6136 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b5ebe:	7f03      	ldrb	r3, [r0, #28]
   b5ec0:	b91b      	cbnz	r3, b5eca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b5ec2:	2faf      	cmp	r7, #175	; 0xaf
   b5ec4:	bf84      	itt	hi
   b5ec6:	3701      	addhi	r7, #1
   b5ec8:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b5eca:	f8db 3000 	ldr.w	r3, [fp]
   b5ece:	4658      	mov	r0, fp
   b5ed0:	695b      	ldr	r3, [r3, #20]
   b5ed2:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5ed4:	2205      	movs	r2, #5
   b5ed6:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5ed8:	2200      	movs	r2, #0
   b5eda:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5edc:	4a98      	ldr	r2, [pc, #608]	; (b6140 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b5ede:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b5ee2:	18d3      	adds	r3, r2, r3
   b5ee4:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b5ee6:	b2b3      	uxth	r3, r6
   b5ee8:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b5eea:	9a05      	ldr	r2, [sp, #20]
   b5eec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b5eee:	5c9b      	ldrb	r3, [r3, r2]
   b5ef0:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5ef2:	b2ab      	uxth	r3, r5
   b5ef4:	930b      	str	r3, [sp, #44]	; 0x2c
   b5ef6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b5efa:	9308      	str	r3, [sp, #32]
   b5efc:	9b03      	ldr	r3, [sp, #12]
   b5efe:	fb02 f905 	mul.w	r9, r2, r5
   b5f02:	fa19 f983 	uxtah	r9, r9, r3
   b5f06:	fa0f f389 	sxth.w	r3, r9
   b5f0a:	ee08 3a10 	vmov	s16, r3
   b5f0e:	2308      	movs	r3, #8
   b5f10:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b5f12:	9b03      	ldr	r3, [sp, #12]
   b5f14:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5f18:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b5f1c:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b5f20:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b5f22:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b5f26:	07d2      	lsls	r2, r2, #31
   b5f28:	d552      	bpl.n	b5fd0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b5f2a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5f2c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5f30:	d13e      	bne.n	b5fb0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b5f32:	2c01      	cmp	r4, #1
   b5f34:	d13c      	bne.n	b5fb0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b5f36:	699b      	ldr	r3, [r3, #24]
   b5f38:	9906      	ldr	r1, [sp, #24]
   b5f3a:	461f      	mov	r7, r3
   b5f3c:	9b04      	ldr	r3, [sp, #16]
   b5f3e:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b5f40:	b212      	sxth	r2, r2
   b5f42:	4651      	mov	r1, sl
   b5f44:	4658      	mov	r0, fp
   b5f46:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b5f48:	f109 0301 	add.w	r3, r9, #1
   b5f4c:	fa4f f983 	sxtb.w	r9, r3
   b5f50:	9b07      	ldr	r3, [sp, #28]
   b5f52:	085b      	lsrs	r3, r3, #1
   b5f54:	9307      	str	r3, [sp, #28]
   b5f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b5f58:	3b01      	subs	r3, #1
   b5f5a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5f5e:	930a      	str	r3, [sp, #40]	; 0x28
   b5f60:	d1de      	bne.n	b5f20 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b5f62:	9f05      	ldr	r7, [sp, #20]
   b5f64:	3701      	adds	r7, #1
   b5f66:	b27b      	sxtb	r3, r7
   b5f68:	9305      	str	r3, [sp, #20]
   b5f6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b5f6c:	3b01      	subs	r3, #1
   b5f6e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b5f72:	9309      	str	r3, [sp, #36]	; 0x24
   b5f74:	d1b9      	bne.n	b5eea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b5f76:	9b04      	ldr	r3, [sp, #16]
   b5f78:	4543      	cmp	r3, r8
   b5f7a:	d00f      	beq.n	b5f9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b5f7c:	2d01      	cmp	r5, #1
   b5f7e:	f8db 3000 	ldr.w	r3, [fp]
   b5f82:	d13b      	bne.n	b5ffc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5f84:	2c01      	cmp	r4, #1
   b5f86:	d139      	bne.n	b5ffc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b5f88:	9908      	ldr	r1, [sp, #32]
   b5f8a:	f8cd 8000 	str.w	r8, [sp]
   b5f8e:	3105      	adds	r1, #5
   b5f90:	6a1c      	ldr	r4, [r3, #32]
   b5f92:	4632      	mov	r2, r6
   b5f94:	2308      	movs	r3, #8
   b5f96:	b209      	sxth	r1, r1
   b5f98:	4658      	mov	r0, fp
   b5f9a:	47a0      	blx	r4
        endWrite();
   b5f9c:	f8db 3000 	ldr.w	r3, [fp]
   b5fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5fa2:	4658      	mov	r0, fp
}
   b5fa4:	b011      	add	sp, #68	; 0x44
   b5fa6:	ecbd 8b02 	vpop	{d8}
   b5faa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b5fae:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b5fb0:	9906      	ldr	r1, [sp, #24]
   b5fb2:	fb14 f202 	smulbb	r2, r4, r2
   b5fb6:	440a      	add	r2, r1
   b5fb8:	9904      	ldr	r1, [sp, #16]
   b5fba:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5fbc:	9400      	str	r4, [sp, #0]
   b5fbe:	69db      	ldr	r3, [r3, #28]
   b5fc0:	ee18 1a10 	vmov	r1, s16
   b5fc4:	461f      	mov	r7, r3
   b5fc6:	b212      	sxth	r2, r2
   b5fc8:	462b      	mov	r3, r5
   b5fca:	4658      	mov	r0, fp
   b5fcc:	47b8      	blx	r7
   b5fce:	e7bb      	b.n	b5f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b5fd0:	9a04      	ldr	r2, [sp, #16]
   b5fd2:	4542      	cmp	r2, r8
   b5fd4:	d0b8      	beq.n	b5f48 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b5fd6:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b5fd8:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b5fdc:	d107      	bne.n	b5fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b5fde:	2c01      	cmp	r4, #1
   b5fe0:	d105      	bne.n	b5fee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b5fe2:	699b      	ldr	r3, [r3, #24]
   b5fe4:	9906      	ldr	r1, [sp, #24]
   b5fe6:	461f      	mov	r7, r3
   b5fe8:	440a      	add	r2, r1
   b5fea:	4643      	mov	r3, r8
   b5fec:	e7a8      	b.n	b5f40 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b5fee:	9906      	ldr	r1, [sp, #24]
   b5ff0:	f8cd 8004 	str.w	r8, [sp, #4]
   b5ff4:	fb14 f202 	smulbb	r2, r4, r2
   b5ff8:	440a      	add	r2, r1
   b5ffa:	e7df      	b.n	b5fbc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b5ffc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5ffe:	f8cd 8004 	str.w	r8, [sp, #4]
   b6002:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b6006:	9a08      	ldr	r2, [sp, #32]
   b6008:	00e4      	lsls	r4, r4, #3
   b600a:	440a      	add	r2, r1
   b600c:	4611      	mov	r1, r2
   b600e:	9400      	str	r4, [sp, #0]
   b6010:	69dc      	ldr	r4, [r3, #28]
   b6012:	4632      	mov	r2, r6
   b6014:	462b      	mov	r3, r5
   b6016:	b209      	sxth	r1, r1
   b6018:	4658      	mov	r0, fp
   b601a:	47a0      	blx	r4
        endWrite();
   b601c:	e7be      	b.n	b5f9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b601e:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b6020:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b6022:	6812      	ldr	r2, [r2, #0]
   b6024:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b6026:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b6028:	b2ff      	uxtb	r7, r7
   b602a:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b602e:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b6032:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b6034:	789a      	ldrb	r2, [r3, #2]
   b6036:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b6038:	78da      	ldrb	r2, [r3, #3]
   b603a:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b603c:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b603e:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b6042:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b6046:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b6048:	d801      	bhi.n	b604e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b604a:	2c01      	cmp	r4, #1
   b604c:	d957      	bls.n	b60fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b604e:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b6052:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b6054:	fa0f f38a 	sxth.w	r3, sl
   b6058:	9307      	str	r3, [sp, #28]
        startWrite();
   b605a:	f8db 3000 	ldr.w	r3, [fp]
   b605e:	4658      	mov	r0, fp
   b6060:	695b      	ldr	r3, [r3, #20]
   b6062:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6064:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6066:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b606a:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b606c:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6070:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b6072:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6074:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b6076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6078:	429f      	cmp	r7, r3
   b607a:	d28f      	bcs.n	b5f9c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b607c:	9b07      	ldr	r3, [sp, #28]
   b607e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6080:	443b      	add	r3, r7
   b6082:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b6086:	2200      	movs	r2, #0
   b6088:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b608a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b608c:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b608e:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6092:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6096:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b609a:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b609c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b609e:	9905      	ldr	r1, [sp, #20]
   b60a0:	4291      	cmp	r1, r2
   b60a2:	d241      	bcs.n	b6128 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b60a4:	1c5a      	adds	r2, r3, #1
   b60a6:	b2d2      	uxtb	r2, r2
   b60a8:	075b      	lsls	r3, r3, #29
   b60aa:	920d      	str	r2, [sp, #52]	; 0x34
   b60ac:	d107      	bne.n	b60be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b60ae:	9b06      	ldr	r3, [sp, #24]
   b60b0:	9906      	ldr	r1, [sp, #24]
   b60b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b60b4:	3301      	adds	r3, #1
   b60b6:	b29b      	uxth	r3, r3
   b60b8:	f812 9001 	ldrb.w	r9, [r2, r1]
   b60bc:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b60be:	f019 0f80 	tst.w	r9, #128	; 0x80
   b60c2:	d012      	beq.n	b60ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b60c4:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60c6:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b60ca:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b60ce:	d11a      	bne.n	b6106 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b60d0:	2c01      	cmp	r4, #1
   b60d2:	d118      	bne.n	b6106 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b60d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b60d6:	699b      	ldr	r3, [r3, #24]
   b60d8:	4411      	add	r1, r2
   b60da:	9a05      	ldr	r2, [sp, #20]
   b60dc:	4411      	add	r1, r2
   b60de:	461e      	mov	r6, r3
   b60e0:	4652      	mov	r2, sl
   b60e2:	9b04      	ldr	r3, [sp, #16]
   b60e4:	b209      	sxth	r1, r1
   b60e6:	4658      	mov	r0, fp
   b60e8:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b60ea:	9e05      	ldr	r6, [sp, #20]
   b60ec:	3601      	adds	r6, #1
   b60ee:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b60f0:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b60f4:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b60f6:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b60fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b60fc:	e7ce      	b.n	b609c <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b60fe:	2300      	movs	r3, #0
   b6100:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6104:	e7a9      	b.n	b605a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6106:	9805      	ldr	r0, [sp, #20]
   b6108:	9a08      	ldr	r2, [sp, #32]
   b610a:	4402      	add	r2, r0
   b610c:	fb02 1105 	mla	r1, r2, r5, r1
   b6110:	9a04      	ldr	r2, [sp, #16]
   b6112:	e9cd 4200 	strd	r4, r2, [sp]
   b6116:	69db      	ldr	r3, [r3, #28]
   b6118:	ee18 2a10 	vmov	r2, s16
   b611c:	461e      	mov	r6, r3
   b611e:	b209      	sxth	r1, r1
   b6120:	462b      	mov	r3, r5
   b6122:	4658      	mov	r0, fp
   b6124:	47b0      	blx	r6
   b6126:	e7e0      	b.n	b60ea <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b6128:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b612a:	3701      	adds	r7, #1
   b612c:	4498      	add	r8, r3
   b612e:	fa5f f888 	uxtb.w	r8, r8
   b6132:	b2ff      	uxtb	r7, r7
   b6134:	e79f      	b.n	b6076 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b6136:	b011      	add	sp, #68	; 0x44
   b6138:	ecbd 8b02 	vpop	{d8}
   b613c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6140:	000b8e97 	.word	0x000b8e97

000b6144 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b6144:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b6146:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b6148:	b085      	sub	sp, #20
   b614a:	4604      	mov	r4, r0
   b614c:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b614e:	2a00      	cmp	r2, #0
   b6150:	d134      	bne.n	b61bc <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b6152:	290a      	cmp	r1, #10
   b6154:	d108      	bne.n	b6168 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b6156:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b6158:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b615a:	7e42      	ldrb	r2, [r0, #25]
   b615c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b6160:	8263      	strh	r3, [r4, #18]
}
   b6162:	2001      	movs	r0, #1
   b6164:	b005      	add	sp, #20
   b6166:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b6168:	290d      	cmp	r1, #13
   b616a:	d0fa      	beq.n	b6162 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b616c:	7ee1      	ldrb	r1, [r4, #27]
   b616e:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6170:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6172:	b171      	cbz	r1, b6192 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6174:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b6178:	2106      	movs	r1, #6
   b617a:	fb11 6100 	smlabb	r1, r1, r0, r6
   b617e:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b6182:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6184:	bfc1      	itttt	gt
   b6186:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b618a:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b618c:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6190:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6192:	8ae2      	ldrh	r2, [r4, #22]
   b6194:	9201      	str	r2, [sp, #4]
   b6196:	8aa2      	ldrh	r2, [r4, #20]
   b6198:	9200      	str	r2, [sp, #0]
   b619a:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b619e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b61a2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b61a6:	4620      	mov	r0, r4
   b61a8:	f7ff fe5e 	bl	b5e68 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b61ac:	7e23      	ldrb	r3, [r4, #24]
   b61ae:	8a22      	ldrh	r2, [r4, #16]
   b61b0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b61b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b61b8:	8223      	strh	r3, [r4, #16]
   b61ba:	e7d2      	b.n	b6162 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b61bc:	290a      	cmp	r1, #10
   b61be:	d107      	bne.n	b61d0 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b61c0:	2300      	movs	r3, #0
   b61c2:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b61c4:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b61c6:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b61c8:	8a43      	ldrh	r3, [r0, #18]
   b61ca:	fb01 3302 	mla	r3, r1, r2, r3
   b61ce:	e7c7      	b.n	b6160 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b61d0:	290d      	cmp	r1, #13
   b61d2:	d0c6      	beq.n	b6162 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b61d4:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b61d6:	42a9      	cmp	r1, r5
   b61d8:	d3c3      	bcc.n	b6162 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b61da:	7a51      	ldrb	r1, [r2, #9]
   b61dc:	4299      	cmp	r1, r3
   b61de:	d3c0      	bcc.n	b6162 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b61e0:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b61e2:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b61e4:	b2ed      	uxtb	r5, r5
   b61e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b61ea:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b61ec:	b328      	cbz	r0, b623a <_ZN12Adafruit_GFX5writeEh+0xf6>
   b61ee:	78e9      	ldrb	r1, [r5, #3]
   b61f0:	b319      	cbz	r1, b623a <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b61f2:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b61f4:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b61f6:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b61f8:	b191      	cbz	r1, b6220 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b61fa:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b61fe:	4408      	add	r0, r1
   b6200:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6204:	fb06 1100 	mla	r1, r6, r0, r1
   b6208:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b620c:	4281      	cmp	r1, r0
   b620e:	dd07      	ble.n	b6220 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b6210:	2000      	movs	r0, #0
   b6212:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b6214:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b6218:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b621a:	fb02 1207 	mla	r2, r2, r7, r1
   b621e:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6220:	8ae2      	ldrh	r2, [r4, #22]
   b6222:	9201      	str	r2, [sp, #4]
   b6224:	8aa2      	ldrh	r2, [r4, #20]
   b6226:	9200      	str	r2, [sp, #0]
   b6228:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b622c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6230:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6234:	4620      	mov	r0, r4
   b6236:	f7ff fe17 	bl	b5e68 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b623a:	7929      	ldrb	r1, [r5, #4]
   b623c:	7e22      	ldrb	r2, [r4, #24]
   b623e:	8a23      	ldrh	r3, [r4, #16]
   b6240:	fb01 3302 	mla	r3, r1, r2, r3
   b6244:	e7b8      	b.n	b61b8 <_ZN12Adafruit_GFX5writeEh+0x74>

000b6246 <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b6246:	2901      	cmp	r1, #1
   b6248:	bf38      	it	cc
   b624a:	2101      	movcc	r1, #1
   b624c:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b624e:	7641      	strb	r1, [r0, #25]
}
   b6250:	4770      	bx	lr

000b6252 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b6252:	4770      	bx	lr

000b6254 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b6254:	b510      	push	{r4, lr}
  }
   b6256:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b6258:	4604      	mov	r4, r0
  }
   b625a:	f7fe fd48 	bl	b4cee <_ZdlPvj>
   b625e:	4620      	mov	r0, r4
   b6260:	bd10      	pop	{r4, pc}

000b6262 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b6262:	b40e      	push	{r1, r2, r3}
   b6264:	b503      	push	{r0, r1, lr}
   b6266:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b6268:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b626a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b626e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b6270:	f001 fadf 	bl	b7832 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b6274:	b002      	add	sp, #8
   b6276:	f85d eb04 	ldr.w	lr, [sp], #4
   b627a:	b003      	add	sp, #12
   b627c:	4770      	bx	lr
	...

000b6280 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b6280:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6282:	4604      	mov	r4, r0
   b6284:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b6286:	7922      	ldrb	r2, [r4, #4]
   b6288:	68a3      	ldr	r3, [r4, #8]
   b628a:	b132      	cbz	r2, b629a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b628c:	b9a3      	cbnz	r3, b62b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b628e:	490b      	ldr	r1, [pc, #44]	; (b62bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b6290:	b002      	add	sp, #8
   b6292:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b6296:	f001 ba91 	b.w	b77bc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b629a:	4a09      	ldr	r2, [pc, #36]	; (b62c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b629c:	7b26      	ldrb	r6, [r4, #12]
   b629e:	4d09      	ldr	r5, [pc, #36]	; (b62c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b62a0:	4909      	ldr	r1, [pc, #36]	; (b62c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b62a2:	7b64      	ldrb	r4, [r4, #13]
   b62a4:	2e01      	cmp	r6, #1
   b62a6:	bf18      	it	ne
   b62a8:	4629      	movne	r1, r5
   b62aa:	e9cd 1400 	strd	r1, r4, [sp]
   b62ae:	4907      	ldr	r1, [pc, #28]	; (b62cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b62b0:	f7ff ffd7 	bl	b6262 <_ZN5Print6printfEPKcz>
  }
   b62b4:	b002      	add	sp, #8
   b62b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b62b8:	4a05      	ldr	r2, [pc, #20]	; (b62d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b62ba:	e7ef      	b.n	b629c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b62bc:	000b9401 	.word	0x000b9401
   b62c0:	000b93f8 	.word	0x000b93f8
   b62c4:	000b93fd 	.word	0x000b93fd
   b62c8:	000b93f9 	.word	0x000b93f9
   b62cc:	000b9417 	.word	0x000b9417
   b62d0:	000b93f0 	.word	0x000b93f0

000b62d4 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b62d4:	b510      	push	{r4, lr}
   b62d6:	4b04      	ldr	r3, [pc, #16]	; (b62e8 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b62d8:	6003      	str	r3, [r0, #0]
   b62da:	4604      	mov	r4, r0
  if(buffer) {
   b62dc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b62de:	b108      	cbz	r0, b62e4 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b62e0:	f001 f810 	bl	b7304 <free>
    buffer = NULL;
  }
}
   b62e4:	4620      	mov	r0, r4
   b62e6:	bd10      	pop	{r4, pc}
   b62e8:	000b98f0 	.word	0x000b98f0

000b62ec <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b62ec:	b510      	push	{r4, lr}
   b62ee:	4604      	mov	r4, r0
}
   b62f0:	f7ff fff0 	bl	b62d4 <_ZN16Adafruit_SSD1306D1Ev>
   b62f4:	4620      	mov	r0, r4
   b62f6:	2150      	movs	r1, #80	; 0x50
   b62f8:	f7fe fcf9 	bl	b4cee <_ZdlPvj>
   b62fc:	4620      	mov	r0, r4
   b62fe:	bd10      	pop	{r4, pc}

000b6300 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6300:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b6302:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b6304:	db4b      	blt.n	b639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6306:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b630a:	428c      	cmp	r4, r1
   b630c:	dd47      	ble.n	b639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b630e:	2a00      	cmp	r2, #0
   b6310:	db45      	blt.n	b639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b6312:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b6316:	4294      	cmp	r4, r2
   b6318:	dd41      	ble.n	b639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b631a:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b631c:	2c02      	cmp	r4, #2
   b631e:	d01f      	beq.n	b6360 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b6320:	2c03      	cmp	r4, #3
   b6322:	d026      	beq.n	b6372 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b6324:	2c01      	cmp	r4, #1
   b6326:	d104      	bne.n	b6332 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b6328:	8904      	ldrh	r4, [r0, #8]
   b632a:	43d2      	mvns	r2, r2
   b632c:	4414      	add	r4, r2
      break;
   b632e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b6330:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b6332:	2b01      	cmp	r3, #1
   b6334:	d023      	beq.n	b637e <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b6336:	2b02      	cmp	r3, #2
   b6338:	d032      	beq.n	b63a0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b633a:	bb83      	cbnz	r3, b639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b633c:	2a00      	cmp	r2, #0
   b633e:	4613      	mov	r3, r2
   b6340:	8904      	ldrh	r4, [r0, #8]
   b6342:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6344:	bfb8      	it	lt
   b6346:	1dd3      	addlt	r3, r2, #7
   b6348:	10db      	asrs	r3, r3, #3
   b634a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b634e:	f002 0207 	and.w	r2, r2, #7
   b6352:	2301      	movs	r3, #1
   b6354:	4093      	lsls	r3, r2
   b6356:	5c42      	ldrb	r2, [r0, r1]
   b6358:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b635c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b635e:	e01e      	b.n	b639e <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b6360:	8904      	ldrh	r4, [r0, #8]
   b6362:	3c01      	subs	r4, #1
   b6364:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b6366:	8944      	ldrh	r4, [r0, #10]
   b6368:	43d2      	mvns	r2, r2
   b636a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b636c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b636e:	b212      	sxth	r2, r2
      break;
   b6370:	e7df      	b.n	b6332 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b6372:	8944      	ldrh	r4, [r0, #10]
   b6374:	3c01      	subs	r4, #1
   b6376:	1a64      	subs	r4, r4, r1
      break;
   b6378:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b637a:	b222      	sxth	r2, r4
      break;
   b637c:	e7d9      	b.n	b6332 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b637e:	2a00      	cmp	r2, #0
   b6380:	8904      	ldrh	r4, [r0, #8]
   b6382:	4613      	mov	r3, r2
   b6384:	bfb8      	it	lt
   b6386:	1dd3      	addlt	r3, r2, #7
   b6388:	10db      	asrs	r3, r3, #3
   b638a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b638e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b6390:	f002 0007 	and.w	r0, r2, #7
   b6394:	2201      	movs	r2, #1
   b6396:	4082      	lsls	r2, r0
   b6398:	5c58      	ldrb	r0, [r3, r1]
   b639a:	4302      	orrs	r2, r0
   b639c:	545a      	strb	r2, [r3, r1]
}
   b639e:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b63a0:	2a00      	cmp	r2, #0
   b63a2:	4613      	mov	r3, r2
   b63a4:	8904      	ldrh	r4, [r0, #8]
   b63a6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b63a8:	bfb8      	it	lt
   b63aa:	1dd3      	addlt	r3, r2, #7
   b63ac:	10db      	asrs	r3, r3, #3
   b63ae:	fb13 1104 	smlabb	r1, r3, r4, r1
   b63b2:	f002 0207 	and.w	r2, r2, #7
   b63b6:	2301      	movs	r3, #1
   b63b8:	fa03 f202 	lsl.w	r2, r3, r2
   b63bc:	5c43      	ldrb	r3, [r0, r1]
   b63be:	405a      	eors	r2, r3
   b63c0:	e7cc      	b.n	b635c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b63c4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b63c4:	b570      	push	{r4, r5, r6, lr}
   b63c6:	4604      	mov	r4, r0
   b63c8:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b63ca:	2600      	movs	r6, #0
   b63cc:	f7ff fce2 	bl	b5d94 <_ZN12Adafruit_GFXC1Ess>
   b63d0:	4b11      	ldr	r3, [pc, #68]	; (b6418 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b63d2:	6023      	str	r3, [r4, #0]
   b63d4:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b63d6:	b915      	cbnz	r5, b63de <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b63d8:	f002 f9e6 	bl	b87a8 <_Z19__fetch_global_Wirev>
   b63dc:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b63de:	23ff      	movs	r3, #255	; 0xff
   b63e0:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b63e4:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b63e8:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b63ec:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b63f0:	4b0a      	ldr	r3, [pc, #40]	; (b641c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b63f2:	63a3      	str	r3, [r4, #56]	; 0x38
   b63f4:	2301      	movs	r3, #1
   b63f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b63fa:	9b05      	ldr	r3, [sp, #20]
   b63fc:	64a3      	str	r3, [r4, #72]	; 0x48
   b63fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b6402:	9b06      	ldr	r3, [sp, #24]
   b6404:	86a2      	strh	r2, [r4, #52]	; 0x34
   b6406:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b640a:	6426      	str	r6, [r4, #64]	; 0x40
   b640c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b6410:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b6412:	4620      	mov	r0, r4
   b6414:	bd70      	pop	{r4, r5, r6, pc}
   b6416:	bf00      	nop
   b6418:	000b98f0 	.word	0x000b98f0
   b641c:	000b943c 	.word	0x000b943c

000b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6422:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6424:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b6426:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6428:	b190      	cbz	r0, b6450 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b642a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b642e:	f001 f84b 	bl	b74c8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6432:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6434:	6803      	ldr	r3, [r0, #0]
   b6436:	2100      	movs	r1, #0
   b6438:	689b      	ldr	r3, [r3, #8]
   b643a:	4798      	blx	r3
    WIRE_WRITE(c);
   b643c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b643e:	6803      	ldr	r3, [r0, #0]
   b6440:	4629      	mov	r1, r5
   b6442:	689b      	ldr	r3, [r3, #8]
   b6444:	4798      	blx	r3
    wire->endTransmission();
   b6446:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b6448:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b644c:	f001 b843 	b.w	b74d6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b6450:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6454:	4601      	mov	r1, r0
   b6456:	b298      	uxth	r0, r3
   b6458:	f002 f921 	bl	b869e <digitalWrite>
  if(spi) {
   b645c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b645e:	b120      	cbz	r0, b646a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b6460:	4629      	mov	r1, r5
}
   b6462:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b6466:	f001 bac7 	b.w	b79f8 <_ZN8SPIClass8transferEh>
   b646a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b646c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b646e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6472:	ea05 0107 	and.w	r1, r5, r7
   b6476:	b280      	uxth	r0, r0
   b6478:	f002 f911 	bl	b869e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b647c:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6480:	2101      	movs	r1, #1
   b6482:	b280      	uxth	r0, r0
   b6484:	f002 f90b 	bl	b869e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6488:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b648c:	2100      	movs	r1, #0
   b648e:	b280      	uxth	r0, r0
   b6490:	f002 f905 	bl	b869e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6494:	3e01      	subs	r6, #1
   b6496:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b649a:	d1e8      	bne.n	b646e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b649c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b649e <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b649e:	b538      	push	{r3, r4, r5, lr}
   b64a0:	4604      	mov	r4, r0
  TRANSACTION_START
   b64a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b64a4:	460d      	mov	r5, r1
  TRANSACTION_START
   b64a6:	b180      	cbz	r0, b64ca <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b64a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b64aa:	f000 ffff 	bl	b74ac <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b64ae:	2d00      	cmp	r5, #0
   b64b0:	4620      	mov	r0, r4
   b64b2:	bf14      	ite	ne
   b64b4:	21a7      	movne	r1, #167	; 0xa7
   b64b6:	21a6      	moveq	r1, #166	; 0xa6
   b64b8:	f7ff ffb2 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b64bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b64be:	b188      	cbz	r0, b64e4 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b64c0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b64c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b64c6:	f000 bff1 	b.w	b74ac <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b64ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b64cc:	b118      	cbz	r0, b64d6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b64ce:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b64d2:	f001 fa23 	bl	b791c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b64d6:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b64da:	2100      	movs	r1, #0
   b64dc:	b280      	uxth	r0, r0
   b64de:	f002 f8de 	bl	b869e <digitalWrite>
   b64e2:	e7e4      	b.n	b64ae <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b64e4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b64e8:	2101      	movs	r1, #1
   b64ea:	b280      	uxth	r0, r0
   b64ec:	f002 f8d7 	bl	b869e <digitalWrite>
   b64f0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b64f2:	b118      	cbz	r0, b64fc <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b64f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b64f8:	f001 b9f6 	b.w	b78e8 <_ZN8SPIClass14endTransactionEv>
}
   b64fc:	bd38      	pop	{r3, r4, r5, pc}

000b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b64fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6502:	4604      	mov	r4, r0
  if(wire) { // I2C
   b6504:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b6506:	460d      	mov	r5, r1
  if(wire) { // I2C
   b6508:	188f      	adds	r7, r1, r2
   b650a:	b340      	cbz	r0, b655e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b650c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6510:	f000 ffda 	bl	b74c8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6514:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6516:	6803      	ldr	r3, [r0, #0]
   b6518:	2100      	movs	r1, #0
   b651a:	689b      	ldr	r3, [r3, #8]
   b651c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b651e:	2601      	movs	r6, #1
    while(n--) {
   b6520:	42af      	cmp	r7, r5
        wire->endTransmission();
   b6522:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b6524:	d017      	beq.n	b6556 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b6526:	2e1f      	cmp	r6, #31
   b6528:	d90c      	bls.n	b6544 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b652a:	f000 ffd4 	bl	b74d6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b652e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6532:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6534:	f000 ffc8 	bl	b74c8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b6538:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b653a:	6803      	ldr	r3, [r0, #0]
   b653c:	2100      	movs	r1, #0
   b653e:	689b      	ldr	r3, [r3, #8]
   b6540:	4798      	blx	r3
        bytesOut = 1;
   b6542:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b6544:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6546:	f815 1b01 	ldrb.w	r1, [r5], #1
   b654a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b654c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b654e:	689b      	ldr	r3, [r3, #8]
   b6550:	4798      	blx	r3
      bytesOut++;
   b6552:	b2f6      	uxtb	r6, r6
    while(n--) {
   b6554:	e7e4      	b.n	b6520 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b6556:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b655a:	f000 bfbc 	b.w	b74d6 <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b655e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b6562:	4601      	mov	r1, r0
   b6564:	b298      	uxth	r0, r3
   b6566:	f002 f89a 	bl	b869e <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b656a:	42bd      	cmp	r5, r7
   b656c:	d022      	beq.n	b65b4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b656e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b6570:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6574:	b118      	cbz	r0, b657e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b6576:	4649      	mov	r1, r9
   b6578:	f001 fa3e 	bl	b79f8 <_ZN8SPIClass8transferEh>
   b657c:	e7f5      	b.n	b656a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b657e:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6580:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6584:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6588:	ea09 0108 	and.w	r1, r9, r8
   b658c:	b280      	uxth	r0, r0
   b658e:	f002 f886 	bl	b869e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6592:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6596:	2101      	movs	r1, #1
   b6598:	b280      	uxth	r0, r0
   b659a:	f002 f880 	bl	b869e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b659e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b65a2:	2100      	movs	r1, #0
   b65a4:	b280      	uxth	r0, r0
   b65a6:	f002 f87a 	bl	b869e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b65aa:	3e01      	subs	r6, #1
   b65ac:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b65b0:	d1e8      	bne.n	b6584 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b65b2:	e7da      	b.n	b656a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b65b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b65b8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b65b8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b65bc:	1dda      	adds	r2, r3, #7
   b65be:	bf48      	it	mi
   b65c0:	f103 020e 	addmi.w	r2, r3, #14
   b65c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b65c8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b65ca:	10d2      	asrs	r2, r2, #3
   b65cc:	435a      	muls	r2, r3
   b65ce:	2100      	movs	r1, #0
   b65d0:	f002 ba84 	b.w	b8adc <memset>

000b65d4 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b65d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b65d8:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b65da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b65dc:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b65e0:	4604      	mov	r4, r0
   b65e2:	460f      	mov	r7, r1
   b65e4:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b65e6:	b1c3      	cbz	r3, b661a <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b65e8:	4620      	mov	r0, r4
   b65ea:	f7ff ffe5 	bl	b65b8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b65ee:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b65f2:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b65f6:	2820      	cmp	r0, #32
   b65f8:	dc21      	bgt.n	b663e <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b65fa:	2320      	movs	r3, #32
   b65fc:	2201      	movs	r2, #1
   b65fe:	3820      	subs	r0, #32
   b6600:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b6604:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b6608:	2373      	movs	r3, #115	; 0x73
   b660a:	3973      	subs	r1, #115	; 0x73
   b660c:	9300      	str	r3, [sp, #0]
   b660e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b6612:	4b89      	ldr	r3, [pc, #548]	; (b6838 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b6614:	f340 024f 	sbfx	r2, r0, #1, #16
   b6618:	e021      	b.n	b665e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b661a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b661e:	1dd8      	adds	r0, r3, #7
   b6620:	bf48      	it	mi
   b6622:	f103 000e 	addmi.w	r0, r3, #14
   b6626:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b662a:	10c0      	asrs	r0, r0, #3
   b662c:	4358      	muls	r0, r3
   b662e:	f000 fe61 	bl	b72f4 <malloc>
   b6632:	62e0      	str	r0, [r4, #44]	; 0x2c
   b6634:	2800      	cmp	r0, #0
   b6636:	d1d7      	bne.n	b65e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b6638:	b004      	add	sp, #16
   b663a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b663e:	3840      	subs	r0, #64	; 0x40
   b6640:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b6644:	fa02 f280 	sxtah	r2, r2, r0
   b6648:	2340      	movs	r3, #64	; 0x40
   b664a:	2001      	movs	r0, #1
   b664c:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b6650:	2352      	movs	r3, #82	; 0x52
   b6652:	3952      	subs	r1, #82	; 0x52
   b6654:	9300      	str	r3, [sp, #0]
   b6656:	4b79      	ldr	r3, [pc, #484]	; (b683c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b6658:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b665c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b665e:	4620      	mov	r0, r4
   b6660:	f341 014f 	sbfx	r1, r1, #1, #16
   b6664:	f7ff fbac 	bl	b5dc0 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b6668:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b666a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b666e:	2800      	cmp	r0, #0
   b6670:	d078      	beq.n	b6764 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6672:	2d00      	cmp	r5, #0
   b6674:	d174      	bne.n	b6760 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b6676:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b667a:	2b20      	cmp	r3, #32
   b667c:	bf0c      	ite	eq
   b667e:	253c      	moveq	r5, #60	; 0x3c
   b6680:	253d      	movne	r5, #61	; 0x3d
   b6682:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b6686:	f1b8 0f00 	cmp.w	r8, #0
   b668a:	d001      	beq.n	b6690 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b668c:	f000 ff12 	bl	b74b4 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b6690:	b1fe      	cbz	r6, b66d2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b6692:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b6696:	2800      	cmp	r0, #0
   b6698:	db1b      	blt.n	b66d2 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b669a:	2101      	movs	r1, #1
   b669c:	b280      	uxth	r0, r0
   b669e:	f001 ffed 	bl	b867c <pinMode>
    digitalWrite(rstPin, HIGH);
   b66a2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b66a6:	2101      	movs	r1, #1
   b66a8:	b280      	uxth	r0, r0
   b66aa:	f001 fff8 	bl	b869e <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b66ae:	2001      	movs	r0, #1
   b66b0:	f000 fe68 	bl	b7384 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b66b4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b66b8:	2100      	movs	r1, #0
   b66ba:	b280      	uxth	r0, r0
   b66bc:	f001 ffef 	bl	b869e <digitalWrite>
    delay(10);                  // Wait 10 ms
   b66c0:	200a      	movs	r0, #10
   b66c2:	f000 fe5f 	bl	b7384 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b66c6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b66ca:	2101      	movs	r1, #1
   b66cc:	b280      	uxth	r0, r0
   b66ce:	f001 ffe6 	bl	b869e <digitalWrite>
  TRANSACTION_START
   b66d2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b66d4:	2800      	cmp	r0, #0
   b66d6:	d074      	beq.n	b67c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b66d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b66da:	f000 fee7 	bl	b74ac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b66de:	2204      	movs	r2, #4
   b66e0:	4957      	ldr	r1, [pc, #348]	; (b6840 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b66e2:	4620      	mov	r0, r4
   b66e4:	f7ff ff0b 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b66e8:	8961      	ldrh	r1, [r4, #10]
   b66ea:	3901      	subs	r1, #1
   b66ec:	b2c9      	uxtb	r1, r1
   b66ee:	4620      	mov	r0, r4
   b66f0:	f7ff fe96 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b66f4:	4953      	ldr	r1, [pc, #332]	; (b6844 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b66f6:	2204      	movs	r2, #4
   b66f8:	4620      	mov	r0, r4
   b66fa:	f7ff ff00 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b66fe:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6702:	2b01      	cmp	r3, #1
   b6704:	bf0c      	ite	eq
   b6706:	2110      	moveq	r1, #16
   b6708:	2114      	movne	r1, #20
   b670a:	4620      	mov	r0, r4
   b670c:	f7ff fe88 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b6710:	2204      	movs	r2, #4
   b6712:	494d      	ldr	r1, [pc, #308]	; (b6848 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b6714:	4620      	mov	r0, r4
   b6716:	f7ff fef2 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b671a:	68a3      	ldr	r3, [r4, #8]
   b671c:	4a4b      	ldr	r2, [pc, #300]	; (b684c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b671e:	4293      	cmp	r3, r2
   b6720:	d15c      	bne.n	b67dc <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b6722:	494b      	ldr	r1, [pc, #300]	; (b6850 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b6724:	2204      	movs	r2, #4
   b6726:	4620      	mov	r0, r4
   b6728:	f7ff fee9 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b672c:	21d9      	movs	r1, #217	; 0xd9
   b672e:	4620      	mov	r0, r4
   b6730:	f7ff fe76 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b6734:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6738:	2b01      	cmp	r3, #1
   b673a:	bf0c      	ite	eq
   b673c:	2122      	moveq	r1, #34	; 0x22
   b673e:	21f1      	movne	r1, #241	; 0xf1
   b6740:	4620      	mov	r0, r4
   b6742:	f7ff fe6d 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b6746:	4620      	mov	r0, r4
   b6748:	4942      	ldr	r1, [pc, #264]	; (b6854 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b674a:	2206      	movs	r2, #6
   b674c:	f7ff fed7 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b6750:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6752:	2800      	cmp	r0, #0
   b6754:	d063      	beq.n	b681e <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b6756:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b6758:	f000 fea8 	bl	b74ac <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b675c:	2001      	movs	r0, #1
   b675e:	e76b      	b.n	b6638 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b6760:	b26d      	sxtb	r5, r5
   b6762:	e78e      	b.n	b6682 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b6764:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6768:	2101      	movs	r1, #1
   b676a:	b280      	uxth	r0, r0
   b676c:	f001 ff86 	bl	b867c <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b6770:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6774:	2101      	movs	r1, #1
   b6776:	b280      	uxth	r0, r0
   b6778:	f001 ff80 	bl	b867c <pinMode>
    SSD1306_DESELECT
   b677c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6780:	2101      	movs	r1, #1
   b6782:	b280      	uxth	r0, r0
   b6784:	f001 ff8b 	bl	b869e <digitalWrite>
    if(spi) { // Hardware SPI
   b6788:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b678a:	b13d      	cbz	r5, b679c <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b678c:	f1b8 0f00 	cmp.w	r8, #0
   b6790:	f43f af7e 	beq.w	b6690 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b6794:	4628      	mov	r0, r5
   b6796:	f001 f893 	bl	b78c0 <_ZN8SPIClass5beginEv>
   b679a:	e779      	b.n	b6690 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b679c:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b67a0:	2101      	movs	r1, #1
   b67a2:	b280      	uxth	r0, r0
   b67a4:	f001 ff6a 	bl	b867c <pinMode>
      pinMode(clkPin , OUTPUT);
   b67a8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b67ac:	2101      	movs	r1, #1
   b67ae:	b280      	uxth	r0, r0
   b67b0:	f001 ff64 	bl	b867c <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b67b4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b67b8:	4629      	mov	r1, r5
   b67ba:	b280      	uxth	r0, r0
   b67bc:	f001 ff6f 	bl	b869e <digitalWrite>
   b67c0:	e766      	b.n	b6690 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b67c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b67c4:	b118      	cbz	r0, b67ce <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b67c6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b67ca:	f001 f8a7 	bl	b791c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b67ce:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b67d2:	2100      	movs	r1, #0
   b67d4:	b280      	uxth	r0, r0
   b67d6:	f001 ff62 	bl	b869e <digitalWrite>
   b67da:	e780      	b.n	b66de <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b67dc:	4a1e      	ldr	r2, [pc, #120]	; (b6858 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b67de:	4293      	cmp	r3, r2
   b67e0:	d10e      	bne.n	b6800 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b67e2:	491e      	ldr	r1, [pc, #120]	; (b685c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b67e4:	2203      	movs	r2, #3
   b67e6:	4620      	mov	r0, r4
   b67e8:	f7ff fe89 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b67ec:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b67f0:	2b01      	cmp	r3, #1
   b67f2:	bf0c      	ite	eq
   b67f4:	219f      	moveq	r1, #159	; 0x9f
   b67f6:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b67f8:	4620      	mov	r0, r4
   b67fa:	f7ff fe11 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b67fe:	e795      	b.n	b672c <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b6800:	4a17      	ldr	r2, [pc, #92]	; (b6860 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b6802:	4293      	cmp	r3, r2
   b6804:	d192      	bne.n	b672c <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b6806:	4917      	ldr	r1, [pc, #92]	; (b6864 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b6808:	2203      	movs	r2, #3
   b680a:	4620      	mov	r0, r4
   b680c:	f7ff fe77 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b6810:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b6814:	2b01      	cmp	r3, #1
   b6816:	bf0c      	ite	eq
   b6818:	2110      	moveq	r1, #16
   b681a:	21af      	movne	r1, #175	; 0xaf
   b681c:	e7ec      	b.n	b67f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b681e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6822:	2101      	movs	r1, #1
   b6824:	b280      	uxth	r0, r0
   b6826:	f001 ff3a 	bl	b869e <digitalWrite>
   b682a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b682c:	2800      	cmp	r0, #0
   b682e:	d095      	beq.n	b675c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6830:	f001 f85a 	bl	b78e8 <_ZN8SPIClass14endTransactionEv>
   b6834:	e792      	b.n	b675c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b6836:	bf00      	nop
   b6838:	000b9708 	.word	0x000b9708
   b683c:	000b9448 	.word	0x000b9448
   b6840:	000b9950 	.word	0x000b9950
   b6844:	000b9954 	.word	0x000b9954
   b6848:	000b9958 	.word	0x000b9958
   b684c:	00200080 	.word	0x00200080
   b6850:	000b9962 	.word	0x000b9962
   b6854:	000b995c 	.word	0x000b995c
   b6858:	00400080 	.word	0x00400080
   b685c:	000b9966 	.word	0x000b9966
   b6860:	00100060 	.word	0x00100060
   b6864:	000b9969 	.word	0x000b9969

000b6868 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b6868:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b686a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b686c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b6870:	db3d      	blt.n	b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b6872:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6876:	4294      	cmp	r4, r2
   b6878:	dd39      	ble.n	b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b687a:	2900      	cmp	r1, #0
      w += x;
   b687c:	bfbe      	ittt	lt
   b687e:	185b      	addlt	r3, r3, r1
   b6880:	b21b      	sxthlt	r3, r3
      x  = 0;
   b6882:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b6884:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b6888:	18ce      	adds	r6, r1, r3
   b688a:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b688c:	bfc4      	itt	gt
   b688e:	1a63      	subgt	r3, r4, r1
   b6890:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b6892:	2b00      	cmp	r3, #0
   b6894:	dd2b      	ble.n	b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b6896:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b6898:	10d6      	asrs	r6, r2, #3
   b689a:	fb14 1106 	smlabb	r1, r4, r6, r1
   b689e:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b68a0:	f002 0007 	and.w	r0, r2, #7
   b68a4:	2201      	movs	r2, #1
   b68a6:	4082      	lsls	r2, r0
      switch(color) {
   b68a8:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b68aa:	b2d2      	uxtb	r2, r2
      switch(color) {
   b68ac:	d016      	beq.n	b68dc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b68ae:	2d02      	cmp	r5, #2
   b68b0:	d00b      	beq.n	b68ca <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b68b2:	b9e5      	cbnz	r5, b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b68b4:	43d2      	mvns	r2, r2
   b68b6:	b2d2      	uxtb	r2, r2
   b68b8:	440b      	add	r3, r1
   b68ba:	4299      	cmp	r1, r3
   b68bc:	d017      	beq.n	b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b68be:	f811 0b01 	ldrb.w	r0, [r1], #1
   b68c2:	4010      	ands	r0, r2
   b68c4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b68c8:	e7f7      	b.n	b68ba <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b68ca:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b68cc:	4299      	cmp	r1, r3
   b68ce:	d00e      	beq.n	b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b68d0:	f811 0b01 	ldrb.w	r0, [r1], #1
   b68d4:	4050      	eors	r0, r2
   b68d6:	f801 0c01 	strb.w	r0, [r1, #-1]
   b68da:	e7f7      	b.n	b68cc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b68dc:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b68de:	4299      	cmp	r1, r3
   b68e0:	d005      	beq.n	b68ee <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b68e2:	f811 0b01 	ldrb.w	r0, [r1], #1
   b68e6:	4310      	orrs	r0, r2
   b68e8:	f801 0c01 	strb.w	r0, [r1, #-1]
   b68ec:	e7f7      	b.n	b68de <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b68ee:	bd70      	pop	{r4, r5, r6, pc}

000b68f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b68f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b68f2:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b68f4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b68f8:	db76      	blt.n	b69e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b68fa:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b68fe:	42b1      	cmp	r1, r6
   b6900:	da72      	bge.n	b69e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b6902:	2a00      	cmp	r2, #0
      __h += __y;
   b6904:	bfbe      	ittt	lt
   b6906:	189b      	addlt	r3, r3, r2
   b6908:	b21b      	sxthlt	r3, r3
      __y = 0;
   b690a:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b690c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b6910:	18d7      	adds	r7, r2, r3
   b6912:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b6914:	bfc4      	itt	gt
   b6916:	1aa3      	subgt	r3, r4, r2
   b6918:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b691a:	2b00      	cmp	r3, #0
   b691c:	dd64      	ble.n	b69e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b691e:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b6922:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b6924:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b6928:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b692c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b692e:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b6932:	d023      	beq.n	b697c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b6934:	f1c2 0208 	rsb	r2, r2, #8
   b6938:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b693a:	492d      	ldr	r1, [pc, #180]	; (b69f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b693c:	4293      	cmp	r3, r2
   b693e:	bf3c      	itt	cc
   b6940:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b6944:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b6948:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b694a:	bf3c      	itt	cc
   b694c:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b6950:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b6954:	2d01      	cmp	r5, #1
   b6956:	d007      	beq.n	b6968 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b6958:	2d02      	cmp	r5, #2
   b695a:	d02e      	beq.n	b69ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b695c:	b94d      	cbnz	r5, b6972 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b695e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b6962:	ea2c 0101 	bic.w	r1, ip, r1
   b6966:	e003      	b.n	b6970 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b6968:	f817 c006 	ldrb.w	ip, [r7, r6]
   b696c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b6970:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b6972:	4293      	cmp	r3, r2
   b6974:	d338      	bcc.n	b69e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b6976:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b697a:	440c      	add	r4, r1
        h -= mod;
   b697c:	1a9a      	subs	r2, r3, r2
   b697e:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b6980:	2a07      	cmp	r2, #7
   b6982:	d90e      	bls.n	b69a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b6984:	2d02      	cmp	r5, #2
   b6986:	d11d      	bne.n	b69c4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b6988:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b698a:	7821      	ldrb	r1, [r4, #0]
   b698c:	43c9      	mvns	r1, r1
   b698e:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b6990:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b6992:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b6996:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b6998:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b699a:	440c      	add	r4, r1
            } while(h >= 8);
   b699c:	d8f5      	bhi.n	b698a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b699e:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b69a2:	b30a      	cbz	r2, b69e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b69a4:	4b13      	ldr	r3, [pc, #76]	; (b69f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b69a6:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b69a8:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b69aa:	d01a      	beq.n	b69e2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b69ac:	2d02      	cmp	r5, #2
   b69ae:	d01c      	beq.n	b69ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b69b0:	b9d5      	cbnz	r5, b69e8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b69b2:	7822      	ldrb	r2, [r4, #0]
   b69b4:	ea22 0303 	bic.w	r3, r2, r3
   b69b8:	e015      	b.n	b69e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b69ba:	f817 c006 	ldrb.w	ip, [r7, r6]
   b69be:	ea81 010c 	eor.w	r1, r1, ip
   b69c2:	e7d5      	b.n	b6970 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b69c4:	1e29      	subs	r1, r5, #0
   b69c6:	bf18      	it	ne
   b69c8:	2101      	movne	r1, #1
   b69ca:	4249      	negs	r1, r1
   b69cc:	b2c9      	uxtb	r1, r1
   b69ce:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b69d0:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b69d2:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b69d4:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b69d8:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b69da:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b69dc:	4434      	add	r4, r6
            } while(h >= 8);
   b69de:	d8f7      	bhi.n	b69d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b69e0:	e7dd      	b.n	b699e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b69e2:	7822      	ldrb	r2, [r4, #0]
   b69e4:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b69e6:	7023      	strb	r3, [r4, #0]
}
   b69e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b69ea:	7822      	ldrb	r2, [r4, #0]
   b69ec:	4053      	eors	r3, r2
   b69ee:	e7fa      	b.n	b69e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b69f0:	000b9940 	.word	0x000b9940
   b69f4:	000b9948 	.word	0x000b9948

000b69f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b69f8:	b470      	push	{r4, r5, r6}
   b69fa:	4614      	mov	r4, r2
  switch(rotation) {
   b69fc:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b69fe:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b6a02:	2a02      	cmp	r2, #2
   b6a04:	d00d      	beq.n	b6a22 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b6a06:	2a03      	cmp	r2, #3
   b6a08:	d018      	beq.n	b6a3c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b6a0a:	2a01      	cmp	r2, #1
   b6a0c:	d111      	bne.n	b6a32 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b6a0e:	8902      	ldrh	r2, [r0, #8]
   b6a10:	43e4      	mvns	r4, r4
   b6a12:	4414      	add	r4, r2
   b6a14:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6a16:	9603      	str	r6, [sp, #12]
   b6a18:	460a      	mov	r2, r1
   b6a1a:	4621      	mov	r1, r4
}
   b6a1c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b6a1e:	f7ff bf67 	b.w	b68f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b6a22:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b6a24:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b6a26:	43e4      	mvns	r4, r4
    x -= (w-1);
   b6a28:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b6a2a:	4414      	add	r4, r2
    x -= (w-1);
   b6a2c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b6a2e:	b224      	sxth	r4, r4
    x -= (w-1);
   b6a30:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b6a32:	9603      	str	r6, [sp, #12]
   b6a34:	4622      	mov	r2, r4
}
   b6a36:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b6a38:	f7ff bf16 	b.w	b6868 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b6a3c:	8945      	ldrh	r5, [r0, #10]
   b6a3e:	4419      	add	r1, r3
   b6a40:	1a69      	subs	r1, r5, r1
   b6a42:	b209      	sxth	r1, r1
    break;
   b6a44:	e7e7      	b.n	b6a16 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b6a46 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6a46:	b430      	push	{r4, r5}
   b6a48:	4614      	mov	r4, r2
  switch(rotation) {
   b6a4a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b6a4c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b6a50:	2a02      	cmp	r2, #2
   b6a52:	d00d      	beq.n	b6a70 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b6a54:	2a03      	cmp	r2, #3
   b6a56:	d018      	beq.n	b6a8a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b6a58:	2a01      	cmp	r2, #1
   b6a5a:	d111      	bne.n	b6a80 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b6a5c:	18e2      	adds	r2, r4, r3
   b6a5e:	8904      	ldrh	r4, [r0, #8]
   b6a60:	1aa4      	subs	r4, r4, r2
   b6a62:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6a64:	9502      	str	r5, [sp, #8]
   b6a66:	460a      	mov	r2, r1
   b6a68:	4621      	mov	r1, r4
}
   b6a6a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b6a6c:	f7ff befc 	b.w	b6868 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b6a70:	8902      	ldrh	r2, [r0, #8]
   b6a72:	43c9      	mvns	r1, r1
   b6a74:	4411      	add	r1, r2
    y -= (h-1);
   b6a76:	18e2      	adds	r2, r4, r3
   b6a78:	8944      	ldrh	r4, [r0, #10]
   b6a7a:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b6a7c:	b209      	sxth	r1, r1
    y -= (h-1);
   b6a7e:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b6a80:	9502      	str	r5, [sp, #8]
   b6a82:	4622      	mov	r2, r4
}
   b6a84:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b6a86:	f7ff bf33 	b.w	b68f0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b6a8a:	8942      	ldrh	r2, [r0, #10]
   b6a8c:	43c9      	mvns	r1, r1
   b6a8e:	4411      	add	r1, r2
   b6a90:	b209      	sxth	r1, r1
    break;
   b6a92:	e7e7      	b.n	b6a64 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b6a94 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b6a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6a98:	4604      	mov	r4, r0
  TRANSACTION_START
   b6a9a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b6a9c:	2800      	cmp	r0, #0
   b6a9e:	d042      	beq.n	b6b26 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b6aa0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b6aa2:	f000 fd03 	bl	b74ac <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b6aa6:	4947      	ldr	r1, [pc, #284]	; (b6bc4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b6aa8:	2205      	movs	r2, #5
   b6aaa:	4620      	mov	r0, r4
   b6aac:	f7ff fd27 	bl	b64fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b6ab0:	8921      	ldrh	r1, [r4, #8]
   b6ab2:	3901      	subs	r1, #1
   b6ab4:	4620      	mov	r0, r4
   b6ab6:	b2c9      	uxtb	r1, r1
   b6ab8:	f7ff fcb2 	bl	b6420 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6abc:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b6ac0:	1dde      	adds	r6, r3, #7
   b6ac2:	bf48      	it	mi
   b6ac4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b6ac8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b6acc:	8923      	ldrh	r3, [r4, #8]
   b6ace:	10f6      	asrs	r6, r6, #3
   b6ad0:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b6ad4:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b6ad8:	2800      	cmp	r0, #0
   b6ada:	d03a      	beq.n	b6b52 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b6adc:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6ae0:	f000 fcf2 	bl	b74c8 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b6ae4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6ae6:	6803      	ldr	r3, [r0, #0]
   b6ae8:	2140      	movs	r1, #64	; 0x40
   b6aea:	689b      	ldr	r3, [r3, #8]
   b6aec:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b6aee:	2701      	movs	r7, #1
    while(count--) {
   b6af0:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b6af2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b6af4:	d024      	beq.n	b6b40 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b6af6:	2f1f      	cmp	r7, #31
   b6af8:	d90c      	bls.n	b6b14 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b6afa:	f000 fcec 	bl	b74d6 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b6afe:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b6b02:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b04:	f000 fce0 	bl	b74c8 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b6b08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b0a:	6803      	ldr	r3, [r0, #0]
   b6b0c:	2140      	movs	r1, #64	; 0x40
   b6b0e:	689b      	ldr	r3, [r3, #8]
   b6b10:	4798      	blx	r3
        bytesOut = 1;
   b6b12:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b6b14:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b16:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6b1a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b6b1c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b6b1e:	689b      	ldr	r3, [r3, #8]
   b6b20:	4798      	blx	r3
      bytesOut++;
   b6b22:	b2ff      	uxtb	r7, r7
    while(count--) {
   b6b24:	e7e4      	b.n	b6af0 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b6b26:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6b28:	b118      	cbz	r0, b6b32 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b6b2a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b6b2e:	f000 fef5 	bl	b791c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b6b32:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6b36:	2100      	movs	r1, #0
   b6b38:	b280      	uxth	r0, r0
   b6b3a:	f001 fdb0 	bl	b869e <digitalWrite>
   b6b3e:	e7b2      	b.n	b6aa6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b6b40:	f000 fcc9 	bl	b74d6 <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b6b44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b6b46:	b378      	cbz	r0, b6ba8 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b6b48:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b6b4a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6b4e:	f000 bcad 	b.w	b74ac <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b6b52:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b6b56:	2101      	movs	r1, #1
   b6b58:	b280      	uxth	r0, r0
   b6b5a:	f001 fda0 	bl	b869e <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b6b5e:	42ae      	cmp	r6, r5
   b6b60:	d0f0      	beq.n	b6b44 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b6b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b6b64:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b6b68:	b118      	cbz	r0, b6b72 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b6b6a:	4649      	mov	r1, r9
   b6b6c:	f000 ff44 	bl	b79f8 <_ZN8SPIClass8transferEh>
   b6b70:	e7f5      	b.n	b6b5e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b6b72:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6b74:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b6b78:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b6b7c:	ea09 0108 	and.w	r1, r9, r8
   b6b80:	b280      	uxth	r0, r0
   b6b82:	f001 fd8c 	bl	b869e <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b6b86:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6b8a:	2101      	movs	r1, #1
   b6b8c:	b280      	uxth	r0, r0
   b6b8e:	f001 fd86 	bl	b869e <digitalWrite>
      digitalWrite(clkPin , LOW);
   b6b92:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b6b96:	2100      	movs	r1, #0
   b6b98:	b280      	uxth	r0, r0
   b6b9a:	f001 fd80 	bl	b869e <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b6b9e:	3f01      	subs	r7, #1
   b6ba0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b6ba4:	d1e8      	bne.n	b6b78 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b6ba6:	e7da      	b.n	b6b5e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b6ba8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b6bac:	2101      	movs	r1, #1
   b6bae:	b280      	uxth	r0, r0
   b6bb0:	f001 fd75 	bl	b869e <digitalWrite>
   b6bb4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b6bb6:	b118      	cbz	r0, b6bc0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b6bb8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b6bbc:	f000 be94 	b.w	b78e8 <_ZN8SPIClass14endTransactionEv>
}
   b6bc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6bc4:	000b996c 	.word	0x000b996c

000b6bc8 <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b6bc8:	2100      	movs	r1, #0
   b6bca:	220a      	movs	r2, #10
   b6bcc:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b6bd0:	4770      	bx	lr

000b6bd2 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b6bd2:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b6bd4:	b510      	push	{r4, lr}
   b6bd6:	4604      	mov	r4, r0
    this->pin = pin;
   b6bd8:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b6bda:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b6bdc:	b288      	uxth	r0, r1
   b6bde:	f001 fd77 	bl	b86d0 <digitalRead>
   b6be2:	b108      	cbz	r0, b6be8 <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b6be4:	2303      	movs	r3, #3
   b6be6:	71a3      	strb	r3, [r4, #6]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6be8:	f000 f920 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b6bec:	6020      	str	r0, [r4, #0]
#endif
}
   b6bee:	bd10      	pop	{r4, pc}

000b6bf0 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b6bf0:	b538      	push	{r3, r4, r5, lr}
   b6bf2:	460c      	mov	r4, r1
   b6bf4:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b6bf6:	4611      	mov	r1, r2
   b6bf8:	b2a0      	uxth	r0, r4
   b6bfa:	f001 fd3f 	bl	b867c <pinMode>
  
  this->attach(pin);
   b6bfe:	4621      	mov	r1, r4
   b6c00:	4628      	mov	r0, r5
}
   b6c02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b6c06:	f7ff bfe4 	b.w	b6bd2 <_ZN8Debounce6attachEi>

000b6c0a <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b6c0a:	b538      	push	{r3, r4, r5, lr}
   b6c0c:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b6c0e:	79c0      	ldrb	r0, [r0, #7]
   b6c10:	f001 fd5e 	bl	b86d0 <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b6c14:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b6c16:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b6c18:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b6c1c:	bf18      	it	ne
   b6c1e:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6c20:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b6c24:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b6c26:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b6c28:	d00a      	beq.n	b6c40 <_ZN8Debounce6updateEv+0x36>
   b6c2a:	f000 f8ff 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b6c2e:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b6c30:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b6c32:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b6c36:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b6c38:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b6c3a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b6c3e:	bd38      	pop	{r3, r4, r5, pc}
   b6c40:	f000 f8f4 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b6c44:	6823      	ldr	r3, [r4, #0]
   b6c46:	1ac0      	subs	r0, r0, r3
   b6c48:	88a3      	ldrh	r3, [r4, #4]
   b6c4a:	4298      	cmp	r0, r3
   b6c4c:	d3f4      	bcc.n	b6c38 <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b6c4e:	79a3      	ldrb	r3, [r4, #6]
   b6c50:	f003 0301 	and.w	r3, r3, #1
   b6c54:	42ab      	cmp	r3, r5
   b6c56:	d0ef      	beq.n	b6c38 <_ZN8Debounce6updateEv+0x2e>
   b6c58:	f000 f8e8 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b6c5c:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b6c5e:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b6c60:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b6c64:	f043 0308 	orr.w	r3, r3, #8
   b6c68:	e7e5      	b.n	b6c36 <_ZN8Debounce6updateEv+0x2c>

000b6c6a <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b6c6a:	7980      	ldrb	r0, [r0, #6]
   b6c6c:	f000 0009 	and.w	r0, r0, #9
   b6c70:	f1a0 0308 	sub.w	r3, r0, #8
   b6c74:	4258      	negs	r0, r3
   b6c76:	4158      	adcs	r0, r3
   b6c78:	4770      	bx	lr
	...

000b6c7c <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b6c7c:	b510      	push	{r4, lr}
   b6c7e:	4b06      	ldr	r3, [pc, #24]	; (b6c98 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b6c80:	6003      	str	r3, [r0, #0]
   b6c82:	4604      	mov	r4, r0
	if (mutex) {
   b6c84:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b6c86:	b108      	cbz	r0, b6c8c <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b6c88:	f000 f8b0 	bl	b6dec <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b6c8c:	4620      	mov	r0, r4
   b6c8e:	f7ff fb21 	bl	b62d4 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b6c92:	4620      	mov	r0, r4
   b6c94:	bd10      	pop	{r4, pc}
   b6c96:	bf00      	nop
   b6c98:	000b997c 	.word	0x000b997c

000b6c9c <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6c9c:	b510      	push	{r4, lr}
   b6c9e:	4604      	mov	r4, r0
}
   b6ca0:	f7ff ffec 	bl	b6c7c <_ZN16OledWingAdafruitD1Ev>
   b6ca4:	4620      	mov	r0, r4
   b6ca6:	2170      	movs	r1, #112	; 0x70
   b6ca8:	f7fe f821 	bl	b4cee <_ZdlPvj>
   b6cac:	4620      	mov	r0, r4
   b6cae:	bd10      	pop	{r4, pc}

000b6cb0 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b6cb0:	b530      	push	{r4, r5, lr}
   b6cb2:	b085      	sub	sp, #20
   b6cb4:	4604      	mov	r4, r0
   b6cb6:	460d      	mov	r5, r1
   b6cb8:	f001 fd76 	bl	b87a8 <_Z19__fetch_global_Wirev>
   b6cbc:	4a10      	ldr	r2, [pc, #64]	; (b6d00 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b6cbe:	4911      	ldr	r1, [pc, #68]	; (b6d04 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b6cc0:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b6cc8:	2180      	movs	r1, #128	; 0x80
   b6cca:	4603      	mov	r3, r0
   b6ccc:	9200      	str	r2, [sp, #0]
   b6cce:	4620      	mov	r0, r4
   b6cd0:	2220      	movs	r2, #32
   b6cd2:	f7ff fb77 	bl	b63c4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6cd6:	4b0c      	ldr	r3, [pc, #48]	; (b6d08 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6cd8:	6023      	str	r3, [r4, #0]
   b6cda:	2300      	movs	r3, #0
   b6cdc:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b6ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6ce4:	f7ff ff70 	bl	b6bc8 <_ZN8DebounceC1Ev>
   b6ce8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6cec:	f7ff ff6c 	bl	b6bc8 <_ZN8DebounceC1Ev>
   b6cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6cf4:	f7ff ff68 	bl	b6bc8 <_ZN8DebounceC1Ev>
}
   b6cf8:	4620      	mov	r0, r4
   b6cfa:	b005      	add	sp, #20
   b6cfc:	bd30      	pop	{r4, r5, pc}
   b6cfe:	bf00      	nop
   b6d00:	00061a80 	.word	0x00061a80
   b6d04:	000186a0 	.word	0x000186a0
   b6d08:	000b997c 	.word	0x000b997c

000b6d0c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6d0c:	b513      	push	{r0, r1, r4, lr}
   b6d0e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b6d10:	3050      	adds	r0, #80	; 0x50
   b6d12:	f000 f863 	bl	b6ddc <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6d16:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6d18:	07d9      	lsls	r1, r3, #31
   b6d1a:	d505      	bpl.n	b6d28 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6d1c:	2202      	movs	r2, #2
   b6d1e:	2104      	movs	r1, #4
   b6d20:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6d24:	f7ff ff64 	bl	b6bf0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6d28:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6d2a:	079a      	lsls	r2, r3, #30
   b6d2c:	d505      	bpl.n	b6d3a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b6d2e:	2200      	movs	r2, #0
   b6d30:	2103      	movs	r1, #3
   b6d32:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6d36:	f7ff ff5b 	bl	b6bf0 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b6d3a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6d3c:	075b      	lsls	r3, r3, #29
   b6d3e:	d505      	bpl.n	b6d4c <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b6d40:	2202      	movs	r2, #2
   b6d42:	4611      	mov	r1, r2
   b6d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6d48:	f7ff ff52 	bl	b6bf0 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b6d4c:	2301      	movs	r3, #1
   b6d4e:	9300      	str	r3, [sp, #0]
   b6d50:	223c      	movs	r2, #60	; 0x3c
   b6d52:	2102      	movs	r1, #2
   b6d54:	4620      	mov	r0, r4
   b6d56:	f7ff fc3d 	bl	b65d4 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b6d5a:	b002      	add	sp, #8
   b6d5c:	bd10      	pop	{r4, pc}

000b6d5e <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b6d5e:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b6d60:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b6d62:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b6d64:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b6d66:	d502      	bpl.n	b6d6e <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b6d68:	3058      	adds	r0, #88	; 0x58
   b6d6a:	f7ff ff4e 	bl	b6c0a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b6d6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6d70:	079a      	lsls	r2, r3, #30
   b6d72:	d503      	bpl.n	b6d7c <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b6d74:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6d78:	f7ff ff47 	bl	b6c0a <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b6d7c:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6d7e:	075b      	lsls	r3, r3, #29
   b6d80:	d505      	bpl.n	b6d8e <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b6d82:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b6d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b6d8a:	f7ff bf3e 	b.w	b6c0a <_ZN8Debounce6updateEv>
}
   b6d8e:	bd10      	pop	{r4, pc}

000b6d90 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6d90:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b6d92:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b6d94:	f013 0001 	ands.w	r0, r3, #1
   b6d98:	d003      	beq.n	b6da2 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b6d9a:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b6d9e:	f7ff bf64 	b.w	b6c6a <_ZN8Debounce4fellEv>
}
   b6da2:	4770      	bx	lr

000b6da4 <_Z10BlynkDelaym>:
#endif

#ifdef _BLYNK_USE_DEFAULT_DELAY
    void BlynkDelay(millis_time_t ms)
    {
        return delay(ms);
   b6da4:	f000 baee 	b.w	b7384 <delay>

000b6da8 <_Z11BlynkMillisv>:
   b6da8:	f000 b840 	b.w	b6e2c <HAL_Timer_Get_Milli_Seconds>

000b6dac <BlynkWidgetRead>:
{}

void BlynkWidgetRead(BlynkReq BLYNK_UNUSED &request)
{
    BLYNK_LOG2(BLYNK_F("No handler for reading from pin "), request.pin);
}
   b6dac:	4770      	bx	lr

000b6dae <BlynkWidgetWrite>:

void BlynkWidgetWrite(BlynkReq BLYNK_UNUSED &request, const BlynkParam BLYNK_UNUSED &param)
{
    BLYNK_LOG2(BLYNK_F("No handler for writing to pin "), request.pin);
}
   b6dae:	4770      	bx	lr

000b6db0 <BlynkNoOpCbk>:
{}
   b6db0:	4770      	bx	lr
	...

000b6db4 <GetReadHandler>:
#endif
};

WidgetReadHandler GetReadHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkReadHandlerVector))
   b6db4:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetReadHandler)pgm_read_word(&BlynkReadHandlerVector[pin]);
#else
    return BlynkReadHandlerVector[pin];
   b6db6:	bf5a      	itte	pl
   b6db8:	4b02      	ldrpl	r3, [pc, #8]	; (b6dc4 <GetReadHandler+0x10>)
   b6dba:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6dbe:	2000      	movmi	r0, #0
#endif
}
   b6dc0:	4770      	bx	lr
   b6dc2:	bf00      	nop
   b6dc4:	000b99cc 	.word	0x000b99cc

000b6dc8 <GetWriteHandler>:

WidgetWriteHandler GetWriteHandler(uint8_t pin)
{
    if (pin >= BLYNK_COUNT_OF(BlynkWriteHandlerVector))
   b6dc8:	0603      	lsls	r3, r0, #24
        return NULL;
#ifdef BLYNK_HAS_PROGMEM
    return (WidgetWriteHandler)pgm_read_word(&BlynkWriteHandlerVector[pin]);
#else
    return BlynkWriteHandlerVector[pin];
   b6dca:	bf5a      	itte	pl
   b6dcc:	4b02      	ldrpl	r3, [pc, #8]	; (b6dd8 <GetWriteHandler+0x10>)
   b6dce:	f853 0020 	ldrpl.w	r0, [r3, r0, lsl #2]
        return NULL;
   b6dd2:	2000      	movmi	r0, #0
#endif
}
   b6dd4:	4770      	bx	lr
   b6dd6:	bf00      	nop
   b6dd8:	000b9bcc 	.word	0x000b9bcc

000b6ddc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b6ddc:	b508      	push	{r3, lr}
   b6dde:	4b02      	ldr	r3, [pc, #8]	; (b6de8 <os_mutex_create+0xc>)
   b6de0:	681b      	ldr	r3, [r3, #0]
   b6de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6de4:	9301      	str	r3, [sp, #4]
   b6de6:	bd08      	pop	{r3, pc}
   b6de8:	00030248 	.word	0x00030248

000b6dec <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b6dec:	b508      	push	{r3, lr}
   b6dee:	4b02      	ldr	r3, [pc, #8]	; (b6df8 <os_mutex_destroy+0xc>)
   b6df0:	681b      	ldr	r3, [r3, #0]
   b6df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6df4:	9301      	str	r3, [sp, #4]
   b6df6:	bd08      	pop	{r3, pc}
   b6df8:	00030248 	.word	0x00030248

000b6dfc <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6dfc:	b508      	push	{r3, lr}
   b6dfe:	4b02      	ldr	r3, [pc, #8]	; (b6e08 <os_mutex_recursive_create+0xc>)
   b6e00:	681b      	ldr	r3, [r3, #0]
   b6e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6e04:	9301      	str	r3, [sp, #4]
   b6e06:	bd08      	pop	{r3, pc}
   b6e08:	00030248 	.word	0x00030248

000b6e0c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6e0c:	b508      	push	{r3, lr}
   b6e0e:	4b02      	ldr	r3, [pc, #8]	; (b6e18 <HAL_RNG_GetRandomNumber+0xc>)
   b6e10:	681b      	ldr	r3, [r3, #0]
   b6e12:	685b      	ldr	r3, [r3, #4]
   b6e14:	9301      	str	r3, [sp, #4]
   b6e16:	bd08      	pop	{r3, pc}
   b6e18:	00030218 	.word	0x00030218

000b6e1c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b02      	ldr	r3, [pc, #8]	; (b6e28 <HAL_Delay_Microseconds+0xc>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	68db      	ldr	r3, [r3, #12]
   b6e24:	9301      	str	r3, [sp, #4]
   b6e26:	bd08      	pop	{r3, pc}
   b6e28:	00030218 	.word	0x00030218

000b6e2c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6e2c:	b508      	push	{r3, lr}
   b6e2e:	4b02      	ldr	r3, [pc, #8]	; (b6e38 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6e30:	681b      	ldr	r3, [r3, #0]
   b6e32:	695b      	ldr	r3, [r3, #20]
   b6e34:	9301      	str	r3, [sp, #4]
   b6e36:	bd08      	pop	{r3, pc}
   b6e38:	00030218 	.word	0x00030218

000b6e3c <hal_pin_validate_function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
   b6e3c:	b508      	push	{r3, lr}
   b6e3e:	4b02      	ldr	r3, [pc, #8]	; (b6e48 <hal_pin_validate_function+0xc>)
   b6e40:	681b      	ldr	r3, [r3, #0]
   b6e42:	685b      	ldr	r3, [r3, #4]
   b6e44:	9301      	str	r3, [sp, #4]
   b6e46:	bd08      	pop	{r3, pc}
   b6e48:	0003022c 	.word	0x0003022c

000b6e4c <hal_gpio_mode>:
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
   b6e4c:	b508      	push	{r3, lr}
   b6e4e:	4b02      	ldr	r3, [pc, #8]	; (b6e58 <hal_gpio_mode+0xc>)
   b6e50:	681b      	ldr	r3, [r3, #0]
   b6e52:	689b      	ldr	r3, [r3, #8]
   b6e54:	9301      	str	r3, [sp, #4]
   b6e56:	bd08      	pop	{r3, pc}
   b6e58:	0003022c 	.word	0x0003022c

000b6e5c <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
   b6e5c:	b508      	push	{r3, lr}
   b6e5e:	4b02      	ldr	r3, [pc, #8]	; (b6e68 <hal_gpio_get_mode+0xc>)
   b6e60:	681b      	ldr	r3, [r3, #0]
   b6e62:	68db      	ldr	r3, [r3, #12]
   b6e64:	9301      	str	r3, [sp, #4]
   b6e66:	bd08      	pop	{r3, pc}
   b6e68:	0003022c 	.word	0x0003022c

000b6e6c <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b02      	ldr	r3, [pc, #8]	; (b6e78 <hal_gpio_write+0xc>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	691b      	ldr	r3, [r3, #16]
   b6e74:	9301      	str	r3, [sp, #4]
   b6e76:	bd08      	pop	{r3, pc}
   b6e78:	0003022c 	.word	0x0003022c

000b6e7c <hal_gpio_read>:
DYNALIB_FN(5, hal_gpio, hal_gpio_read, int32_t(hal_pin_t))
   b6e7c:	b508      	push	{r3, lr}
   b6e7e:	4b02      	ldr	r3, [pc, #8]	; (b6e88 <hal_gpio_read+0xc>)
   b6e80:	681b      	ldr	r3, [r3, #0]
   b6e82:	695b      	ldr	r3, [r3, #20]
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	bd08      	pop	{r3, pc}
   b6e88:	0003022c 	.word	0x0003022c

000b6e8c <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, hal_interrupt_attach, int(uint16_t, hal_interrupt_handler_t, void*, InterruptMode, hal_interrupt_extra_configuration_t*))
DYNALIB_FN(7, hal_gpio, hal_interrupt_detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, hal_interrupt_enable_all, void(void))
DYNALIB_FN(9, hal_gpio, hal_interrupt_disable_all, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(hal_pin_t, uint16_t))
   b6e8c:	b508      	push	{r3, lr}
   b6e8e:	4b02      	ldr	r3, [pc, #8]	; (b6e98 <HAL_DAC_Write+0xc>)
   b6e90:	681b      	ldr	r3, [r3, #0]
   b6e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6e94:	9301      	str	r3, [sp, #4]
   b6e96:	bd08      	pop	{r3, pc}
   b6e98:	0003022c 	.word	0x0003022c

000b6e9c <hal_adc_read>:
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b6e9c:	b508      	push	{r3, lr}
   b6e9e:	4b02      	ldr	r3, [pc, #8]	; (b6ea8 <hal_adc_read+0xc>)
   b6ea0:	681b      	ldr	r3, [r3, #0]
   b6ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6ea4:	9301      	str	r3, [sp, #4]
   b6ea6:	bd08      	pop	{r3, pc}
   b6ea8:	0003022c 	.word	0x0003022c

000b6eac <hal_pwm_write_ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(hal_pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(hal_pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(hal_pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, hal_pwm_get_resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, hal_pwm_set_resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, hal_pwm_write_ext, void(uint16_t, uint32_t))
   b6eac:	b508      	push	{r3, lr}
   b6eae:	4b02      	ldr	r3, [pc, #8]	; (b6eb8 <hal_pwm_write_ext+0xc>)
   b6eb0:	681b      	ldr	r3, [r3, #0]
   b6eb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b6eb4:	9301      	str	r3, [sp, #4]
   b6eb6:	bd08      	pop	{r3, pc}
   b6eb8:	0003022c 	.word	0x0003022c

000b6ebc <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <hal_i2c_set_speed+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	681b      	ldr	r3, [r3, #0]
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	00030228 	.word	0x00030228

000b6ecc <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <hal_i2c_begin+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	68db      	ldr	r3, [r3, #12]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	00030228 	.word	0x00030228

000b6edc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <hal_i2c_begin_transmission+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	699b      	ldr	r3, [r3, #24]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	00030228 	.word	0x00030228

000b6eec <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <hal_i2c_end_transmission+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	69db      	ldr	r3, [r3, #28]
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	00030228 	.word	0x00030228

000b6efc <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <hal_i2c_write+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	6a1b      	ldr	r3, [r3, #32]
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	00030228 	.word	0x00030228

000b6f0c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <hal_i2c_available+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030228 	.word	0x00030228

000b6f1c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <hal_i2c_read+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030228 	.word	0x00030228

000b6f2c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <hal_i2c_peek+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030228 	.word	0x00030228

000b6f3c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <hal_i2c_flush+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030228 	.word	0x00030228

000b6f4c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <hal_i2c_is_enabled+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030228 	.word	0x00030228

000b6f5c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <hal_i2c_init+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030228 	.word	0x00030228

000b6f6c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <if_index_to_name+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	695b      	ldr	r3, [r3, #20]
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	0003026c 	.word	0x0003026c

000b6f7c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <inet_inet_ntop+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	695b      	ldr	r3, [r3, #20]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	00030264 	.word	0x00030264

000b6f8c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <inet_htonl+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	6a1b      	ldr	r3, [r3, #32]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030264 	.word	0x00030264

000b6f9c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <inet_ntohs+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030264 	.word	0x00030264

000b6fac <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <inet_htons+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030264 	.word	0x00030264

000b6fbc <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <netdb_freeaddrinfo+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	689b      	ldr	r3, [r3, #8]
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	00030268 	.word	0x00030268

000b6fcc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <netdb_getaddrinfo+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	68db      	ldr	r3, [r3, #12]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	00030268 	.word	0x00030268

000b6fdc <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <sock_setsockopt+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	699b      	ldr	r3, [r3, #24]
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	00030238 	.word	0x00030238

000b6fec <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <sock_close+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	69db      	ldr	r3, [r3, #28]
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	00030238 	.word	0x00030238

000b6ffc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <sock_connect+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	6a1b      	ldr	r3, [r3, #32]
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	00030238 	.word	0x00030238

000b700c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <sock_recv+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	00030238 	.word	0x00030238

000b701c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <sock_send+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030238 	.word	0x00030238

000b702c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <sock_socket+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030238 	.word	0x00030238

000b703c <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <hal_spi_begin+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	681b      	ldr	r3, [r3, #0]
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030230 	.word	0x00030230

000b704c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <hal_spi_transfer+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	695b      	ldr	r3, [r3, #20]
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	00030230 	.word	0x00030230

000b705c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <hal_spi_init+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	69db      	ldr	r3, [r3, #28]
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030230 	.word	0x00030230

000b706c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <hal_spi_is_enabled+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	6a1b      	ldr	r3, [r3, #32]
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030230 	.word	0x00030230

000b707c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <hal_spi_info+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030230 	.word	0x00030230

000b708c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <hal_spi_set_settings+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030230 	.word	0x00030230

000b709c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <hal_spi_acquire+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030230 	.word	0x00030230

000b70ac <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <hal_spi_release+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030230 	.word	0x00030230

000b70bc <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <hal_usart_write+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	68db      	ldr	r3, [r3, #12]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	0003023c 	.word	0x0003023c

000b70cc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <hal_usart_available+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	691b      	ldr	r3, [r3, #16]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	0003023c 	.word	0x0003023c

000b70dc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <hal_usart_read+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	695b      	ldr	r3, [r3, #20]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	0003023c 	.word	0x0003023c

000b70ec <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <hal_usart_peek+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	699b      	ldr	r3, [r3, #24]
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	0003023c 	.word	0x0003023c

000b70fc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <hal_usart_flush+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	69db      	ldr	r3, [r3, #28]
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	0003023c 	.word	0x0003023c

000b710c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <hal_usart_is_enabled+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	6a1b      	ldr	r3, [r3, #32]
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	0003023c 	.word	0x0003023c

000b711c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <hal_usart_available_data_for_write+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	0003023c 	.word	0x0003023c

000b712c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <hal_usart_init_ex+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	0003023c 	.word	0x0003023c

000b713c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <HAL_USB_USART_Init+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	681b      	ldr	r3, [r3, #0]
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	0003024c 	.word	0x0003024c

000b714c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <HAL_USB_USART_Available_Data+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	691b      	ldr	r3, [r3, #16]
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	0003024c 	.word	0x0003024c

000b715c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	695b      	ldr	r3, [r3, #20]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	0003024c 	.word	0x0003024c

000b716c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <HAL_USB_USART_Receive_Data+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	699b      	ldr	r3, [r3, #24]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	0003024c 	.word	0x0003024c

000b717c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <HAL_USB_USART_Send_Data+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	69db      	ldr	r3, [r3, #28]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003024c 	.word	0x0003024c

000b718c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <HAL_USB_USART_Flush_Data+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	6a1b      	ldr	r3, [r3, #32]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003024c 	.word	0x0003024c

000b719c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <panic_+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	00030260 	.word	0x00030260

000b71ac <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <log_message+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	00030260 	.word	0x00030260

000b71bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <set_system_mode+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	685b      	ldr	r3, [r3, #4]
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	00030220 	.word	0x00030220

000b71cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <system_delay_ms+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	695b      	ldr	r3, [r3, #20]
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	00030220 	.word	0x00030220

000b71dc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <system_thread_set_state+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	00030220 	.word	0x00030220

000b71ec <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b03      	ldr	r3, [pc, #12]	; (b71fc <system_ctrl_set_app_request_handler+0x10>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b71f6:	9301      	str	r3, [sp, #4]
   b71f8:	bd08      	pop	{r3, pc}
   b71fa:	0000      	.short	0x0000
   b71fc:	00030220 	.word	0x00030220

000b7200 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b03      	ldr	r3, [pc, #12]	; (b7210 <system_ctrl_set_result+0x10>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b720a:	9301      	str	r3, [sp, #4]
   b720c:	bd08      	pop	{r3, pc}
   b720e:	0000      	.short	0x0000
   b7210:	00030220 	.word	0x00030220

000b7214 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7214:	b508      	push	{r3, lr}
   b7216:	4b02      	ldr	r3, [pc, #8]	; (b7220 <spark_process+0xc>)
   b7218:	681b      	ldr	r3, [r3, #0]
   b721a:	689b      	ldr	r3, [r3, #8]
   b721c:	9301      	str	r3, [sp, #4]
   b721e:	bd08      	pop	{r3, pc}
   b7220:	00030244 	.word	0x00030244

000b7224 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7224:	b508      	push	{r3, lr}
   b7226:	4b02      	ldr	r3, [pc, #8]	; (b7230 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7228:	681b      	ldr	r3, [r3, #0]
   b722a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b722c:	9301      	str	r3, [sp, #4]
   b722e:	bd08      	pop	{r3, pc}
   b7230:	00030244 	.word	0x00030244

000b7234 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7234:	b508      	push	{r3, lr}
   b7236:	4b02      	ldr	r3, [pc, #8]	; (b7240 <network_connect+0xc>)
   b7238:	681b      	ldr	r3, [r3, #0]
   b723a:	685b      	ldr	r3, [r3, #4]
   b723c:	9301      	str	r3, [sp, #4]
   b723e:	bd08      	pop	{r3, pc}
   b7240:	00030240 	.word	0x00030240

000b7244 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7244:	b508      	push	{r3, lr}
   b7246:	4b02      	ldr	r3, [pc, #8]	; (b7250 <network_connecting+0xc>)
   b7248:	681b      	ldr	r3, [r3, #0]
   b724a:	689b      	ldr	r3, [r3, #8]
   b724c:	9301      	str	r3, [sp, #4]
   b724e:	bd08      	pop	{r3, pc}
   b7250:	00030240 	.word	0x00030240

000b7254 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7254:	b508      	push	{r3, lr}
   b7256:	4b02      	ldr	r3, [pc, #8]	; (b7260 <network_disconnect+0xc>)
   b7258:	681b      	ldr	r3, [r3, #0]
   b725a:	68db      	ldr	r3, [r3, #12]
   b725c:	9301      	str	r3, [sp, #4]
   b725e:	bd08      	pop	{r3, pc}
   b7260:	00030240 	.word	0x00030240

000b7264 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7264:	b508      	push	{r3, lr}
   b7266:	4b02      	ldr	r3, [pc, #8]	; (b7270 <network_ready+0xc>)
   b7268:	681b      	ldr	r3, [r3, #0]
   b726a:	691b      	ldr	r3, [r3, #16]
   b726c:	9301      	str	r3, [sp, #4]
   b726e:	bd08      	pop	{r3, pc}
   b7270:	00030240 	.word	0x00030240

000b7274 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7274:	b508      	push	{r3, lr}
   b7276:	4b02      	ldr	r3, [pc, #8]	; (b7280 <network_on+0xc>)
   b7278:	681b      	ldr	r3, [r3, #0]
   b727a:	695b      	ldr	r3, [r3, #20]
   b727c:	9301      	str	r3, [sp, #4]
   b727e:	bd08      	pop	{r3, pc}
   b7280:	00030240 	.word	0x00030240

000b7284 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b7284:	b508      	push	{r3, lr}
   b7286:	4b02      	ldr	r3, [pc, #8]	; (b7290 <network_off+0xc>)
   b7288:	681b      	ldr	r3, [r3, #0]
   b728a:	699b      	ldr	r3, [r3, #24]
   b728c:	9301      	str	r3, [sp, #4]
   b728e:	bd08      	pop	{r3, pc}
   b7290:	00030240 	.word	0x00030240

000b7294 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7294:	b508      	push	{r3, lr}
   b7296:	4b02      	ldr	r3, [pc, #8]	; (b72a0 <network_listen+0xc>)
   b7298:	681b      	ldr	r3, [r3, #0]
   b729a:	69db      	ldr	r3, [r3, #28]
   b729c:	9301      	str	r3, [sp, #4]
   b729e:	bd08      	pop	{r3, pc}
   b72a0:	00030240 	.word	0x00030240

000b72a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b72a4:	b508      	push	{r3, lr}
   b72a6:	4b02      	ldr	r3, [pc, #8]	; (b72b0 <network_listening+0xc>)
   b72a8:	681b      	ldr	r3, [r3, #0]
   b72aa:	6a1b      	ldr	r3, [r3, #32]
   b72ac:	9301      	str	r3, [sp, #4]
   b72ae:	bd08      	pop	{r3, pc}
   b72b0:	00030240 	.word	0x00030240

000b72b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b72b4:	b508      	push	{r3, lr}
   b72b6:	4b02      	ldr	r3, [pc, #8]	; (b72c0 <network_set_listen_timeout+0xc>)
   b72b8:	681b      	ldr	r3, [r3, #0]
   b72ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b72bc:	9301      	str	r3, [sp, #4]
   b72be:	bd08      	pop	{r3, pc}
   b72c0:	00030240 	.word	0x00030240

000b72c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b72c4:	b508      	push	{r3, lr}
   b72c6:	4b02      	ldr	r3, [pc, #8]	; (b72d0 <network_get_listen_timeout+0xc>)
   b72c8:	681b      	ldr	r3, [r3, #0]
   b72ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b72cc:	9301      	str	r3, [sp, #4]
   b72ce:	bd08      	pop	{r3, pc}
   b72d0:	00030240 	.word	0x00030240

000b72d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b72d4:	b508      	push	{r3, lr}
   b72d6:	4b02      	ldr	r3, [pc, #8]	; (b72e0 <network_is_on+0xc>)
   b72d8:	681b      	ldr	r3, [r3, #0]
   b72da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b72dc:	9301      	str	r3, [sp, #4]
   b72de:	bd08      	pop	{r3, pc}
   b72e0:	00030240 	.word	0x00030240

000b72e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b72e4:	b508      	push	{r3, lr}
   b72e6:	4b02      	ldr	r3, [pc, #8]	; (b72f0 <network_is_off+0xc>)
   b72e8:	681b      	ldr	r3, [r3, #0]
   b72ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b72ec:	9301      	str	r3, [sp, #4]
   b72ee:	bd08      	pop	{r3, pc}
   b72f0:	00030240 	.word	0x00030240

000b72f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <malloc+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	681b      	ldr	r3, [r3, #0]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	0003021c 	.word	0x0003021c

000b7304 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <free+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	685b      	ldr	r3, [r3, #4]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	0003021c 	.word	0x0003021c

000b7314 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <realloc+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	689b      	ldr	r3, [r3, #8]
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	0003021c 	.word	0x0003021c

000b7324 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <snprintf+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	69db      	ldr	r3, [r3, #28]
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	0003021c 	.word	0x0003021c

000b7334 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <vsnprintf+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	0003021c 	.word	0x0003021c

000b7344 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <abort+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	0003021c 	.word	0x0003021c

000b7354 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <__errno+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	0003021c 	.word	0x0003021c

000b7364 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <__assert_func+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	0003021c 	.word	0x0003021c

000b7374 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <newlib_impure_ptr_callback+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	0003021c 	.word	0x0003021c

000b7384 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b7384:	2100      	movs	r1, #0
   b7386:	f7ff bf21 	b.w	b71cc <system_delay_ms>
	...

000b738c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b738c:	4802      	ldr	r0, [pc, #8]	; (b7398 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b738e:	2300      	movs	r3, #0
   b7390:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b7392:	f7ff bd33 	b.w	b6dfc <os_mutex_recursive_create>
   b7396:	bf00      	nop
   b7398:	2003e6c8 	.word	0x2003e6c8

000b739c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b739c:	2200      	movs	r2, #0
   b739e:	6840      	ldr	r0, [r0, #4]
   b73a0:	4611      	mov	r1, r2
   b73a2:	f7ff bf7f 	b.w	b72a4 <network_listening>

000b73a6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b73a6:	2200      	movs	r2, #0
   b73a8:	6840      	ldr	r0, [r0, #4]
   b73aa:	4611      	mov	r1, r2
   b73ac:	f7ff bf8a 	b.w	b72c4 <network_get_listen_timeout>

000b73b0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b73b0:	6840      	ldr	r0, [r0, #4]
   b73b2:	2200      	movs	r2, #0
   b73b4:	f7ff bf7e 	b.w	b72b4 <network_set_listen_timeout>

000b73b8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b73b8:	6840      	ldr	r0, [r0, #4]
   b73ba:	2200      	movs	r2, #0
   b73bc:	f081 0101 	eor.w	r1, r1, #1
   b73c0:	f7ff bf68 	b.w	b7294 <network_listen>

000b73c4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b73c4:	2300      	movs	r3, #0
   b73c6:	6840      	ldr	r0, [r0, #4]
   b73c8:	461a      	mov	r2, r3
   b73ca:	4619      	mov	r1, r3
   b73cc:	f7ff bf5a 	b.w	b7284 <network_off>

000b73d0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b73d0:	2300      	movs	r3, #0
   b73d2:	6840      	ldr	r0, [r0, #4]
   b73d4:	461a      	mov	r2, r3
   b73d6:	4619      	mov	r1, r3
   b73d8:	f7ff bf4c 	b.w	b7274 <network_on>

000b73dc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b73dc:	2200      	movs	r2, #0
   b73de:	6840      	ldr	r0, [r0, #4]
   b73e0:	4611      	mov	r1, r2
   b73e2:	f7ff bf3f 	b.w	b7264 <network_ready>

000b73e6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b73e6:	2200      	movs	r2, #0
   b73e8:	6840      	ldr	r0, [r0, #4]
   b73ea:	4611      	mov	r1, r2
   b73ec:	f7ff bf2a 	b.w	b7244 <network_connecting>

000b73f0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b73f0:	6840      	ldr	r0, [r0, #4]
   b73f2:	2200      	movs	r2, #0
   b73f4:	2102      	movs	r1, #2
   b73f6:	f7ff bf2d 	b.w	b7254 <network_disconnect>

000b73fa <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b73fa:	2300      	movs	r3, #0
   b73fc:	6840      	ldr	r0, [r0, #4]
   b73fe:	461a      	mov	r2, r3
   b7400:	f7ff bf18 	b.w	b7234 <network_connect>

000b7404 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7404:	4b02      	ldr	r3, [pc, #8]	; (b7410 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b7406:	2203      	movs	r2, #3
   b7408:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b740a:	4a02      	ldr	r2, [pc, #8]	; (b7414 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b740c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b740e:	4770      	bx	lr
   b7410:	2003e6cc 	.word	0x2003e6cc
   b7414:	000b9ddc 	.word	0x000b9ddc

000b7418 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b7418:	4770      	bx	lr

000b741a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b741a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b741c:	4606      	mov	r6, r0
   b741e:	4615      	mov	r5, r2
   b7420:	460c      	mov	r4, r1
   b7422:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7424:	42bc      	cmp	r4, r7
   b7426:	d006      	beq.n	b7436 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b7428:	6833      	ldr	r3, [r6, #0]
   b742a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b742e:	689b      	ldr	r3, [r3, #8]
   b7430:	4630      	mov	r0, r6
   b7432:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7434:	e7f6      	b.n	b7424 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b7436:	4628      	mov	r0, r5
   b7438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b743a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b743a:	7c00      	ldrb	r0, [r0, #16]
   b743c:	2200      	movs	r2, #0
   b743e:	f7ff bd5d 	b.w	b6efc <hal_i2c_write>

000b7442 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7442:	7c00      	ldrb	r0, [r0, #16]
   b7444:	2100      	movs	r1, #0
   b7446:	f7ff bd61 	b.w	b6f0c <hal_i2c_available>

000b744a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b744a:	7c00      	ldrb	r0, [r0, #16]
   b744c:	2100      	movs	r1, #0
   b744e:	f7ff bd65 	b.w	b6f1c <hal_i2c_read>

000b7452 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7452:	7c00      	ldrb	r0, [r0, #16]
   b7454:	2100      	movs	r1, #0
   b7456:	f7ff bd69 	b.w	b6f2c <hal_i2c_peek>

000b745a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b745a:	7c00      	ldrb	r0, [r0, #16]
   b745c:	2100      	movs	r1, #0
   b745e:	f7ff bd6d 	b.w	b6f3c <hal_i2c_flush>

000b7462 <_ZN7TwoWireD0Ev>:
   b7462:	b510      	push	{r4, lr}
   b7464:	2114      	movs	r1, #20
   b7466:	4604      	mov	r4, r0
   b7468:	f7fd fc41 	bl	b4cee <_ZdlPvj>
   b746c:	4620      	mov	r0, r4
   b746e:	bd10      	pop	{r4, pc}

000b7470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7470:	b538      	push	{r3, r4, r5, lr}
   b7472:	4604      	mov	r4, r0
   b7474:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b7476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b747a:	2200      	movs	r2, #0
   b747c:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7480:	4b09      	ldr	r3, [pc, #36]	; (b74a8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b7482:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b7484:	4608      	mov	r0, r1
   b7486:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b7488:	4629      	mov	r1, r5
   b748a:	f7ff fd67 	bl	b6f5c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b748e:	30bf      	adds	r0, #191	; 0xbf
   b7490:	d108      	bne.n	b74a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b7492:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b7494:	07db      	lsls	r3, r3, #31
   b7496:	d505      	bpl.n	b74a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b7498:	6868      	ldr	r0, [r5, #4]
   b749a:	f7ff ff33 	bl	b7304 <free>
    free(conf.tx_buffer);
   b749e:	68e8      	ldr	r0, [r5, #12]
   b74a0:	f7ff ff30 	bl	b7304 <free>
}
   b74a4:	4620      	mov	r0, r4
   b74a6:	bd38      	pop	{r3, r4, r5, pc}
   b74a8:	000b9e18 	.word	0x000b9e18

000b74ac <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b74ac:	7c00      	ldrb	r0, [r0, #16]
   b74ae:	2200      	movs	r2, #0
   b74b0:	f7ff bd04 	b.w	b6ebc <hal_i2c_set_speed>

000b74b4 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b74b4:	2300      	movs	r3, #0
   b74b6:	7c00      	ldrb	r0, [r0, #16]
   b74b8:	461a      	mov	r2, r3
   b74ba:	4619      	mov	r1, r3
   b74bc:	f7ff bd06 	b.w	b6ecc <hal_i2c_begin>

000b74c0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b74c0:	7c00      	ldrb	r0, [r0, #16]
   b74c2:	2200      	movs	r2, #0
   b74c4:	f7ff bd0a 	b.w	b6edc <hal_i2c_begin_transmission>

000b74c8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b74c8:	b2c9      	uxtb	r1, r1
   b74ca:	f7ff bff9 	b.w	b74c0 <_ZN7TwoWire17beginTransmissionEh>

000b74ce <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b74ce:	7c00      	ldrb	r0, [r0, #16]
   b74d0:	2200      	movs	r2, #0
   b74d2:	f7ff bd0b 	b.w	b6eec <hal_i2c_end_transmission>

000b74d6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b74d6:	2101      	movs	r1, #1
   b74d8:	f7ff bff9 	b.w	b74ce <_ZN7TwoWire15endTransmissionEh>

000b74dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b74dc:	4770      	bx	lr

000b74de <_ZN9IPAddressD0Ev>:
   b74de:	b510      	push	{r4, lr}
   b74e0:	2118      	movs	r1, #24
   b74e2:	4604      	mov	r4, r0
   b74e4:	f7fd fc03 	bl	b4cee <_ZdlPvj>
   b74e8:	4620      	mov	r0, r4
   b74ea:	bd10      	pop	{r4, pc}

000b74ec <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b74ec:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b74ee:	7d03      	ldrb	r3, [r0, #20]
   b74f0:	2b06      	cmp	r3, #6
{
   b74f2:	b08d      	sub	sp, #52	; 0x34
   b74f4:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b74f6:	f100 0704 	add.w	r7, r0, #4
   b74fa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b74fe:	d012      	beq.n	b7526 <_ZNK9IPAddress7printToER5Print+0x3a>
   b7500:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7504:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b7508:	220a      	movs	r2, #10
   b750a:	4630      	mov	r0, r6
   b750c:	f000 f973 	bl	b77f6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7510:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7512:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7514:	d019      	beq.n	b754a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b7516:	2c00      	cmp	r4, #0
   b7518:	d0f4      	beq.n	b7504 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b751a:	212e      	movs	r1, #46	; 0x2e
   b751c:	4630      	mov	r0, r6
   b751e:	f000 f951 	bl	b77c4 <_ZN5Print5printEc>
   b7522:	4404      	add	r4, r0
   b7524:	e7ee      	b.n	b7504 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7526:	232f      	movs	r3, #47	; 0x2f
   b7528:	466a      	mov	r2, sp
   b752a:	4639      	mov	r1, r7
   b752c:	200a      	movs	r0, #10
		buf[0] = 0;
   b752e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b7532:	f7ff fd23 	bl	b6f7c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b7536:	4668      	mov	r0, sp
   b7538:	f7fd fb92 	bl	b4c60 <strlen>
   b753c:	6833      	ldr	r3, [r6, #0]
   b753e:	4602      	mov	r2, r0
   b7540:	68db      	ldr	r3, [r3, #12]
   b7542:	4669      	mov	r1, sp
   b7544:	4630      	mov	r0, r6
   b7546:	4798      	blx	r3
   b7548:	4604      	mov	r4, r0
    }
    return n;
}
   b754a:	4620      	mov	r0, r4
   b754c:	b00d      	add	sp, #52	; 0x34
   b754e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7550 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b7550:	b510      	push	{r4, lr}
   b7552:	4b05      	ldr	r3, [pc, #20]	; (b7568 <_ZN9IPAddressC1Ev+0x18>)
   b7554:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b7556:	2211      	movs	r2, #17
   b7558:	f840 3b04 	str.w	r3, [r0], #4
   b755c:	2100      	movs	r1, #0
   b755e:	f001 fabd 	bl	b8adc <memset>
}
   b7562:	4620      	mov	r0, r4
   b7564:	bd10      	pop	{r4, pc}
   b7566:	bf00      	nop
   b7568:	000b9e40 	.word	0x000b9e40

000b756c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b756c:	4603      	mov	r3, r0
   b756e:	4a07      	ldr	r2, [pc, #28]	; (b758c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b7570:	b510      	push	{r4, lr}
   b7572:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b7576:	f101 0210 	add.w	r2, r1, #16
   b757a:	f851 4b04 	ldr.w	r4, [r1], #4
   b757e:	f843 4b04 	str.w	r4, [r3], #4
   b7582:	4291      	cmp	r1, r2
   b7584:	d1f9      	bne.n	b757a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b7586:	780a      	ldrb	r2, [r1, #0]
   b7588:	701a      	strb	r2, [r3, #0]
}
   b758a:	bd10      	pop	{r4, pc}
   b758c:	000b9e40 	.word	0x000b9e40

000b7590 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b7590:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b7592:	2b04      	cmp	r3, #4
   b7594:	d104      	bne.n	b75a0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b7596:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b7598:	3800      	subs	r0, #0
   b759a:	bf18      	it	ne
   b759c:	2001      	movne	r0, #1
   b759e:	4770      	bx	lr
    } else if (version() == 6) {
   b75a0:	2b06      	cmp	r3, #6
   b75a2:	d107      	bne.n	b75b4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b75a4:	6843      	ldr	r3, [r0, #4]
   b75a6:	b93b      	cbnz	r3, b75b8 <_ZNK9IPAddresscvbEv+0x28>
   b75a8:	6883      	ldr	r3, [r0, #8]
   b75aa:	b92b      	cbnz	r3, b75b8 <_ZNK9IPAddresscvbEv+0x28>
   b75ac:	68c3      	ldr	r3, [r0, #12]
   b75ae:	b91b      	cbnz	r3, b75b8 <_ZNK9IPAddresscvbEv+0x28>
   b75b0:	6900      	ldr	r0, [r0, #16]
   b75b2:	e7f1      	b.n	b7598 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b75b4:	2000      	movs	r0, #0
   b75b6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b75b8:	2001      	movs	r0, #1
}
   b75ba:	4770      	bx	lr

000b75bc <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b75bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b75be:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b75c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b75c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b75ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b75ce:	2304      	movs	r3, #4
   b75d0:	6041      	str	r1, [r0, #4]
   b75d2:	7503      	strb	r3, [r0, #20]
}
   b75d4:	bd10      	pop	{r4, pc}
	...

000b75d8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b75d8:	b507      	push	{r0, r1, r2, lr}
   b75da:	4b06      	ldr	r3, [pc, #24]	; (b75f4 <_ZN9IPAddressC1EPKh+0x1c>)
   b75dc:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b75de:	78cb      	ldrb	r3, [r1, #3]
   b75e0:	9300      	str	r3, [sp, #0]
   b75e2:	788b      	ldrb	r3, [r1, #2]
   b75e4:	784a      	ldrb	r2, [r1, #1]
   b75e6:	7809      	ldrb	r1, [r1, #0]
   b75e8:	f7ff ffe8 	bl	b75bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b75ec:	b003      	add	sp, #12
   b75ee:	f85d fb04 	ldr.w	pc, [sp], #4
   b75f2:	bf00      	nop
   b75f4:	000b9e40 	.word	0x000b9e40

000b75f8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b75f8:	4b01      	ldr	r3, [pc, #4]	; (b7600 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b75fa:	4a02      	ldr	r2, [pc, #8]	; (b7604 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b75fc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b75fe:	4770      	bx	lr
   b7600:	2003e6d4 	.word	0x2003e6d4
   b7604:	000b9e4c 	.word	0x000b9e4c

000b7608 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7608:	2300      	movs	r3, #0
   b760a:	6840      	ldr	r0, [r0, #4]
   b760c:	461a      	mov	r2, r3
   b760e:	f7ff be11 	b.w	b7234 <network_connect>

000b7612 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b7612:	6840      	ldr	r0, [r0, #4]
   b7614:	2200      	movs	r2, #0
   b7616:	2102      	movs	r1, #2
   b7618:	f7ff be1c 	b.w	b7254 <network_disconnect>

000b761c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b761c:	2200      	movs	r2, #0
   b761e:	6840      	ldr	r0, [r0, #4]
   b7620:	4611      	mov	r1, r2
   b7622:	f7ff be0f 	b.w	b7244 <network_connecting>

000b7626 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b7626:	2200      	movs	r2, #0
   b7628:	6840      	ldr	r0, [r0, #4]
   b762a:	4611      	mov	r1, r2
   b762c:	f7ff be1a 	b.w	b7264 <network_ready>

000b7630 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7630:	2300      	movs	r3, #0
   b7632:	6840      	ldr	r0, [r0, #4]
   b7634:	461a      	mov	r2, r3
   b7636:	4619      	mov	r1, r3
   b7638:	f7ff be1c 	b.w	b7274 <network_on>

000b763c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b763c:	2300      	movs	r3, #0
   b763e:	6840      	ldr	r0, [r0, #4]
   b7640:	461a      	mov	r2, r3
   b7642:	4619      	mov	r1, r3
   b7644:	f7ff be1e 	b.w	b7284 <network_off>

000b7648 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b7648:	6840      	ldr	r0, [r0, #4]
   b764a:	2100      	movs	r1, #0
   b764c:	f7ff be42 	b.w	b72d4 <network_is_on>

000b7650 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b7650:	6840      	ldr	r0, [r0, #4]
   b7652:	2100      	movs	r1, #0
   b7654:	f7ff be46 	b.w	b72e4 <network_is_off>

000b7658 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b7658:	6840      	ldr	r0, [r0, #4]
   b765a:	2200      	movs	r2, #0
   b765c:	f081 0101 	eor.w	r1, r1, #1
   b7660:	f7ff be18 	b.w	b7294 <network_listen>

000b7664 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b7664:	6840      	ldr	r0, [r0, #4]
   b7666:	2200      	movs	r2, #0
   b7668:	f7ff be24 	b.w	b72b4 <network_set_listen_timeout>

000b766c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b766c:	2200      	movs	r2, #0
   b766e:	6840      	ldr	r0, [r0, #4]
   b7670:	4611      	mov	r1, r2
   b7672:	f7ff be27 	b.w	b72c4 <network_get_listen_timeout>

000b7676 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b7676:	2200      	movs	r2, #0
   b7678:	6840      	ldr	r0, [r0, #4]
   b767a:	4611      	mov	r1, r2
   b767c:	f7ff be12 	b.w	b72a4 <network_listening>

000b7680 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b7680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7684:	b095      	sub	sp, #84	; 0x54
   b7686:	4614      	mov	r4, r2
   b7688:	460d      	mov	r5, r1
   b768a:	4607      	mov	r7, r0
    IPAddress addr;
   b768c:	f7ff ff60 	bl	b7550 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b7690:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b7692:	221c      	movs	r2, #28
   b7694:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b7696:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b7698:	f001 fa20 	bl	b8adc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b769c:	2340      	movs	r3, #64	; 0x40
   b769e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b76a0:	4620      	mov	r0, r4
   b76a2:	466b      	mov	r3, sp
   b76a4:	aa0c      	add	r2, sp, #48	; 0x30
   b76a6:	2100      	movs	r1, #0
   b76a8:	f7ff fc90 	bl	b6fcc <netdb_getaddrinfo>
    if (!r) {
   b76ac:	4604      	mov	r4, r0
   b76ae:	2800      	cmp	r0, #0
   b76b0:	d14b      	bne.n	b774a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b76b2:	4602      	mov	r2, r0
   b76b4:	2101      	movs	r1, #1
   b76b6:	6868      	ldr	r0, [r5, #4]
   b76b8:	f7ff fdd4 	bl	b7264 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b76bc:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b76be:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b76c0:	4622      	mov	r2, r4
   b76c2:	6868      	ldr	r0, [r5, #4]
   b76c4:	f7ff fdce 	bl	b7264 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b76c8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b76ca:	4681      	mov	r9, r0
        bool ok = false;
   b76cc:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b76ce:	2e00      	cmp	r6, #0
   b76d0:	d03b      	beq.n	b774a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b76d2:	2900      	cmp	r1, #0
   b76d4:	d139      	bne.n	b774a <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b76d6:	6873      	ldr	r3, [r6, #4]
   b76d8:	2b02      	cmp	r3, #2
   b76da:	d003      	beq.n	b76e4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b76dc:	2b0a      	cmp	r3, #10
   b76de:	d011      	beq.n	b7704 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b76e0:	69f6      	ldr	r6, [r6, #28]
   b76e2:	e7f4      	b.n	b76ce <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b76e4:	f1b8 0f00 	cmp.w	r8, #0
   b76e8:	d0fa      	beq.n	b76e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b76ea:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b76ec:	a806      	add	r0, sp, #24
   b76ee:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b76f0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b76f2:	f7ff ff71 	bl	b75d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b76f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b76f8:	1d3c      	adds	r4, r7, #4
   b76fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b76fc:	682b      	ldr	r3, [r5, #0]
   b76fe:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7700:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b7702:	e7ed      	b.n	b76e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b7704:	f1b9 0f00 	cmp.w	r9, #0
   b7708:	d0ea      	beq.n	b76e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b770a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b770c:	2210      	movs	r2, #16
   b770e:	a801      	add	r0, sp, #4
   b7710:	f001 f9e4 	bl	b8adc <memset>
                    a.v = 6;
   b7714:	2306      	movs	r3, #6
   b7716:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b771a:	ad01      	add	r5, sp, #4
   b771c:	f104 0308 	add.w	r3, r4, #8
   b7720:	3418      	adds	r4, #24
   b7722:	6818      	ldr	r0, [r3, #0]
   b7724:	6859      	ldr	r1, [r3, #4]
   b7726:	462a      	mov	r2, r5
   b7728:	c203      	stmia	r2!, {r0, r1}
   b772a:	3308      	adds	r3, #8
   b772c:	42a3      	cmp	r3, r4
   b772e:	4615      	mov	r5, r2
   b7730:	d1f7      	bne.n	b7722 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b7732:	a901      	add	r1, sp, #4
   b7734:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b7736:	ad07      	add	r5, sp, #28
   b7738:	f7ff ff18 	bl	b756c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b773c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b773e:	1d3c      	adds	r4, r7, #4
   b7740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7742:	682b      	ldr	r3, [r5, #0]
   b7744:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7746:	4649      	mov	r1, r9
   b7748:	e7ca      	b.n	b76e0 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b774a:	9800      	ldr	r0, [sp, #0]
   b774c:	f7ff fc36 	bl	b6fbc <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b7750:	4638      	mov	r0, r7
   b7752:	b015      	add	sp, #84	; 0x54
   b7754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b7758 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b7758:	4b02      	ldr	r3, [pc, #8]	; (b7764 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b775a:	4a03      	ldr	r2, [pc, #12]	; (b7768 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b775c:	601a      	str	r2, [r3, #0]
   b775e:	2200      	movs	r2, #0
   b7760:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b7762:	4770      	bx	lr
   b7764:	2003e6d8 	.word	0x2003e6d8
   b7768:	000b9e58 	.word	0x000b9e58

000b776c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b776c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b776e:	4606      	mov	r6, r0
   b7770:	460d      	mov	r5, r1
  size_t n = 0;
   b7772:	188f      	adds	r7, r1, r2
   b7774:	2400      	movs	r4, #0
  while (size--) {
   b7776:	42bd      	cmp	r5, r7
   b7778:	d00c      	beq.n	b7794 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b777a:	6833      	ldr	r3, [r6, #0]
   b777c:	f815 1b01 	ldrb.w	r1, [r5], #1
   b7780:	689b      	ldr	r3, [r3, #8]
   b7782:	4630      	mov	r0, r6
   b7784:	4798      	blx	r3
     if (chunk>=0)
   b7786:	1e03      	subs	r3, r0, #0
   b7788:	db01      	blt.n	b778e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b778a:	441c      	add	r4, r3
  while (size--) {
   b778c:	e7f3      	b.n	b7776 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b778e:	2c00      	cmp	r4, #0
   b7790:	bf08      	it	eq
   b7792:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b7794:	4620      	mov	r0, r4
   b7796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7798 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b7798:	b513      	push	{r0, r1, r4, lr}
   b779a:	4604      	mov	r4, r0
    }
   b779c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b779e:	b159      	cbz	r1, b77b8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b77a0:	9101      	str	r1, [sp, #4]
   b77a2:	f7fd fa5d 	bl	b4c60 <strlen>
   b77a6:	6823      	ldr	r3, [r4, #0]
   b77a8:	9901      	ldr	r1, [sp, #4]
   b77aa:	68db      	ldr	r3, [r3, #12]
   b77ac:	4602      	mov	r2, r0
   b77ae:	4620      	mov	r0, r4
    }
   b77b0:	b002      	add	sp, #8
   b77b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b77b6:	4718      	bx	r3
    }
   b77b8:	b002      	add	sp, #8
   b77ba:	bd10      	pop	{r4, pc}

000b77bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b77bc:	b508      	push	{r3, lr}
  return write(str);
   b77be:	f7ff ffeb 	bl	b7798 <_ZN5Print5writeEPKc>
}
   b77c2:	bd08      	pop	{r3, pc}

000b77c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b77c4:	6803      	ldr	r3, [r0, #0]
   b77c6:	689b      	ldr	r3, [r3, #8]
   b77c8:	4718      	bx	r3

000b77ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b77ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b77cc:	210d      	movs	r1, #13
{
   b77ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   b77d0:	f7ff fff8 	bl	b77c4 <_ZN5Print5printEc>
  n += print('\n');
   b77d4:	210a      	movs	r1, #10
  size_t n = print('\r');
   b77d6:	4604      	mov	r4, r0
  n += print('\n');
   b77d8:	4628      	mov	r0, r5
   b77da:	f7ff fff3 	bl	b77c4 <_ZN5Print5printEc>
  return n;
}
   b77de:	4420      	add	r0, r4
   b77e0:	bd38      	pop	{r3, r4, r5, pc}

000b77e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b77e2:	b538      	push	{r3, r4, r5, lr}
   b77e4:	4605      	mov	r5, r0
  return write(str);
   b77e6:	f7ff ffd7 	bl	b7798 <_ZN5Print5writeEPKc>
   b77ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b77ec:	4628      	mov	r0, r5
   b77ee:	f7ff ffec 	bl	b77ca <_ZN5Print7printlnEv>
  return n;
}
   b77f2:	4420      	add	r0, r4
   b77f4:	bd38      	pop	{r3, r4, r5, pc}

000b77f6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b77f6:	b530      	push	{r4, r5, lr}
   b77f8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b77fa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b77fc:	2a01      	cmp	r2, #1
  *str = '\0';
   b77fe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7802:	bf98      	it	ls
   b7804:	220a      	movls	r2, #10
   b7806:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7808:	460d      	mov	r5, r1
   b780a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b780e:	fb01 5312 	mls	r3, r1, r2, r5
   b7812:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7816:	2b09      	cmp	r3, #9
   b7818:	bf94      	ite	ls
   b781a:	3330      	addls	r3, #48	; 0x30
   b781c:	3337      	addhi	r3, #55	; 0x37
   b781e:	b2db      	uxtb	r3, r3
  } while(n);
   b7820:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7822:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7826:	d9ef      	bls.n	b7808 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7828:	4621      	mov	r1, r4
   b782a:	f7ff ffb5 	bl	b7798 <_ZN5Print5writeEPKc>
}
   b782e:	b00b      	add	sp, #44	; 0x2c
   b7830:	bd30      	pop	{r4, r5, pc}

000b7832 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7836:	b086      	sub	sp, #24
   b7838:	af00      	add	r7, sp, #0
   b783a:	4605      	mov	r5, r0
   b783c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b783e:	1d38      	adds	r0, r7, #4
   b7840:	2114      	movs	r1, #20
{
   b7842:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7844:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7846:	f7ff fd75 	bl	b7334 <vsnprintf>

    if (n<bufsize)
   b784a:	2813      	cmp	r0, #19
   b784c:	d80e      	bhi.n	b786c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b784e:	1d39      	adds	r1, r7, #4
   b7850:	4628      	mov	r0, r5
   b7852:	f7ff ffa1 	bl	b7798 <_ZN5Print5writeEPKc>
   b7856:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7858:	b11e      	cbz	r6, b7862 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b785a:	4628      	mov	r0, r5
   b785c:	f7ff ffb5 	bl	b77ca <_ZN5Print7printlnEv>
   b7860:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7862:	4620      	mov	r0, r4
   b7864:	3718      	adds	r7, #24
   b7866:	46bd      	mov	sp, r7
   b7868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b786c:	f100 0308 	add.w	r3, r0, #8
   b7870:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7874:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7876:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b787a:	4622      	mov	r2, r4
   b787c:	1c41      	adds	r1, r0, #1
   b787e:	683b      	ldr	r3, [r7, #0]
   b7880:	4668      	mov	r0, sp
   b7882:	f7ff fd57 	bl	b7334 <vsnprintf>
  return write(str);
   b7886:	4669      	mov	r1, sp
   b7888:	4628      	mov	r0, r5
   b788a:	f7ff ff85 	bl	b7798 <_ZN5Print5writeEPKc>
   b788e:	4604      	mov	r4, r0
   b7890:	46c5      	mov	sp, r8
   b7892:	e7e1      	b.n	b7858 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7894 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b7894:	4b01      	ldr	r3, [pc, #4]	; (b789c <_GLOBAL__sub_I_RGB+0x8>)
   b7896:	2200      	movs	r2, #0
   b7898:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b789a:	4770      	bx	lr
   b789c:	2003e6e0 	.word	0x2003e6e0

000b78a0 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b78a0:	2100      	movs	r1, #0
   b78a2:	f7ff bc03 	b.w	b70ac <hal_spi_release>

000b78a6 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b78a6:	2100      	movs	r1, #0
   b78a8:	f7ff bbf8 	b.w	b709c <hal_spi_acquire>

000b78ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b78ac:	b510      	push	{r4, lr}
   b78ae:	4604      	mov	r4, r0
   b78b0:	4608      	mov	r0, r1
{
    _spi = spi;
   b78b2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b78b4:	f7ff fbd2 	bl	b705c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b78b8:	2300      	movs	r3, #0
   b78ba:	6063      	str	r3, [r4, #4]
}
   b78bc:	4620      	mov	r0, r4
   b78be:	bd10      	pop	{r4, pc}

000b78c0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b78c0:	b513      	push	{r0, r1, r4, lr}
   b78c2:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b78c4:	7800      	ldrb	r0, [r0, #0]
   b78c6:	f7ff ffee 	bl	b78a6 <_ZN8SPIClass4lockEv.isra.0>
   b78ca:	b958      	cbnz	r0, b78e4 <_ZN8SPIClass5beginEv+0x24>
   b78cc:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b78ce:	9001      	str	r0, [sp, #4]
   b78d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b78d4:	f7ff fbb2 	bl	b703c <hal_spi_begin>
        unlock();
   b78d8:	9801      	ldr	r0, [sp, #4]
    }
}
   b78da:	b002      	add	sp, #8
   b78dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b78e0:	f7ff bfde 	b.w	b78a0 <_ZN8SPIClass6unlockEv.isra.0>
   b78e4:	b002      	add	sp, #8
   b78e6:	bd10      	pop	{r4, pc}

000b78e8 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b78e8:	7800      	ldrb	r0, [r0, #0]
   b78ea:	f7ff bfd9 	b.w	b78a0 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b78f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b78f0:	0840      	lsrs	r0, r0, #1
{
   b78f2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b78f4:	6018      	str	r0, [r3, #0]
   b78f6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b78f8:	6818      	ldr	r0, [r3, #0]
   b78fa:	4288      	cmp	r0, r1
   b78fc:	b2e5      	uxtb	r5, r4
   b78fe:	d906      	bls.n	b790e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7900:	3401      	adds	r4, #1
   b7902:	2c08      	cmp	r4, #8
   b7904:	d002      	beq.n	b790c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7906:	0840      	lsrs	r0, r0, #1
   b7908:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b790a:	e7f5      	b.n	b78f8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b790c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b790e:	4b02      	ldr	r3, [pc, #8]	; (b7918 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7910:	5d5b      	ldrb	r3, [r3, r5]
   b7912:	7013      	strb	r3, [r2, #0]
}
   b7914:	bd30      	pop	{r4, r5, pc}
   b7916:	bf00      	nop
   b7918:	000b9e8c 	.word	0x000b9e8c

000b791c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b791c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7920:	4606      	mov	r6, r0
   b7922:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7924:	7800      	ldrb	r0, [r0, #0]
{
   b7926:	460c      	mov	r4, r1
    CHECK(lock());
   b7928:	f7ff ffbd 	bl	b78a6 <_ZN8SPIClass4lockEv.isra.0>
   b792c:	2800      	cmp	r0, #0
   b792e:	db1b      	blt.n	b7968 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7930:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7932:	2214      	movs	r2, #20
   b7934:	2100      	movs	r1, #0
   b7936:	a809      	add	r0, sp, #36	; 0x24
   b7938:	f001 f8d0 	bl	b8adc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b793c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b793e:	2200      	movs	r2, #0
   b7940:	a909      	add	r1, sp, #36	; 0x24
   b7942:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7944:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7948:	f7ff fb98 	bl	b707c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b794c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7950:	b113      	cbz	r3, b7958 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7952:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7956:	b155      	cbz	r5, b796e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7958:	2700      	movs	r7, #0
   b795a:	46b9      	mov	r9, r7
   b795c:	46b8      	mov	r8, r7
   b795e:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7960:	7923      	ldrb	r3, [r4, #4]
   b7962:	b15d      	cbz	r5, b797c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7964:	b1c3      	cbz	r3, b7998 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7966:	2000      	movs	r0, #0
}
   b7968:	b00f      	add	sp, #60	; 0x3c
   b796a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b796e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7972:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7976:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b797a:	e7f1      	b.n	b7960 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b797c:	2b00      	cmp	r3, #0
   b797e:	d135      	bne.n	b79ec <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7980:	68a3      	ldr	r3, [r4, #8]
   b7982:	4543      	cmp	r3, r8
   b7984:	d108      	bne.n	b7998 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7986:	f88d 9020 	strb.w	r9, [sp, #32]
   b798a:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b798e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7992:	89a3      	ldrh	r3, [r4, #12]
   b7994:	429a      	cmp	r2, r3
   b7996:	d0e6      	beq.n	b7966 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7998:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b799a:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b799c:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b79a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   b79a2:	ab04      	add	r3, sp, #16
   b79a4:	f10d 020f 	add.w	r2, sp, #15
   b79a8:	f7ff ffa2 	bl	b78f0 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b79ac:	7921      	ldrb	r1, [r4, #4]
   b79ae:	b985      	cbnz	r5, b79d2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b79b0:	b989      	cbnz	r1, b79d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b79b2:	68a3      	ldr	r3, [r4, #8]
   b79b4:	4543      	cmp	r3, r8
   b79b6:	d30e      	bcc.n	b79d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b79b8:	f88d 9020 	strb.w	r9, [sp, #32]
   b79bc:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b79c0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b79c4:	89a3      	ldrh	r3, [r4, #12]
   b79c6:	429a      	cmp	r2, r3
   b79c8:	d105      	bne.n	b79d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b79ca:	9b04      	ldr	r3, [sp, #16]
   b79cc:	4543      	cmp	r3, r8
   b79ce:	d102      	bne.n	b79d6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b79d0:	e7c9      	b.n	b7966 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b79d2:	2900      	cmp	r1, #0
   b79d4:	d1f9      	bne.n	b79ca <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b79d6:	2300      	movs	r3, #0
   b79d8:	9301      	str	r3, [sp, #4]
   b79da:	7b63      	ldrb	r3, [r4, #13]
   b79dc:	9300      	str	r3, [sp, #0]
   b79de:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b79e2:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b79e4:	7830      	ldrb	r0, [r6, #0]
   b79e6:	f7ff fb51 	bl	b708c <hal_spi_set_settings>
   b79ea:	e7bc      	b.n	b7966 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b79ec:	e9cd 5500 	strd	r5, r5, [sp]
   b79f0:	462b      	mov	r3, r5
   b79f2:	462a      	mov	r2, r5
   b79f4:	2101      	movs	r1, #1
   b79f6:	e7f5      	b.n	b79e4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b79f8 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b79f8:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b79fa:	7800      	ldrb	r0, [r0, #0]
   b79fc:	f7ff fb26 	bl	b704c <hal_spi_transfer>
}
   b7a00:	b2c0      	uxtb	r0, r0
   b7a02:	bd08      	pop	{r3, pc}

000b7a04 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   b7a04:	b510      	push	{r4, lr}
   b7a06:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b7a08:	f7ff fa10 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   b7a0c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   b7a0e:	6823      	ldr	r3, [r4, #0]
   b7a10:	4620      	mov	r0, r4
   b7a12:	695b      	ldr	r3, [r3, #20]
   b7a14:	4798      	blx	r3
    if (c >= 0) return c;
   b7a16:	2800      	cmp	r0, #0
   b7a18:	da08      	bge.n	b7a2c <_ZN6Stream9timedReadEv+0x28>
   b7a1a:	f7ff fa07 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   b7a1e:	68e3      	ldr	r3, [r4, #12]
   b7a20:	1ac0      	subs	r0, r0, r3
   b7a22:	68a3      	ldr	r3, [r4, #8]
   b7a24:	4298      	cmp	r0, r3
   b7a26:	d3f2      	bcc.n	b7a0e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   b7a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b7a2c:	bd10      	pop	{r4, pc}

000b7a2e <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
   b7a2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7a32:	4607      	mov	r7, r0
   b7a34:	460c      	mov	r4, r1
   b7a36:	188e      	adds	r6, r1, r2
   b7a38:	460d      	mov	r5, r1
  size_t count = 0;
  while (count < length) {
   b7a3a:	42b5      	cmp	r5, r6
   b7a3c:	eba5 0804 	sub.w	r8, r5, r4
   b7a40:	d007      	beq.n	b7a52 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
   b7a42:	4638      	mov	r0, r7
   b7a44:	f7ff ffde 	bl	b7a04 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
   b7a48:	1e03      	subs	r3, r0, #0
   b7a4a:	db02      	blt.n	b7a52 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
   b7a4c:	f805 3b01 	strb.w	r3, [r5], #1
  while (count < length) {
   b7a50:	e7f3      	b.n	b7a3a <_ZN6Stream9readBytesEPcj+0xc>
    count++;
  }
  return count;
}
   b7a52:	4640      	mov	r0, r8
   b7a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b7a58 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b7a58:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a5c:	ec57 6b10 	vmov	r6, r7, d0
   b7a60:	4680      	mov	r8, r0
   b7a62:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b7a64:	ee10 0a10 	vmov	r0, s0
   b7a68:	2200      	movs	r2, #0
   b7a6a:	2300      	movs	r3, #0
   b7a6c:	4639      	mov	r1, r7
   b7a6e:	f7fc ff05 	bl	b487c <__aeabi_dcmplt>
   b7a72:	b128      	cbz	r0, b7a80 <_Z4dtoadhPc+0x28>
        val = -val;
   b7a74:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b7a78:	461f      	mov	r7, r3
        *sout++ = '-';
   b7a7a:	232d      	movs	r3, #45	; 0x2d
   b7a7c:	f804 3b01 	strb.w	r3, [r4], #1
   b7a80:	2300      	movs	r3, #0
    }
    long scale = 1;
   b7a82:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b7a86:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b7a88:	b2d9      	uxtb	r1, r3
   b7a8a:	4588      	cmp	r8, r1
   b7a8c:	d903      	bls.n	b7a96 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b7a8e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b7a92:	3301      	adds	r3, #1
   b7a94:	e7f8      	b.n	b7a88 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b7a96:	4648      	mov	r0, r9
   b7a98:	f7fc fc14 	bl	b42c4 <__aeabi_i2d>
   b7a9c:	4632      	mov	r2, r6
   b7a9e:	463b      	mov	r3, r7
   b7aa0:	f7fc fc7a 	bl	b4398 <__aeabi_dmul>
   b7aa4:	4606      	mov	r6, r0
   b7aa6:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b7aa8:	f7fc ff48 	bl	b493c <__aeabi_d2ulz>
   b7aac:	468a      	mov	sl, r1
   b7aae:	4605      	mov	r5, r0
   b7ab0:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b7ab2:	f7fc fc3b 	bl	b432c <__aeabi_ul2d>
   b7ab6:	4602      	mov	r2, r0
   b7ab8:	460b      	mov	r3, r1
   b7aba:	4630      	mov	r0, r6
   b7abc:	4639      	mov	r1, r7
   b7abe:	f7fc fab3 	bl	b4028 <__aeabi_dsub>
   b7ac2:	4b14      	ldr	r3, [pc, #80]	; (b7b14 <_Z4dtoadhPc+0xbc>)
   b7ac4:	2200      	movs	r2, #0
   b7ac6:	f7fc feed 	bl	b48a4 <__aeabi_dcmpge>
   b7aca:	b110      	cbz	r0, b7ad2 <_Z4dtoadhPc+0x7a>
        fixed++;
   b7acc:	3501      	adds	r5, #1
   b7ace:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b7ad2:	464a      	mov	r2, r9
   b7ad4:	4628      	mov	r0, r5
   b7ad6:	17d3      	asrs	r3, r2, #31
   b7ad8:	4659      	mov	r1, fp
   b7ada:	f7fc ff17 	bl	b490c <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b7ade:	2301      	movs	r3, #1
   b7ae0:	4615      	mov	r5, r2
   b7ae2:	4621      	mov	r1, r4
   b7ae4:	220a      	movs	r2, #10
   b7ae6:	f000 fcca 	bl	b847e <ultoa>
    if (prec) {
   b7aea:	f1b8 0f00 	cmp.w	r8, #0
   b7aee:	d00e      	beq.n	b7b0e <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b7af0:	4620      	mov	r0, r4
   b7af2:	f7fd f8b5 	bl	b4c60 <strlen>
        *sout++ = '.';
   b7af6:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b7af8:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b7afa:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b7afc:	220a      	movs	r2, #10
   b7afe:	4643      	mov	r3, r8
   b7b00:	3101      	adds	r1, #1
   b7b02:	4628      	mov	r0, r5
    }
}
   b7b04:	b001      	add	sp, #4
   b7b06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b7b0a:	f000 bcb8 	b.w	b847e <ultoa>
}
   b7b0e:	b001      	add	sp, #4
   b7b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b7b14:	3fe00000 	.word	0x3fe00000

000b7b18 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b7b18:	b510      	push	{r4, lr}
   b7b1a:	4604      	mov	r4, r0
{
	free(buffer);
   b7b1c:	6800      	ldr	r0, [r0, #0]
   b7b1e:	f7ff fbf1 	bl	b7304 <free>
}
   b7b22:	4620      	mov	r0, r4
   b7b24:	bd10      	pop	{r4, pc}

000b7b26 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b7b26:	b510      	push	{r4, lr}
   b7b28:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b7b2a:	6800      	ldr	r0, [r0, #0]
   b7b2c:	b108      	cbz	r0, b7b32 <_ZN6String10invalidateEv+0xc>
   b7b2e:	f7ff fbe9 	bl	b7304 <free>
	buffer = NULL;
   b7b32:	2300      	movs	r3, #0
	capacity = len = 0;
   b7b34:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b7b38:	6023      	str	r3, [r4, #0]
}
   b7b3a:	bd10      	pop	{r4, pc}

000b7b3c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b7b3c:	b538      	push	{r3, r4, r5, lr}
   b7b3e:	4604      	mov	r4, r0
   b7b40:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b7b42:	6800      	ldr	r0, [r0, #0]
   b7b44:	3101      	adds	r1, #1
   b7b46:	f7ff fbe5 	bl	b7314 <realloc>
	if (newbuffer) {
   b7b4a:	b110      	cbz	r0, b7b52 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b7b4c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b7b50:	2001      	movs	r0, #1
	}
	return 0;
}
   b7b52:	bd38      	pop	{r3, r4, r5, pc}

000b7b54 <_ZN6String7reserveEj>:
{
   b7b54:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b7b56:	6803      	ldr	r3, [r0, #0]
{
   b7b58:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b7b5a:	b123      	cbz	r3, b7b66 <_ZN6String7reserveEj+0x12>
   b7b5c:	6843      	ldr	r3, [r0, #4]
   b7b5e:	428b      	cmp	r3, r1
   b7b60:	d301      	bcc.n	b7b66 <_ZN6String7reserveEj+0x12>
   b7b62:	2001      	movs	r0, #1
}
   b7b64:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b7b66:	4620      	mov	r0, r4
   b7b68:	f7ff ffe8 	bl	b7b3c <_ZN6String12changeBufferEj>
   b7b6c:	2800      	cmp	r0, #0
   b7b6e:	d0f9      	beq.n	b7b64 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b7b70:	68a3      	ldr	r3, [r4, #8]
   b7b72:	2b00      	cmp	r3, #0
   b7b74:	d1f5      	bne.n	b7b62 <_ZN6String7reserveEj+0xe>
   b7b76:	6822      	ldr	r2, [r4, #0]
   b7b78:	7013      	strb	r3, [r2, #0]
   b7b7a:	e7f2      	b.n	b7b62 <_ZN6String7reserveEj+0xe>

000b7b7c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b7b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7b7e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b7b80:	4611      	mov	r1, r2
   b7b82:	9201      	str	r2, [sp, #4]
{
   b7b84:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b7b86:	f7ff ffe5 	bl	b7b54 <_ZN6String7reserveEj>
   b7b8a:	9a01      	ldr	r2, [sp, #4]
   b7b8c:	b928      	cbnz	r0, b7b9a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b7b8e:	4620      	mov	r0, r4
   b7b90:	f7ff ffc9 	bl	b7b26 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b7b94:	4620      	mov	r0, r4
   b7b96:	b003      	add	sp, #12
   b7b98:	bd30      	pop	{r4, r5, pc}
	len = length;
   b7b9a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b7b9c:	4629      	mov	r1, r5
   b7b9e:	6820      	ldr	r0, [r4, #0]
   b7ba0:	f000 ff8e 	bl	b8ac0 <memcpy>
	buffer[len] = 0;
   b7ba4:	6822      	ldr	r2, [r4, #0]
   b7ba6:	68a3      	ldr	r3, [r4, #8]
   b7ba8:	2100      	movs	r1, #0
   b7baa:	54d1      	strb	r1, [r2, r3]
	return *this;
   b7bac:	e7f2      	b.n	b7b94 <_ZN6String4copyEPKcj+0x18>

000b7bae <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b7bae:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b7bb0:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b7bb2:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b7bb6:	4604      	mov	r4, r0
	len = 0;
   b7bb8:	6083      	str	r3, [r0, #8]
	flags = 0;
   b7bba:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b7bbc:	b141      	cbz	r1, b7bd0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b7bbe:	4608      	mov	r0, r1
   b7bc0:	9101      	str	r1, [sp, #4]
   b7bc2:	f7fd f84d 	bl	b4c60 <strlen>
   b7bc6:	9901      	ldr	r1, [sp, #4]
   b7bc8:	4602      	mov	r2, r0
   b7bca:	4620      	mov	r0, r4
   b7bcc:	f7ff ffd6 	bl	b7b7c <_ZN6String4copyEPKcj>
}
   b7bd0:	4620      	mov	r0, r4
   b7bd2:	b002      	add	sp, #8
   b7bd4:	bd10      	pop	{r4, pc}

000b7bd6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b7bd6:	b513      	push	{r0, r1, r4, lr}
   b7bd8:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b7bda:	b159      	cbz	r1, b7bf4 <_ZN6StringaSEPKc+0x1e>
   b7bdc:	4608      	mov	r0, r1
   b7bde:	9101      	str	r1, [sp, #4]
   b7be0:	f7fd f83e 	bl	b4c60 <strlen>
   b7be4:	9901      	ldr	r1, [sp, #4]
   b7be6:	4602      	mov	r2, r0
   b7be8:	4620      	mov	r0, r4
   b7bea:	f7ff ffc7 	bl	b7b7c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b7bee:	4620      	mov	r0, r4
   b7bf0:	b002      	add	sp, #8
   b7bf2:	bd10      	pop	{r4, pc}
	else invalidate();
   b7bf4:	f7ff ff97 	bl	b7b26 <_ZN6String10invalidateEv>
   b7bf8:	e7f9      	b.n	b7bee <_ZN6StringaSEPKc+0x18>

000b7bfa <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   b7bfa:	b510      	push	{r4, lr}
   b7bfc:	4604      	mov	r4, r0
   b7bfe:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b7c00:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   b7c02:	4608      	mov	r0, r1
	capacity = 0;
   b7c04:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b7c08:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b7c0a:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   b7c0c:	a901      	add	r1, sp, #4
   b7c0e:	b2c0      	uxtb	r0, r0
   b7c10:	f7ff ff22 	bl	b7a58 <_Z4dtoadhPc>
        *this = buf;
   b7c14:	a901      	add	r1, sp, #4
   b7c16:	4620      	mov	r0, r4
   b7c18:	f7ff ffdd 	bl	b7bd6 <_ZN6StringaSEPKc>
}
   b7c1c:	4620      	mov	r0, r4
   b7c1e:	b00a      	add	sp, #40	; 0x28
   b7c20:	bd10      	pop	{r4, pc}
	...

000b7c24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7c24:	4b05      	ldr	r3, [pc, #20]	; (b7c3c <_GLOBAL__sub_I_System+0x18>)
   b7c26:	2202      	movs	r2, #2
   b7c28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7c2a:	4b05      	ldr	r3, [pc, #20]	; (b7c40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7c2c:	4a05      	ldr	r2, [pc, #20]	; (b7c44 <_GLOBAL__sub_I_System+0x20>)
   b7c2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7c30:	2000      	movs	r0, #0
   b7c32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7c36:	f7ff bac1 	b.w	b71bc <set_system_mode>
   b7c3a:	bf00      	nop
   b7c3c:	2003e6fc 	.word	0x2003e6fc
   b7c40:	2003e6f0 	.word	0x2003e6f0
   b7c44:	ffff0000 	.word	0xffff0000

000b7c48 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b7c48:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7c4a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b7c4c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b7c50:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7c52:	2201      	movs	r2, #1
   b7c54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7c58:	f10d 0107 	add.w	r1, sp, #7
   b7c5c:	47a0      	blx	r4
}
   b7c5e:	b002      	add	sp, #8
   b7c60:	bd10      	pop	{r4, pc}

000b7c62 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b7c62:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7c64:	6803      	ldr	r3, [r0, #0]
   b7c66:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b7c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b7c6c:	46a4      	mov	ip, r4
}
   b7c6e:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b7c72:	4760      	bx	ip

000b7c74 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7c74:	b513      	push	{r0, r1, r4, lr}
   b7c76:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b7c78:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b7c7a:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b7c7e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b7c80:	f10d 0107 	add.w	r1, sp, #7
   b7c84:	2201      	movs	r2, #1
   b7c86:	47a0      	blx	r4
}
   b7c88:	b002      	add	sp, #8
   b7c8a:	bd10      	pop	{r4, pc}

000b7c8c <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b7c8c:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7c8e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7c90:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7c94:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7c98:	429a      	cmp	r2, r3
int TCPClient::read() {
   b7c9a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7c9c:	d008      	beq.n	b7cb0 <_ZN9TCPClient4readEv+0x24>
   b7c9e:	6963      	ldr	r3, [r4, #20]
   b7ca0:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7ca4:	1c51      	adds	r1, r2, #1
   b7ca6:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b7caa:	4413      	add	r3, r2
   b7cac:	7918      	ldrb	r0, [r3, #4]
}
   b7cae:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b7cb0:	6803      	ldr	r3, [r0, #0]
   b7cb2:	691b      	ldr	r3, [r3, #16]
   b7cb4:	4798      	blx	r3
   b7cb6:	2800      	cmp	r0, #0
   b7cb8:	d1f1      	bne.n	b7c9e <_ZN9TCPClient4readEv+0x12>
   b7cba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7cbe:	e7f6      	b.n	b7cae <_ZN9TCPClient4readEv+0x22>

000b7cc0 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b7cc0:	4770      	bx	lr

000b7cc2 <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b7cc2:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b7cc4:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b7cc6:	43c0      	mvns	r0, r0
   b7cc8:	0fc0      	lsrs	r0, r0, #31
   b7cca:	4770      	bx	lr

000b7ccc <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7ccc:	4770      	bx	lr
	...

000b7cd0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b7cd0:	4b06      	ldr	r3, [pc, #24]	; (b7cec <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b7cd2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7cd4:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7cd6:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7cda:	d005      	beq.n	b7ce8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7cdc:	4608      	mov	r0, r1
   b7cde:	f000 fdcf 	bl	b8880 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b7ce2:	2800      	cmp	r0, #0
   b7ce4:	bf08      	it	eq
   b7ce6:	2400      	moveq	r4, #0
      }
   b7ce8:	4620      	mov	r0, r4
   b7cea:	bd10      	pop	{r4, pc}
   b7cec:	000b9dcc 	.word	0x000b9dcc

000b7cf0 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7cf0:	b510      	push	{r4, lr}
   b7cf2:	21ac      	movs	r1, #172	; 0xac
   b7cf4:	4604      	mov	r4, r0
   b7cf6:	f7fc fffa 	bl	b4cee <_ZdlPvj>
   b7cfa:	4620      	mov	r0, r4
   b7cfc:	bd10      	pop	{r4, pc}

000b7cfe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b7cfe:	21ac      	movs	r1, #172	; 0xac
   b7d00:	f7fc bff5 	b.w	b4cee <_ZdlPvj>

000b7d04 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b7d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b7d08:	f04f 0800 	mov.w	r8, #0
   b7d0c:	b086      	sub	sp, #24
   b7d0e:	461c      	mov	r4, r3
   b7d10:	f8c0 8004 	str.w	r8, [r0, #4]
   b7d14:	4605      	mov	r5, r0
   b7d16:	460e      	mov	r6, r1
   b7d18:	4617      	mov	r7, r2
    struct timeval tv = {};
   b7d1a:	4641      	mov	r1, r8
   b7d1c:	2210      	movs	r2, #16
   b7d1e:	a802      	add	r0, sp, #8
   b7d20:	f000 fedc 	bl	b8adc <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b7d24:	1c63      	adds	r3, r4, #1
   b7d26:	d009      	beq.n	b7d3c <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b7d28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7d2c:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b7d30:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b7d34:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b7d38:	435c      	muls	r4, r3
   b7d3a:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b7d3c:	6968      	ldr	r0, [r5, #20]
   b7d3e:	2310      	movs	r3, #16
   b7d40:	9300      	str	r3, [sp, #0]
   b7d42:	6800      	ldr	r0, [r0, #0]
   b7d44:	ab02      	add	r3, sp, #8
   b7d46:	f241 0205 	movw	r2, #4101	; 0x1005
   b7d4a:	f640 71ff 	movw	r1, #4095	; 0xfff
   b7d4e:	f7ff f945 	bl	b6fdc <sock_setsockopt>
    if (ret < 0) {
   b7d52:	2800      	cmp	r0, #0
   b7d54:	da07      	bge.n	b7d66 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b7d56:	f7ff fafd 	bl	b7354 <__errno>
   b7d5a:	6803      	ldr	r3, [r0, #0]
   b7d5c:	606b      	str	r3, [r5, #4]
        return 0;
   b7d5e:	2000      	movs	r0, #0
}
   b7d60:	b006      	add	sp, #24
   b7d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b7d66:	6968      	ldr	r0, [r5, #20]
   b7d68:	2300      	movs	r3, #0
   b7d6a:	6800      	ldr	r0, [r0, #0]
   b7d6c:	463a      	mov	r2, r7
   b7d6e:	4631      	mov	r1, r6
   b7d70:	f7ff f954 	bl	b701c <sock_send>
    if (ret < 0) {
   b7d74:	1e03      	subs	r3, r0, #0
   b7d76:	dbee      	blt.n	b7d56 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b7d78:	4618      	mov	r0, r3
   b7d7a:	e7f1      	b.n	b7d60 <_ZN9TCPClient5writeEPKhjm+0x5c>

000b7d7c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b7d7c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   b7d7e:	6984      	ldr	r4, [r0, #24]
   b7d80:	4b0a      	ldr	r3, [pc, #40]	; (b7dac <_ZN9TCPClientD1Ev+0x30>)
   b7d82:	6003      	str	r3, [r0, #0]
   b7d84:	4605      	mov	r5, r0
   b7d86:	b17c      	cbz	r4, b7da8 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   b7d88:	6863      	ldr	r3, [r4, #4]
   b7d8a:	3b01      	subs	r3, #1
   b7d8c:	6063      	str	r3, [r4, #4]
   b7d8e:	b95b      	cbnz	r3, b7da8 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   b7d90:	6823      	ldr	r3, [r4, #0]
   b7d92:	4620      	mov	r0, r4
   b7d94:	689b      	ldr	r3, [r3, #8]
   b7d96:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b7d98:	68a3      	ldr	r3, [r4, #8]
   b7d9a:	3b01      	subs	r3, #1
   b7d9c:	60a3      	str	r3, [r4, #8]
   b7d9e:	b91b      	cbnz	r3, b7da8 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   b7da0:	6823      	ldr	r3, [r4, #0]
   b7da2:	4620      	mov	r0, r4
   b7da4:	68db      	ldr	r3, [r3, #12]
   b7da6:	4798      	blx	r3
   b7da8:	4628      	mov	r0, r5
   b7daa:	bd38      	pop	{r3, r4, r5, pc}
   b7dac:	000b9ed0 	.word	0x000b9ed0

000b7db0 <_ZN9TCPClientD0Ev>:
   b7db0:	b510      	push	{r4, lr}
   b7db2:	4604      	mov	r4, r0
   b7db4:	f7ff ffe2 	bl	b7d7c <_ZN9TCPClientD1Ev>
   b7db8:	4620      	mov	r0, r4
   b7dba:	211c      	movs	r1, #28
   b7dbc:	f7fc ff97 	bl	b4cee <_ZdlPvj>
   b7dc0:	4620      	mov	r0, r4
   b7dc2:	bd10      	pop	{r4, pc}

000b7dc4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b7dc4:	b530      	push	{r4, r5, lr}
   b7dc6:	b087      	sub	sp, #28
   b7dc8:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b7dca:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b7dcc:	4668      	mov	r0, sp
   b7dce:	f7ff fc03 	bl	b75d8 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b7dd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7dd4:	3404      	adds	r4, #4
   b7dd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7dd8:	682b      	ldr	r3, [r5, #0]
   b7dda:	7023      	strb	r3, [r4, #0]
    }
   b7ddc:	b007      	add	sp, #28
   b7dde:	bd30      	pop	{r4, r5, pc}

000b7de0 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b7de0:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b7de2:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b7de4:	4b05      	ldr	r3, [pc, #20]	; (b7dfc <_ZN9TCPClient8remoteIPEv+0x1c>)
   b7de6:	4604      	mov	r4, r0
   b7de8:	358c      	adds	r5, #140	; 0x8c
   b7dea:	f844 3b04 	str.w	r3, [r4], #4
   b7dee:	4606      	mov	r6, r0
   b7df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7df4:	682b      	ldr	r3, [r5, #0]
   b7df6:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b7df8:	4630      	mov	r0, r6
   b7dfa:	bd70      	pop	{r4, r5, r6, pc}
   b7dfc:	000b9e40 	.word	0x000b9e40

000b7e00 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7e04:	4698      	mov	r8, r3
    stop();
   b7e06:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7e08:	b093      	sub	sp, #76	; 0x4c
   b7e0a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b7e0c:	2400      	movs	r4, #0
    stop();
   b7e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b7e10:	4606      	mov	r6, r0
   b7e12:	4617      	mov	r7, r2
    stop();
   b7e14:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7e16:	4628      	mov	r0, r5
   b7e18:	466b      	mov	r3, sp
   b7e1a:	4622      	mov	r2, r4
   b7e1c:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b7e1e:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7e20:	f7ff f8d4 	bl	b6fcc <netdb_getaddrinfo>
   b7e24:	4605      	mov	r5, r0
   b7e26:	2800      	cmp	r0, #0
   b7e28:	d163      	bne.n	b7ef2 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b7e2a:	9b00      	ldr	r3, [sp, #0]
   b7e2c:	2b00      	cmp	r3, #0
   b7e2e:	d04b      	beq.n	b7ec8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7e30:	695b      	ldr	r3, [r3, #20]
   b7e32:	2b00      	cmp	r3, #0
   b7e34:	d048      	beq.n	b7ec8 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b7e36:	a806      	add	r0, sp, #24
   b7e38:	f7ff fb8a 	bl	b7550 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b7e3c:	9b00      	ldr	r3, [sp, #0]
   b7e3e:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b7e40:	7863      	ldrb	r3, [r4, #1]
   b7e42:	2b02      	cmp	r3, #2
   b7e44:	d104      	bne.n	b7e50 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b7e46:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b7e48:	a806      	add	r0, sp, #24
   b7e4a:	f7ff ffbb 	bl	b7dc4 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b7e4e:	e026      	b.n	b7e9e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b7e50:	2b0a      	cmp	r3, #10
   b7e52:	d124      	bne.n	b7e9e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b7e54:	2211      	movs	r2, #17
   b7e56:	4629      	mov	r1, r5
   b7e58:	a801      	add	r0, sp, #4
   b7e5a:	f000 fe3f 	bl	b8adc <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7e5e:	68a3      	ldr	r3, [r4, #8]
   b7e60:	2b00      	cmp	r3, #0
   b7e62:	d038      	beq.n	b7ed6 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7e64:	f104 0308 	add.w	r3, r4, #8
   b7e68:	f10d 0c04 	add.w	ip, sp, #4
   b7e6c:	3418      	adds	r4, #24
   b7e6e:	6818      	ldr	r0, [r3, #0]
   b7e70:	6859      	ldr	r1, [r3, #4]
   b7e72:	4662      	mov	r2, ip
   b7e74:	c203      	stmia	r2!, {r0, r1}
   b7e76:	3308      	adds	r3, #8
   b7e78:	42a3      	cmp	r3, r4
   b7e7a:	4694      	mov	ip, r2
   b7e7c:	d1f7      	bne.n	b7e6e <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b7e7e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b7e80:	a901      	add	r1, sp, #4
   b7e82:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b7e84:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b7e88:	f7ff fb70 	bl	b756c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7e8c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b7e90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b7e94:	ac07      	add	r4, sp, #28
   b7e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7e98:	f8dc 3000 	ldr.w	r3, [ip]
   b7e9c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b7e9e:	a806      	add	r0, sp, #24
   b7ea0:	f7ff fb76 	bl	b7590 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b7ea4:	b180      	cbz	r0, b7ec8 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b7ea6:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b7ea8:	ad07      	add	r5, sp, #28
   b7eaa:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b7eae:	4b12      	ldr	r3, [pc, #72]	; (b7ef8 <_ZN9TCPClient7connectEPKctm+0xf8>)
   b7eb0:	930c      	str	r3, [sp, #48]	; 0x30
   b7eb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7eb4:	ac0d      	add	r4, sp, #52	; 0x34
   b7eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7eb8:	682b      	ldr	r3, [r5, #0]
   b7eba:	7023      	strb	r3, [r4, #0]
   b7ebc:	463a      	mov	r2, r7
   b7ebe:	4643      	mov	r3, r8
   b7ec0:	a90c      	add	r1, sp, #48	; 0x30
   b7ec2:	4630      	mov	r0, r6
   b7ec4:	47c8      	blx	r9
   b7ec6:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b7ec8:	9800      	ldr	r0, [sp, #0]
   b7eca:	f7ff f877 	bl	b6fbc <netdb_freeaddrinfo>
}
   b7ece:	4628      	mov	r0, r5
   b7ed0:	b013      	add	sp, #76	; 0x4c
   b7ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b7ed6:	68e3      	ldr	r3, [r4, #12]
   b7ed8:	2b00      	cmp	r3, #0
   b7eda:	d1c3      	bne.n	b7e64 <_ZN9TCPClient7connectEPKctm+0x64>
   b7edc:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7ee0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b7ee4:	f7ff f852 	bl	b6f8c <inet_htonl>
   b7ee8:	4581      	cmp	r9, r0
   b7eea:	d1bb      	bne.n	b7e64 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b7eec:	f104 0114 	add.w	r1, r4, #20
   b7ef0:	e7aa      	b.n	b7e48 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b7ef2:	4625      	mov	r5, r4
   b7ef4:	e7e8      	b.n	b7ec8 <_ZN9TCPClient7connectEPKctm+0xc8>
   b7ef6:	bf00      	nop
   b7ef8:	000b9e40 	.word	0x000b9e40

000b7efc <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b7efc:	b538      	push	{r3, r4, r5, lr}
   b7efe:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b7f00:	681a      	ldr	r2, [r3, #0]
   b7f02:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b7f04:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b7f06:	da10      	bge.n	b7f2a <_ZN9TCPClient9connectedEv+0x2e>
   b7f08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f0c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7f10:	429a      	cmp	r2, r3
   b7f12:	d10a      	bne.n	b7f2a <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b7f14:	6803      	ldr	r3, [r0, #0]
   b7f16:	691b      	ldr	r3, [r3, #16]
   b7f18:	4798      	blx	r3
        if (!rv) {
   b7f1a:	4604      	mov	r4, r0
   b7f1c:	b928      	cbnz	r0, b7f2a <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b7f1e:	682b      	ldr	r3, [r5, #0]
   b7f20:	4628      	mov	r0, r5
   b7f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7f24:	4798      	blx	r3
        rv = available();
   b7f26:	4620      	mov	r0, r4
}
   b7f28:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b7f2a:	2001      	movs	r0, #1
   b7f2c:	e7fc      	b.n	b7f28 <_ZN9TCPClient9connectedEv+0x2c>

000b7f2e <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b7f2e:	b510      	push	{r4, lr}
   b7f30:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7f32:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f36:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7f3a:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b7f3c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7f3e:	d005      	beq.n	b7f4c <_ZN9TCPClient4peekEv+0x1e>
   b7f40:	6963      	ldr	r3, [r4, #20]
   b7f42:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b7f46:	4413      	add	r3, r2
   b7f48:	7918      	ldrb	r0, [r3, #4]
}
   b7f4a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b7f4c:	6803      	ldr	r3, [r0, #0]
   b7f4e:	691b      	ldr	r3, [r3, #16]
   b7f50:	4798      	blx	r3
   b7f52:	2800      	cmp	r0, #0
   b7f54:	d1f4      	bne.n	b7f40 <_ZN9TCPClient4peekEv+0x12>
   b7f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7f5a:	e7f6      	b.n	b7f4a <_ZN9TCPClient4peekEv+0x1c>

000b7f5c <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7f5e:	6943      	ldr	r3, [r0, #20]
   b7f60:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b7f62:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b7f66:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b7f6a:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b7f6c:	4605      	mov	r5, r0
   b7f6e:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b7f70:	d016      	beq.n	b7fa0 <_ZN9TCPClient4readEPhj+0x44>
   b7f72:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b7f74:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b7f78:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b7f7c:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b7f7e:	42bc      	cmp	r4, r7
   b7f80:	bf28      	it	cs
   b7f82:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b7f84:	3304      	adds	r3, #4
   b7f86:	4622      	mov	r2, r4
   b7f88:	4419      	add	r1, r3
   b7f8a:	4630      	mov	r0, r6
   b7f8c:	f000 fd98 	bl	b8ac0 <memcpy>
   b7f90:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b7f92:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b7f96:	4423      	add	r3, r4
   b7f98:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b7f9c:	4620      	mov	r0, r4
   b7f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b7fa0:	6803      	ldr	r3, [r0, #0]
   b7fa2:	691b      	ldr	r3, [r3, #16]
   b7fa4:	4798      	blx	r3
   b7fa6:	2800      	cmp	r0, #0
   b7fa8:	d1e3      	bne.n	b7f72 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b7faa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   b7fae:	e7f5      	b.n	b7f9c <_ZN9TCPClient4readEPhj+0x40>

000b7fb0 <_ZN9TCPClient12flush_bufferEv>:
   b7fb0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b7fb2:	2300      	movs	r3, #0
   b7fb4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b7fb8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b7fba:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b7fbe:	4770      	bx	lr

000b7fc0 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7fc4:	461f      	mov	r7, r3
    stop();
   b7fc6:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7fc8:	460c      	mov	r4, r1
    stop();
   b7fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b7fcc:	b08a      	sub	sp, #40	; 0x28
   b7fce:	4605      	mov	r5, r0
   b7fd0:	4616      	mov	r6, r2
    stop();
   b7fd2:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b7fd4:	7d23      	ldrb	r3, [r4, #20]
   b7fd6:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b7fda:	2b04      	cmp	r3, #4
   b7fdc:	bf0c      	ite	eq
   b7fde:	2002      	moveq	r0, #2
   b7fe0:	200a      	movne	r0, #10
   b7fe2:	2206      	movs	r2, #6
   b7fe4:	2101      	movs	r1, #1
   b7fe6:	f7ff f821 	bl	b702c <sock_socket>
   b7fea:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b7fee:	696b      	ldr	r3, [r5, #20]
   b7ff0:	681b      	ldr	r3, [r3, #0]
   b7ff2:	2b00      	cmp	r3, #0
   b7ff4:	da08      	bge.n	b8008 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b7ff6:	682b      	ldr	r3, [r5, #0]
   b7ff8:	4628      	mov	r0, r5
   b7ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b7ffc:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b7ffe:	4798      	blx	r3
}
   b8000:	4620      	mov	r0, r4
   b8002:	b00a      	add	sp, #40	; 0x28
   b8004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b8008:	4628      	mov	r0, r5
   b800a:	f7ff ffd1 	bl	b7fb0 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b800e:	b1b7      	cbz	r7, b803e <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b8010:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b8012:	a903      	add	r1, sp, #12
   b8014:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b8016:	9303      	str	r3, [sp, #12]
   b8018:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b801c:	f7fe ffa6 	bl	b6f6c <if_index_to_name>
   b8020:	2800      	cmp	r0, #0
   b8022:	d1e8      	bne.n	b7ff6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b8024:	6968      	ldr	r0, [r5, #20]
   b8026:	2306      	movs	r3, #6
   b8028:	9300      	str	r3, [sp, #0]
   b802a:	6800      	ldr	r0, [r0, #0]
   b802c:	ab03      	add	r3, sp, #12
   b802e:	f241 020b 	movw	r2, #4107	; 0x100b
   b8032:	f640 71ff 	movw	r1, #4095	; 0xfff
   b8036:	f7fe ffd1 	bl	b6fdc <sock_setsockopt>
   b803a:	2800      	cmp	r0, #0
   b803c:	d1db      	bne.n	b7ff6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b803e:	221c      	movs	r2, #28
   b8040:	2100      	movs	r1, #0
   b8042:	a803      	add	r0, sp, #12
   b8044:	f000 fd4a 	bl	b8adc <memset>
    if (ip.version() == 4) {
   b8048:	7d23      	ldrb	r3, [r4, #20]
   b804a:	2b04      	cmp	r3, #4
   b804c:	d11d      	bne.n	b808a <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b804e:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b8052:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b8054:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b8058:	f7fe ffa8 	bl	b6fac <inet_htons>
   b805c:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b8060:	6860      	ldr	r0, [r4, #4]
   b8062:	f7fe ff93 	bl	b6f8c <inet_htonl>
   b8066:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b8068:	696b      	ldr	r3, [r5, #20]
   b806a:	221c      	movs	r2, #28
   b806c:	6818      	ldr	r0, [r3, #0]
   b806e:	a903      	add	r1, sp, #12
   b8070:	f7fe ffc4 	bl	b6ffc <sock_connect>
   b8074:	2800      	cmp	r0, #0
   b8076:	d1be      	bne.n	b7ff6 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b8078:	3404      	adds	r4, #4
   b807a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b807c:	696d      	ldr	r5, [r5, #20]
   b807e:	358c      	adds	r5, #140	; 0x8c
   b8080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b8082:	6823      	ldr	r3, [r4, #0]
   b8084:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b8086:	2401      	movs	r4, #1
   b8088:	e7ba      	b.n	b8000 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b808a:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b808e:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b8090:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b8094:	f7fe ff8a 	bl	b6fac <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b8098:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b809a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b809e:	1d23      	adds	r3, r4, #4
   b80a0:	f104 0714 	add.w	r7, r4, #20
   b80a4:	6818      	ldr	r0, [r3, #0]
   b80a6:	6859      	ldr	r1, [r3, #4]
   b80a8:	4632      	mov	r2, r6
   b80aa:	c203      	stmia	r2!, {r0, r1}
   b80ac:	3308      	adds	r3, #8
   b80ae:	42bb      	cmp	r3, r7
   b80b0:	4616      	mov	r6, r2
   b80b2:	d1f7      	bne.n	b80a4 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b80b4:	e7d8      	b.n	b8068 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b80b8 <_ZN9TCPClient9availableEv>:
{
   b80b8:	b530      	push	{r4, r5, lr}
   b80ba:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b80bc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b80c0:	b08b      	sub	sp, #44	; 0x2c
   b80c2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b80c4:	b12b      	cbz	r3, b80d2 <_ZN9TCPClient9availableEv+0x1a>
   b80c6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b80ca:	429a      	cmp	r2, r3
   b80cc:	d101      	bne.n	b80d2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b80ce:	f7ff ff6f 	bl	b7fb0 <_ZN9TCPClient12flush_bufferEv>
   b80d2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b80d4:	6808      	ldr	r0, [r1, #0]
   b80d6:	2800      	cmp	r0, #0
   b80d8:	db18      	blt.n	b810c <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b80da:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b80de:	2d7f      	cmp	r5, #127	; 0x7f
   b80e0:	d814      	bhi.n	b810c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b80e2:	3104      	adds	r1, #4
   b80e4:	2308      	movs	r3, #8
   b80e6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b80ea:	4429      	add	r1, r5
   b80ec:	f7fe ff8e 	bl	b700c <sock_recv>
            if (ret > 0) {
   b80f0:	2800      	cmp	r0, #0
   b80f2:	dd13      	ble.n	b811c <_ZN9TCPClient9availableEv+0x64>
   b80f4:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b80f6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b80fa:	b90a      	cbnz	r2, b8100 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b80fc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b8100:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b8102:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b8106:	4410      	add	r0, r2
   b8108:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b810c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b810e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b8112:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b8116:	1ac0      	subs	r0, r0, r3
   b8118:	b00b      	add	sp, #44	; 0x2c
   b811a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b811c:	f7ff f91a 	bl	b7354 <__errno>
   b8120:	6803      	ldr	r3, [r0, #0]
   b8122:	2b0b      	cmp	r3, #11
   b8124:	d0f2      	beq.n	b810c <_ZN9TCPClient9availableEv+0x54>
   b8126:	f7ff f915 	bl	b7354 <__errno>
   b812a:	6803      	ldr	r3, [r0, #0]
   b812c:	2b0b      	cmp	r3, #11
   b812e:	d0ed      	beq.n	b810c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b8130:	2320      	movs	r3, #32
   b8132:	2500      	movs	r5, #0
   b8134:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b8138:	f7ff f90c 	bl	b7354 <__errno>
   b813c:	6803      	ldr	r3, [r0, #0]
   b813e:	9301      	str	r3, [sp, #4]
   b8140:	4b08      	ldr	r3, [pc, #32]	; (b8164 <_ZN9TCPClient9availableEv+0xac>)
   b8142:	4909      	ldr	r1, [pc, #36]	; (b8168 <_ZN9TCPClient9availableEv+0xb0>)
   b8144:	9300      	str	r3, [sp, #0]
   b8146:	aa02      	add	r2, sp, #8
   b8148:	462b      	mov	r3, r5
   b814a:	2032      	movs	r0, #50	; 0x32
   b814c:	f7ff f82e 	bl	b71ac <log_message>
                    sock_close(d_->sock);
   b8150:	6963      	ldr	r3, [r4, #20]
   b8152:	6818      	ldr	r0, [r3, #0]
   b8154:	f7fe ff4a 	bl	b6fec <sock_close>
   b8158:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b815a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b815e:	601a      	str	r2, [r3, #0]
   b8160:	e7d4      	b.n	b810c <_ZN9TCPClient9availableEv+0x54>
   b8162:	bf00      	nop
   b8164:	000b9e9b 	.word	0x000b9e9b
   b8168:	000b9e94 	.word	0x000b9e94

000b816c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b816c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b816e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b8170:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b8172:	6818      	ldr	r0, [r3, #0]
   b8174:	2800      	cmp	r0, #0
   b8176:	db01      	blt.n	b817c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b8178:	f7fe ff38 	bl	b6fec <sock_close>
   b817c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b817e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b8182:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b8184:	6960      	ldr	r0, [r4, #20]
   b8186:	2211      	movs	r2, #17
   b8188:	2100      	movs	r1, #0
   b818a:	308c      	adds	r0, #140	; 0x8c
   b818c:	f000 fca6 	bl	b8adc <memset>
    flush_buffer();
   b8190:	4620      	mov	r0, r4
}
   b8192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b8196:	f7ff bf0b 	b.w	b7fb0 <_ZN9TCPClient12flush_bufferEv>

000b819a <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b819a:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b819c:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b819e:	4604      	mov	r4, r0
          total(0) {
   b81a0:	6001      	str	r1, [r0, #0]
   b81a2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b81a6:	3088      	adds	r0, #136	; 0x88
   b81a8:	f7ff f9d2 	bl	b7550 <_ZN9IPAddressC1Ev>
}
   b81ac:	4620      	mov	r0, r4
   b81ae:	bd10      	pop	{r4, pc}

000b81b0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b81b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b81b2:	2300      	movs	r3, #0
   b81b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b81b8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b81bc:	4a0e      	ldr	r2, [pc, #56]	; (b81f8 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b81be:	6103      	str	r3, [r0, #16]
   b81c0:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b81c2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b81c4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b81c6:	20ac      	movs	r0, #172	; 0xac
   b81c8:	9101      	str	r1, [sp, #4]
   b81ca:	f7fc fd8c 	bl	b4ce6 <_Znwj>
	  auto __pi = ::new (__mem)
   b81ce:	1e05      	subs	r5, r0, #0
   b81d0:	f105 060c 	add.w	r6, r5, #12
   b81d4:	d008      	beq.n	b81e8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b81d6:	2301      	movs	r3, #1
   b81d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b81dc:	4b07      	ldr	r3, [pc, #28]	; (b81fc <_ZN9TCPClientC1Ei+0x4c>)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b81de:	9901      	ldr	r1, [sp, #4]
   b81e0:	602b      	str	r3, [r5, #0]
   b81e2:	4630      	mov	r0, r6
   b81e4:	f7ff ffd9 	bl	b819a <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b81e8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b81ea:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b81ee:	f7ff fedf 	bl	b7fb0 <_ZN9TCPClient12flush_bufferEv>
}
   b81f2:	b002      	add	sp, #8
   b81f4:	bd70      	pop	{r4, r5, r6, pc}
   b81f6:	bf00      	nop
   b81f8:	000b9ed0 	.word	0x000b9ed0
   b81fc:	000b9eb4 	.word	0x000b9eb4

000b8200 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b8200:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b8202:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
TCPClient::TCPClient()
   b8206:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b8208:	f7ff ffd2 	bl	b81b0 <_ZN9TCPClientC1Ei>
}
   b820c:	4620      	mov	r0, r4
   b820e:	bd10      	pop	{r4, pc}

000b8210 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b8210:	b510      	push	{r4, lr}
   b8212:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b8214:	6800      	ldr	r0, [r0, #0]
   b8216:	2800      	cmp	r0, #0
   b8218:	db01      	blt.n	b821e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b821a:	f7fe fee7 	bl	b6fec <sock_close>
    }
}
   b821e:	4620      	mov	r0, r4
   b8220:	bd10      	pop	{r4, pc}

000b8222 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b8222:	300c      	adds	r0, #12
   b8224:	f7ff bff4 	b.w	b8210 <_ZN9TCPClient4DataD1Ev>

000b8228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b8228:	4b02      	ldr	r3, [pc, #8]	; (b8234 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b822a:	681a      	ldr	r2, [r3, #0]
   b822c:	4b02      	ldr	r3, [pc, #8]	; (b8238 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b822e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b8230:	4770      	bx	lr
   b8232:	bf00      	nop
   b8234:	2003e550 	.word	0x2003e550
   b8238:	2003e700 	.word	0x2003e700

000b823c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b823c:	4770      	bx	lr

000b823e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b823e:	7441      	strb	r1, [r0, #17]
}
   b8240:	4770      	bx	lr

000b8242 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b8242:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b8244:	7c00      	ldrb	r0, [r0, #16]
   b8246:	f7fe ff69 	bl	b711c <hal_usart_available_data_for_write>
}
   b824a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b824e:	bd08      	pop	{r3, pc}

000b8250 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b8250:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b8252:	7c00      	ldrb	r0, [r0, #16]
   b8254:	f7fe ff3a 	bl	b70cc <hal_usart_available>
}
   b8258:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b825c:	bd08      	pop	{r3, pc}

000b825e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b825e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b8260:	7c00      	ldrb	r0, [r0, #16]
   b8262:	f7fe ff43 	bl	b70ec <hal_usart_peek>
}
   b8266:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b826a:	bd08      	pop	{r3, pc}

000b826c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b826c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b826e:	7c00      	ldrb	r0, [r0, #16]
   b8270:	f7fe ff34 	bl	b70dc <hal_usart_read>
}
   b8274:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8278:	bd08      	pop	{r3, pc}

000b827a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b827a:	7c00      	ldrb	r0, [r0, #16]
   b827c:	f7fe bf3e 	b.w	b70fc <hal_usart_flush>

000b8280 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b8280:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8282:	7c45      	ldrb	r5, [r0, #17]
{
   b8284:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8286:	b12d      	cbz	r5, b8294 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b8288:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b828a:	b003      	add	sp, #12
   b828c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b8290:	f7fe bf14 	b.w	b70bc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b8294:	7c00      	ldrb	r0, [r0, #16]
   b8296:	9101      	str	r1, [sp, #4]
   b8298:	f7fe ff40 	bl	b711c <hal_usart_available_data_for_write>
   b829c:	2800      	cmp	r0, #0
   b829e:	9901      	ldr	r1, [sp, #4]
   b82a0:	dcf2      	bgt.n	b8288 <_ZN11USARTSerial5writeEh+0x8>
}
   b82a2:	4628      	mov	r0, r5
   b82a4:	b003      	add	sp, #12
   b82a6:	bd30      	pop	{r4, r5, pc}

000b82a8 <_ZN11USARTSerialD0Ev>:
   b82a8:	b510      	push	{r4, lr}
   b82aa:	2114      	movs	r1, #20
   b82ac:	4604      	mov	r4, r0
   b82ae:	f7fc fd1e 	bl	b4cee <_ZdlPvj>
   b82b2:	4620      	mov	r0, r4
   b82b4:	bd10      	pop	{r4, pc}
	...

000b82b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b82b8:	b510      	push	{r4, lr}
   b82ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b82be:	4604      	mov	r4, r0
   b82c0:	4608      	mov	r0, r1
   b82c2:	4611      	mov	r1, r2
   b82c4:	2200      	movs	r2, #0
   b82c6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b82ca:	4b04      	ldr	r3, [pc, #16]	; (b82dc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b82cc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b82ce:	2301      	movs	r3, #1
  _serial = serial;
   b82d0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b82d2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b82d4:	f7fe ff2a 	bl	b712c <hal_usart_init_ex>
}
   b82d8:	4620      	mov	r0, r4
   b82da:	bd10      	pop	{r4, pc}
   b82dc:	000b9f38 	.word	0x000b9f38

000b82e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b82e0:	7441      	strb	r1, [r0, #17]
}
   b82e2:	4770      	bx	lr

000b82e4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b82e4:	4770      	bx	lr

000b82e6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b82e6:	4770      	bx	lr

000b82e8 <_ZN9USBSerial4readEv>:
{
   b82e8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b82ea:	2100      	movs	r1, #0
   b82ec:	7c00      	ldrb	r0, [r0, #16]
   b82ee:	f7fe ff3d 	bl	b716c <HAL_USB_USART_Receive_Data>
}
   b82f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b82f6:	bd08      	pop	{r3, pc}

000b82f8 <_ZN9USBSerial4peekEv>:
{
   b82f8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b82fa:	2101      	movs	r1, #1
   b82fc:	7c00      	ldrb	r0, [r0, #16]
   b82fe:	f7fe ff35 	bl	b716c <HAL_USB_USART_Receive_Data>
}
   b8302:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b8306:	bd08      	pop	{r3, pc}

000b8308 <_ZN9USBSerial17availableForWriteEv>:
{
   b8308:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b830a:	7c00      	ldrb	r0, [r0, #16]
   b830c:	f7fe ff26 	bl	b715c <HAL_USB_USART_Available_Data_For_Write>
}
   b8310:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8314:	bd08      	pop	{r3, pc}

000b8316 <_ZN9USBSerial9availableEv>:
{
   b8316:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b8318:	7c00      	ldrb	r0, [r0, #16]
   b831a:	f7fe ff17 	bl	b714c <HAL_USB_USART_Available_Data>
}
   b831e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b8322:	bd08      	pop	{r3, pc}

000b8324 <_ZN9USBSerial5writeEh>:
{
   b8324:	b513      	push	{r0, r1, r4, lr}
   b8326:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b8328:	7c00      	ldrb	r0, [r0, #16]
{
   b832a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b832c:	f7fe ff16 	bl	b715c <HAL_USB_USART_Available_Data_For_Write>
   b8330:	2800      	cmp	r0, #0
   b8332:	9901      	ldr	r1, [sp, #4]
   b8334:	dc01      	bgt.n	b833a <_ZN9USBSerial5writeEh+0x16>
   b8336:	7c60      	ldrb	r0, [r4, #17]
   b8338:	b120      	cbz	r0, b8344 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b833a:	7c20      	ldrb	r0, [r4, #16]
   b833c:	f7fe ff1e 	bl	b717c <HAL_USB_USART_Send_Data>
   b8340:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b8344:	b002      	add	sp, #8
   b8346:	bd10      	pop	{r4, pc}

000b8348 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b8348:	7c00      	ldrb	r0, [r0, #16]
   b834a:	f7fe bf1f 	b.w	b718c <HAL_USB_USART_Flush_Data>

000b834e <_ZN9USBSerialD0Ev>:
   b834e:	b510      	push	{r4, lr}
   b8350:	2114      	movs	r1, #20
   b8352:	4604      	mov	r4, r0
   b8354:	f7fc fccb 	bl	b4cee <_ZdlPvj>
   b8358:	4620      	mov	r0, r4
   b835a:	bd10      	pop	{r4, pc}

000b835c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b835c:	b510      	push	{r4, lr}
   b835e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b8362:	4604      	mov	r4, r0
   b8364:	4608      	mov	r0, r1
   b8366:	2100      	movs	r1, #0
   b8368:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b836c:	4b04      	ldr	r3, [pc, #16]	; (b8380 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b836e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b8370:	2301      	movs	r3, #1
  _serial = serial;
   b8372:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b8374:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b8376:	4611      	mov	r1, r2
   b8378:	f7fe fee0 	bl	b713c <HAL_USB_USART_Init>
}
   b837c:	4620      	mov	r0, r4
   b837e:	bd10      	pop	{r4, pc}
   b8380:	000b9f68 	.word	0x000b9f68

000b8384 <_Z19acquireSerialBufferv>:
{
   b8384:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b8386:	2214      	movs	r2, #20
{
   b8388:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b838a:	2100      	movs	r1, #0
   b838c:	f000 fba6 	bl	b8adc <memset>
}
   b8390:	4620      	mov	r0, r4
   b8392:	bd10      	pop	{r4, pc}

000b8394 <_Z16_fetch_usbserialv>:
{
   b8394:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b8396:	4c0f      	ldr	r4, [pc, #60]	; (b83d4 <_Z16_fetch_usbserialv+0x40>)
{
   b8398:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b839a:	a803      	add	r0, sp, #12
   b839c:	f7ff fff2 	bl	b8384 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b83a0:	7821      	ldrb	r1, [r4, #0]
   b83a2:	f3bf 8f5b 	dmb	ish
   b83a6:	f011 0101 	ands.w	r1, r1, #1
   b83aa:	d10f      	bne.n	b83cc <_Z16_fetch_usbserialv+0x38>
   b83ac:	4620      	mov	r0, r4
   b83ae:	9101      	str	r1, [sp, #4]
   b83b0:	f7fc fcac 	bl	b4d0c <__cxa_guard_acquire>
   b83b4:	9901      	ldr	r1, [sp, #4]
   b83b6:	b148      	cbz	r0, b83cc <_Z16_fetch_usbserialv+0x38>
   b83b8:	aa03      	add	r2, sp, #12
   b83ba:	4807      	ldr	r0, [pc, #28]	; (b83d8 <_Z16_fetch_usbserialv+0x44>)
   b83bc:	f7ff ffce 	bl	b835c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b83c0:	4620      	mov	r0, r4
   b83c2:	f7fc fca8 	bl	b4d16 <__cxa_guard_release>
   b83c6:	4805      	ldr	r0, [pc, #20]	; (b83dc <_Z16_fetch_usbserialv+0x48>)
   b83c8:	f000 fb6c 	bl	b8aa4 <atexit>
	return _usbserial;
}
   b83cc:	4802      	ldr	r0, [pc, #8]	; (b83d8 <_Z16_fetch_usbserialv+0x44>)
   b83ce:	b008      	add	sp, #32
   b83d0:	bd10      	pop	{r4, pc}
   b83d2:	bf00      	nop
   b83d4:	2003e704 	.word	0x2003e704
   b83d8:	2003e708 	.word	0x2003e708
   b83dc:	000b82e5 	.word	0x000b82e5

000b83e0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b83e0:	2200      	movs	r2, #0
   b83e2:	6840      	ldr	r0, [r0, #4]
   b83e4:	4611      	mov	r1, r2
   b83e6:	f7fe bf3d 	b.w	b7264 <network_ready>

000b83ea <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b83ea:	2200      	movs	r2, #0
   b83ec:	6840      	ldr	r0, [r0, #4]
   b83ee:	4611      	mov	r1, r2
   b83f0:	f7fe bf58 	b.w	b72a4 <network_listening>

000b83f4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b83f4:	2200      	movs	r2, #0
   b83f6:	6840      	ldr	r0, [r0, #4]
   b83f8:	4611      	mov	r1, r2
   b83fa:	f7fe bf63 	b.w	b72c4 <network_get_listen_timeout>

000b83fe <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b83fe:	6840      	ldr	r0, [r0, #4]
   b8400:	2200      	movs	r2, #0
   b8402:	f7fe bf57 	b.w	b72b4 <network_set_listen_timeout>

000b8406 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b8406:	6840      	ldr	r0, [r0, #4]
   b8408:	2200      	movs	r2, #0
   b840a:	f081 0101 	eor.w	r1, r1, #1
   b840e:	f7fe bf41 	b.w	b7294 <network_listen>

000b8412 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8412:	2300      	movs	r3, #0
   b8414:	6840      	ldr	r0, [r0, #4]
   b8416:	461a      	mov	r2, r3
   b8418:	4619      	mov	r1, r3
   b841a:	f7fe bf33 	b.w	b7284 <network_off>

000b841e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b841e:	2300      	movs	r3, #0
   b8420:	6840      	ldr	r0, [r0, #4]
   b8422:	461a      	mov	r2, r3
   b8424:	4619      	mov	r1, r3
   b8426:	f7fe bf25 	b.w	b7274 <network_on>

000b842a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b842a:	2200      	movs	r2, #0
   b842c:	6840      	ldr	r0, [r0, #4]
   b842e:	4611      	mov	r1, r2
   b8430:	f7fe bf08 	b.w	b7244 <network_connecting>

000b8434 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8434:	6840      	ldr	r0, [r0, #4]
   b8436:	2200      	movs	r2, #0
   b8438:	2102      	movs	r1, #2
   b843a:	f7fe bf0b 	b.w	b7254 <network_disconnect>

000b843e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b843e:	2300      	movs	r3, #0
   b8440:	6840      	ldr	r0, [r0, #4]
   b8442:	461a      	mov	r2, r3
   b8444:	f7fe bef6 	b.w	b7234 <network_connect>

000b8448 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b8448:	4b02      	ldr	r3, [pc, #8]	; (b8454 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b844a:	2204      	movs	r2, #4
   b844c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b844e:	4a02      	ldr	r2, [pc, #8]	; (b8458 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8450:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8452:	4770      	bx	lr
   b8454:	2003e71c 	.word	0x2003e71c
   b8458:	000b9f98 	.word	0x000b9f98

000b845c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b845c:	b510      	push	{r4, lr}
   b845e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b8460:	f7fc fbfe 	bl	b4c60 <strlen>
   b8464:	3801      	subs	r0, #1
   b8466:	1823      	adds	r3, r4, r0
   b8468:	4620      	mov	r0, r4
	while(i<j){
   b846a:	4283      	cmp	r3, r0
   b846c:	d906      	bls.n	b847c <_Z11str_reversePc+0x20>
		c = *i;
   b846e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b8470:	7819      	ldrb	r1, [r3, #0]
   b8472:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b8476:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b847a:	e7f6      	b.n	b846a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b847c:	bd10      	pop	{r4, pc}

000b847e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b847e:	b570      	push	{r4, r5, r6, lr}
   b8480:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b8482:	1e91      	subs	r1, r2, #2
   b8484:	2922      	cmp	r1, #34	; 0x22
   b8486:	d81d      	bhi.n	b84c4 <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b8488:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b848a:	b930      	cbnz	r0, b849a <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b848c:	4423      	add	r3, r4
            *ptr++ = '0';
   b848e:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b8490:	429d      	cmp	r5, r3
   b8492:	d210      	bcs.n	b84b6 <ultoa+0x38>
            *ptr++ = '0';
   b8494:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b8498:	e7fa      	b.n	b8490 <ultoa+0x12>
            result.quot = a/radix;
   b849a:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b849e:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b84a2:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b84a4:	2809      	cmp	r0, #9
                *ptr += '0';
   b84a6:	bf94      	ite	ls
   b84a8:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b84aa:	3157      	addhi	r1, #87	; 0x57
   b84ac:	b2c9      	uxtb	r1, r1
   b84ae:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b84b2:	4630      	mov	r0, r6
	while(a){
   b84b4:	e7e9      	b.n	b848a <ultoa+0xc>

	*ptr = '\0';
   b84b6:	2300      	movs	r3, #0
	str_reverse(buffer);
   b84b8:	4620      	mov	r0, r4
	*ptr = '\0';
   b84ba:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b84bc:	f7ff ffce 	bl	b845c <_Z11str_reversePc>
	return buffer;
   b84c0:	4620      	mov	r0, r4
}
   b84c2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b84c4:	2000      	movs	r0, #0
   b84c6:	e7fc      	b.n	b84c2 <ultoa+0x44>

000b84c8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b84c8:	4b01      	ldr	r3, [pc, #4]	; (b84d0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b84ca:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b84cc:	4770      	bx	lr
   b84ce:	bf00      	nop
   b84d0:	2003e554 	.word	0x2003e554

000b84d4 <serialEventRun>:
{
   b84d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b84d6:	4b0b      	ldr	r3, [pc, #44]	; (b8504 <serialEventRun+0x30>)
   b84d8:	b143      	cbz	r3, b84ec <serialEventRun+0x18>
   b84da:	f7ff ff5b 	bl	b8394 <_Z16_fetch_usbserialv>
   b84de:	6803      	ldr	r3, [r0, #0]
   b84e0:	691b      	ldr	r3, [r3, #16]
   b84e2:	4798      	blx	r3
   b84e4:	2800      	cmp	r0, #0
   b84e6:	dd01      	ble.n	b84ec <serialEventRun+0x18>
        serialEvent();
   b84e8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b84ec:	4b06      	ldr	r3, [pc, #24]	; (b8508 <serialEventRun+0x34>)
   b84ee:	b143      	cbz	r3, b8502 <serialEventRun+0x2e>
   b84f0:	f000 f99a 	bl	b8828 <_Z22__fetch_global_Serial1v>
   b84f4:	6803      	ldr	r3, [r0, #0]
   b84f6:	691b      	ldr	r3, [r3, #16]
   b84f8:	4798      	blx	r3
   b84fa:	2800      	cmp	r0, #0
   b84fc:	dd01      	ble.n	b8502 <serialEventRun+0x2e>
        serialEvent1();
   b84fe:	f3af 8000 	nop.w
}
   b8502:	bd08      	pop	{r3, pc}
	...

000b850c <_post_loop>:
{
   b850c:	b508      	push	{r3, lr}
	serialEventRun();
   b850e:	f7ff ffe1 	bl	b84d4 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b8512:	f7fe fc8b 	bl	b6e2c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b8516:	4b01      	ldr	r3, [pc, #4]	; (b851c <_post_loop+0x10>)
   b8518:	6018      	str	r0, [r3, #0]
}
   b851a:	bd08      	pop	{r3, pc}
   b851c:	2003e72c 	.word	0x2003e72c

000b8520 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8520:	4805      	ldr	r0, [pc, #20]	; (b8538 <_Z33system_initialize_user_backup_ramv+0x18>)
   b8522:	4a06      	ldr	r2, [pc, #24]	; (b853c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b8524:	4906      	ldr	r1, [pc, #24]	; (b8540 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b8526:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b8528:	1a12      	subs	r2, r2, r0
   b852a:	f000 fac9 	bl	b8ac0 <memcpy>
    __backup_sram_signature = signature;
   b852e:	4b05      	ldr	r3, [pc, #20]	; (b8544 <_Z33system_initialize_user_backup_ramv+0x24>)
   b8530:	4a05      	ldr	r2, [pc, #20]	; (b8548 <_Z33system_initialize_user_backup_ramv+0x28>)
   b8532:	601a      	str	r2, [r3, #0]
}
   b8534:	bd08      	pop	{r3, pc}
   b8536:	bf00      	nop
   b8538:	2003f400 	.word	0x2003f400
   b853c:	2003f404 	.word	0x2003f404
   b8540:	000ba2f0 	.word	0x000ba2f0
   b8544:	2003f400 	.word	0x2003f400
   b8548:	9a271c1e 	.word	0x9a271c1e

000b854c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b854c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b854e:	2300      	movs	r3, #0
   b8550:	9300      	str	r3, [sp, #0]
   b8552:	461a      	mov	r2, r3
   b8554:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8558:	f7fe fe52 	bl	b7200 <system_ctrl_set_result>
}
   b855c:	b003      	add	sp, #12
   b855e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b8564 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b8564:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b8566:	8843      	ldrh	r3, [r0, #2]
   b8568:	2b0a      	cmp	r3, #10
   b856a:	d008      	beq.n	b857e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b856c:	2b50      	cmp	r3, #80	; 0x50
   b856e:	d10b      	bne.n	b8588 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8570:	4b09      	ldr	r3, [pc, #36]	; (b8598 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b8572:	681b      	ldr	r3, [r3, #0]
   b8574:	b14b      	cbz	r3, b858a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b8576:	b003      	add	sp, #12
   b8578:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b857c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b857e:	f7ff ffe5 	bl	b854c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b8582:	b003      	add	sp, #12
   b8584:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8588:	2300      	movs	r3, #0
   b858a:	9300      	str	r3, [sp, #0]
   b858c:	461a      	mov	r2, r3
   b858e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8592:	f7fe fe35 	bl	b7200 <system_ctrl_set_result>
}
   b8596:	e7f4      	b.n	b8582 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8598:	2003e728 	.word	0x2003e728

000b859c <module_user_init_hook>:
{
   b859c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b859e:	4812      	ldr	r0, [pc, #72]	; (b85e8 <module_user_init_hook+0x4c>)
   b85a0:	2100      	movs	r1, #0
   b85a2:	f7fe fee7 	bl	b7374 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b85a6:	4b11      	ldr	r3, [pc, #68]	; (b85ec <module_user_init_hook+0x50>)
   b85a8:	681a      	ldr	r2, [r3, #0]
   b85aa:	4b11      	ldr	r3, [pc, #68]	; (b85f0 <module_user_init_hook+0x54>)
   b85ac:	429a      	cmp	r2, r3
   b85ae:	4b11      	ldr	r3, [pc, #68]	; (b85f4 <module_user_init_hook+0x58>)
   b85b0:	bf0c      	ite	eq
   b85b2:	2201      	moveq	r2, #1
   b85b4:	2200      	movne	r2, #0
   b85b6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b85b8:	d001      	beq.n	b85be <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b85ba:	f7ff ffb1 	bl	b8520 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b85be:	f7fe fc25 	bl	b6e0c <HAL_RNG_GetRandomNumber>
   b85c2:	4604      	mov	r4, r0
    srand(seed);
   b85c4:	f000 fa92 	bl	b8aec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b85c8:	4b0b      	ldr	r3, [pc, #44]	; (b85f8 <module_user_init_hook+0x5c>)
   b85ca:	b113      	cbz	r3, b85d2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b85cc:	4620      	mov	r0, r4
   b85ce:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b85d2:	2100      	movs	r1, #0
   b85d4:	4808      	ldr	r0, [pc, #32]	; (b85f8 <module_user_init_hook+0x5c>)
   b85d6:	f7fe fe25 	bl	b7224 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b85da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b85de:	4807      	ldr	r0, [pc, #28]	; (b85fc <module_user_init_hook+0x60>)
   b85e0:	2100      	movs	r1, #0
   b85e2:	f7fe be03 	b.w	b71ec <system_ctrl_set_app_request_handler>
   b85e6:	bf00      	nop
   b85e8:	000b84c9 	.word	0x000b84c9
   b85ec:	2003f400 	.word	0x2003f400
   b85f0:	9a271c1e 	.word	0x9a271c1e
   b85f4:	2003e724 	.word	0x2003e724
   b85f8:	00000000 	.word	0x00000000
   b85fc:	000b8565 	.word	0x000b8565

000b8600 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b8600:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b8602:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b8604:	d902      	bls.n	b860c <pinAvailable+0xc>
    return false;
   b8606:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b8608:	b002      	add	sp, #8
   b860a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b860c:	f1a0 030b 	sub.w	r3, r0, #11
   b8610:	2b02      	cmp	r3, #2
   b8612:	d81a      	bhi.n	b864a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b8614:	4c17      	ldr	r4, [pc, #92]	; (b8674 <pinAvailable+0x74>)
   b8616:	7821      	ldrb	r1, [r4, #0]
   b8618:	f3bf 8f5b 	dmb	ish
   b861c:	f011 0101 	ands.w	r1, r1, #1
   b8620:	d10b      	bne.n	b863a <pinAvailable+0x3a>
   b8622:	4620      	mov	r0, r4
   b8624:	9101      	str	r1, [sp, #4]
   b8626:	f7fc fb71 	bl	b4d0c <__cxa_guard_acquire>
   b862a:	9901      	ldr	r1, [sp, #4]
   b862c:	b128      	cbz	r0, b863a <pinAvailable+0x3a>
   b862e:	4812      	ldr	r0, [pc, #72]	; (b8678 <pinAvailable+0x78>)
   b8630:	f7ff f93c 	bl	b78ac <_ZN8SPIClassC1E19hal_spi_interface_t>
   b8634:	4620      	mov	r0, r4
   b8636:	f7fc fb6e 	bl	b4d16 <__cxa_guard_release>
   b863a:	4b0f      	ldr	r3, [pc, #60]	; (b8678 <pinAvailable+0x78>)
   b863c:	7818      	ldrb	r0, [r3, #0]
   b863e:	f7fe fd15 	bl	b706c <hal_spi_is_enabled>
   b8642:	2800      	cmp	r0, #0
   b8644:	d1df      	bne.n	b8606 <pinAvailable+0x6>
  return true; // 'pin' is available
   b8646:	2001      	movs	r0, #1
   b8648:	e7de      	b.n	b8608 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b864a:	2801      	cmp	r0, #1
   b864c:	d809      	bhi.n	b8662 <pinAvailable+0x62>
   b864e:	f000 f8ab 	bl	b87a8 <_Z19__fetch_global_Wirev>
   b8652:	2100      	movs	r1, #0
   b8654:	7c00      	ldrb	r0, [r0, #16]
   b8656:	f7fe fc79 	bl	b6f4c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b865a:	f080 0001 	eor.w	r0, r0, #1
   b865e:	b2c0      	uxtb	r0, r0
   b8660:	e7d2      	b.n	b8608 <pinAvailable+0x8>
   b8662:	3809      	subs	r0, #9
   b8664:	2801      	cmp	r0, #1
   b8666:	d8ee      	bhi.n	b8646 <pinAvailable+0x46>
   b8668:	f000 f8de 	bl	b8828 <_Z22__fetch_global_Serial1v>
   b866c:	7c00      	ldrb	r0, [r0, #16]
   b866e:	f7fe fd4d 	bl	b710c <hal_usart_is_enabled>
   b8672:	e7f2      	b.n	b865a <pinAvailable+0x5a>
   b8674:	2003e6bc 	.word	0x2003e6bc
   b8678:	2003e6c0 	.word	0x2003e6c0

000b867c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b867c:	2823      	cmp	r0, #35	; 0x23
{
   b867e:	b538      	push	{r3, r4, r5, lr}
   b8680:	4604      	mov	r4, r0
   b8682:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8684:	d80a      	bhi.n	b869c <pinMode+0x20>
   b8686:	29ff      	cmp	r1, #255	; 0xff
   b8688:	d008      	beq.n	b869c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b868a:	f7ff ffb9 	bl	b8600 <pinAvailable>
   b868e:	b128      	cbz	r0, b869c <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
   b8690:	4629      	mov	r1, r5
   b8692:	4620      	mov	r0, r4
}
   b8694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
   b8698:	f7fe bbd8 	b.w	b6e4c <hal_gpio_mode>
}
   b869c:	bd38      	pop	{r3, r4, r5, pc}

000b869e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
   b869e:	b538      	push	{r3, r4, r5, lr}
   b86a0:	4604      	mov	r4, r0
   b86a2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
   b86a4:	f7fe fbda 	bl	b6e5c <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b86a8:	28ff      	cmp	r0, #255	; 0xff
   b86aa:	d010      	beq.n	b86ce <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b86ac:	2806      	cmp	r0, #6
   b86ae:	d804      	bhi.n	b86ba <digitalWrite+0x1c>
   b86b0:	234d      	movs	r3, #77	; 0x4d
   b86b2:	fa23 f000 	lsr.w	r0, r3, r0
   b86b6:	07c3      	lsls	r3, r0, #31
   b86b8:	d409      	bmi.n	b86ce <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b86ba:	4620      	mov	r0, r4
   b86bc:	f7ff ffa0 	bl	b8600 <pinAvailable>
   b86c0:	b128      	cbz	r0, b86ce <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
   b86c2:	4629      	mov	r1, r5
   b86c4:	4620      	mov	r0, r4
}
   b86c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
   b86ca:	f7fe bbcf 	b.w	b6e6c <hal_gpio_write>
}
   b86ce:	bd38      	pop	{r3, r4, r5, pc}

000b86d0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(hal_pin_t pin)
{
   b86d0:	b510      	push	{r4, lr}
   b86d2:	4604      	mov	r4, r0
    PinMode mode = hal_gpio_get_mode(pin);
   b86d4:	f7fe fbc2 	bl	b6e5c <hal_gpio_get_mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b86d8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b86da:	b2db      	uxtb	r3, r3
   b86dc:	2b01      	cmp	r3, #1
   b86de:	d908      	bls.n	b86f2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b86e0:	4620      	mov	r0, r4
   b86e2:	f7ff ff8d 	bl	b8600 <pinAvailable>
   b86e6:	b120      	cbz	r0, b86f2 <digitalRead+0x22>
      return LOW;
    }

    return hal_gpio_read(pin);
   b86e8:	4620      	mov	r0, r4
}
   b86ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_gpio_read(pin);
   b86ee:	f7fe bbc5 	b.w	b6e7c <hal_gpio_read>
}
   b86f2:	2000      	movs	r0, #0
   b86f4:	bd10      	pop	{r4, pc}

000b86f6 <analogRead>:
int32_t analogRead(hal_pin_t pin)
{
#if !HAL_PLATFORM_RTL872X
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   b86f6:	280d      	cmp	r0, #13
{
   b86f8:	b510      	push	{r4, lr}
   b86fa:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   b86fc:	bf9c      	itt	ls
   b86fe:	340e      	addls	r4, #14
   b8700:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
#endif

  // Safety check
  if( !pinAvailable(pin) ) {
   b8702:	4620      	mov	r0, r4
   b8704:	f7ff ff7c 	bl	b8600 <pinAvailable>
   b8708:	b150      	cbz	r0, b8720 <analogRead+0x2a>
    return LOW;
  }

  if(hal_pin_validate_function(pin, PF_ADC)!=PF_ADC)
   b870a:	2103      	movs	r1, #3
   b870c:	4620      	mov	r0, r4
   b870e:	f7fe fb95 	bl	b6e3c <hal_pin_validate_function>
   b8712:	2803      	cmp	r0, #3
   b8714:	d104      	bne.n	b8720 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   b8716:	4620      	mov	r0, r4
}
   b8718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   b871c:	f7fe bbbe 	b.w	b6e9c <hal_adc_read>
}
   b8720:	2000      	movs	r0, #0
   b8722:	bd10      	pop	{r4, pc}

000b8724 <_Z11analogWritetm>:

/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 */
void analogWrite(hal_pin_t pin, uint32_t value)
{
   b8724:	b538      	push	{r3, r4, r5, lr}
   b8726:	4604      	mov	r4, r0
   b8728:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
   b872a:	f7ff ff69 	bl	b8600 <pinAvailable>
   b872e:	b1f0      	cbz	r0, b876e <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (hal_pin_validate_function(pin, PF_DAC) == PF_DAC)
   b8730:	2104      	movs	r1, #4
   b8732:	4620      	mov	r0, r4
   b8734:	f7fe fb82 	bl	b6e3c <hal_pin_validate_function>
   b8738:	2804      	cmp	r0, #4
   b873a:	d105      	bne.n	b8748 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
   b873c:	b2a9      	uxth	r1, r5
   b873e:	4620      	mov	r0, r4
            return;
        }

        hal_pwm_write_ext(pin, value);
    }
}
   b8740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        HAL_DAC_Write(pin, value);
   b8744:	f7fe bba2 	b.w	b6e8c <HAL_DAC_Write>
    else if (hal_pin_validate_function(pin, PF_TIMER) == PF_TIMER)
   b8748:	2102      	movs	r1, #2
   b874a:	4620      	mov	r0, r4
   b874c:	f7fe fb76 	bl	b6e3c <hal_pin_validate_function>
   b8750:	2802      	cmp	r0, #2
   b8752:	d10c      	bne.n	b876e <_Z11analogWritetm+0x4a>
        PinMode mode = hal_gpio_get_mode(pin);
   b8754:	4620      	mov	r0, r4
   b8756:	f7fe fb81 	bl	b6e5c <hal_gpio_get_mode>
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
   b875a:	2801      	cmp	r0, #1
   b875c:	d001      	beq.n	b8762 <_Z11analogWritetm+0x3e>
   b875e:	2804      	cmp	r0, #4
   b8760:	d105      	bne.n	b876e <_Z11analogWritetm+0x4a>
        hal_pwm_write_ext(pin, value);
   b8762:	4629      	mov	r1, r5
   b8764:	4620      	mov	r0, r4
}
   b8766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        hal_pwm_write_ext(pin, value);
   b876a:	f7fe bb9f 	b.w	b6eac <hal_pwm_write_ext>
}
   b876e:	bd38      	pop	{r3, r4, r5, pc}

000b8770 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8770:	4770      	bx	lr
	...

000b8774 <_Z17acquireWireBufferv>:
{
   b8774:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b8776:	4b0a      	ldr	r3, [pc, #40]	; (b87a0 <_Z17acquireWireBufferv+0x2c>)
   b8778:	6003      	str	r3, [r0, #0]
   b877a:	2301      	movs	r3, #1
{
   b877c:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b877e:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8780:	4908      	ldr	r1, [pc, #32]	; (b87a4 <_Z17acquireWireBufferv+0x30>)
   b8782:	2020      	movs	r0, #32
   b8784:	f000 f874 	bl	b8870 <_ZnajRKSt9nothrow_t>
	};
   b8788:	2520      	movs	r5, #32
   b878a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b878c:	4905      	ldr	r1, [pc, #20]	; (b87a4 <_Z17acquireWireBufferv+0x30>)
	};
   b878e:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8790:	4628      	mov	r0, r5
   b8792:	f000 f86d 	bl	b8870 <_ZnajRKSt9nothrow_t>
	};
   b8796:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b879a:	4620      	mov	r0, r4
   b879c:	bd38      	pop	{r3, r4, r5, pc}
   b879e:	bf00      	nop
   b87a0:	00010018 	.word	0x00010018
   b87a4:	000b9fcc 	.word	0x000b9fcc

000b87a8 <_Z19__fetch_global_Wirev>:
{
   b87a8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87aa:	4d0e      	ldr	r5, [pc, #56]	; (b87e4 <_Z19__fetch_global_Wirev+0x3c>)
   b87ac:	7829      	ldrb	r1, [r5, #0]
   b87ae:	f3bf 8f5b 	dmb	ish
   b87b2:	f011 0401 	ands.w	r4, r1, #1
{
   b87b6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b87b8:	d111      	bne.n	b87de <_Z19__fetch_global_Wirev+0x36>
   b87ba:	4628      	mov	r0, r5
   b87bc:	f7fc faa6 	bl	b4d0c <__cxa_guard_acquire>
   b87c0:	b168      	cbz	r0, b87de <_Z19__fetch_global_Wirev+0x36>
   b87c2:	4668      	mov	r0, sp
   b87c4:	f7ff ffd6 	bl	b8774 <_Z17acquireWireBufferv>
   b87c8:	466a      	mov	r2, sp
   b87ca:	4621      	mov	r1, r4
   b87cc:	4806      	ldr	r0, [pc, #24]	; (b87e8 <_Z19__fetch_global_Wirev+0x40>)
   b87ce:	f7fe fe4f 	bl	b7470 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b87d2:	4628      	mov	r0, r5
   b87d4:	f7fc fa9f 	bl	b4d16 <__cxa_guard_release>
   b87d8:	4804      	ldr	r0, [pc, #16]	; (b87ec <_Z19__fetch_global_Wirev+0x44>)
   b87da:	f000 f963 	bl	b8aa4 <atexit>
	return wire;
}
   b87de:	4802      	ldr	r0, [pc, #8]	; (b87e8 <_Z19__fetch_global_Wirev+0x40>)
   b87e0:	b007      	add	sp, #28
   b87e2:	bd30      	pop	{r4, r5, pc}
   b87e4:	2003e730 	.word	0x2003e730
   b87e8:	2003e734 	.word	0x2003e734
   b87ec:	000b8771 	.word	0x000b8771

000b87f0 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b87f0:	4770      	bx	lr
	...

000b87f4 <_Z20acquireSerial1Bufferv>:
{
   b87f4:	b538      	push	{r3, r4, r5, lr}
   b87f6:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b87f8:	2514      	movs	r5, #20
   b87fa:	462a      	mov	r2, r5
   b87fc:	2100      	movs	r1, #0
   b87fe:	f000 f96d 	bl	b8adc <memset>
   b8802:	8025      	strh	r5, [r4, #0]
   b8804:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8806:	4907      	ldr	r1, [pc, #28]	; (b8824 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8808:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b880a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b880c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b880e:	f000 f82f 	bl	b8870 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8812:	4904      	ldr	r1, [pc, #16]	; (b8824 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b8814:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8816:	4628      	mov	r0, r5
   b8818:	f000 f82a 	bl	b8870 <_ZnajRKSt9nothrow_t>
    };
   b881c:	60e0      	str	r0, [r4, #12]
}
   b881e:	4620      	mov	r0, r4
   b8820:	bd38      	pop	{r3, r4, r5, pc}
   b8822:	bf00      	nop
   b8824:	000b9fcc 	.word	0x000b9fcc

000b8828 <_Z22__fetch_global_Serial1v>:
{
   b8828:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b882a:	4d0e      	ldr	r5, [pc, #56]	; (b8864 <_Z22__fetch_global_Serial1v+0x3c>)
   b882c:	7829      	ldrb	r1, [r5, #0]
   b882e:	f3bf 8f5b 	dmb	ish
   b8832:	f011 0401 	ands.w	r4, r1, #1
{
   b8836:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8838:	d111      	bne.n	b885e <_Z22__fetch_global_Serial1v+0x36>
   b883a:	4628      	mov	r0, r5
   b883c:	f7fc fa66 	bl	b4d0c <__cxa_guard_acquire>
   b8840:	b168      	cbz	r0, b885e <_Z22__fetch_global_Serial1v+0x36>
   b8842:	a801      	add	r0, sp, #4
   b8844:	f7ff ffd6 	bl	b87f4 <_Z20acquireSerial1Bufferv>
   b8848:	aa01      	add	r2, sp, #4
   b884a:	4621      	mov	r1, r4
   b884c:	4806      	ldr	r0, [pc, #24]	; (b8868 <_Z22__fetch_global_Serial1v+0x40>)
   b884e:	f7ff fd33 	bl	b82b8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b8852:	4628      	mov	r0, r5
   b8854:	f7fc fa5f 	bl	b4d16 <__cxa_guard_release>
   b8858:	4804      	ldr	r0, [pc, #16]	; (b886c <_Z22__fetch_global_Serial1v+0x44>)
   b885a:	f000 f923 	bl	b8aa4 <atexit>
    return serial1;
}
   b885e:	4802      	ldr	r0, [pc, #8]	; (b8868 <_Z22__fetch_global_Serial1v+0x40>)
   b8860:	b007      	add	sp, #28
   b8862:	bd30      	pop	{r4, r5, pc}
   b8864:	2003e748 	.word	0x2003e748
   b8868:	2003e74c 	.word	0x2003e74c
   b886c:	000b87f1 	.word	0x000b87f1

000b8870 <_ZnajRKSt9nothrow_t>:
   b8870:	f7fc ba3b 	b.w	b4cea <_Znaj>

000b8874 <_ZSt20__throw_length_errorPKc>:
   b8874:	b508      	push	{r3, lr}
   b8876:	f7fe fd65 	bl	b7344 <abort>

000b887a <_ZSt25__throw_bad_function_callv>:
   b887a:	b508      	push	{r3, lr}
   b887c:	f7fe fd62 	bl	b7344 <abort>

000b8880 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b8880:	4901      	ldr	r1, [pc, #4]	; (b8888 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b8882:	f000 b8f9 	b.w	b8a78 <_ZNKSt9type_infoeqERKS_>
   b8886:	bf00      	nop
   b8888:	000b9fe8 	.word	0x000b9fe8

000b888c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b888c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b888e:	2400      	movs	r4, #0
   b8890:	2310      	movs	r3, #16
   b8892:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b8896:	6803      	ldr	r3, [r0, #0]
   b8898:	4615      	mov	r5, r2
   b889a:	699e      	ldr	r6, [r3, #24]
   b889c:	6812      	ldr	r2, [r2, #0]
   b889e:	466b      	mov	r3, sp
   b88a0:	e9cd 4400 	strd	r4, r4, [sp]
   b88a4:	47b0      	blx	r6
   b88a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b88aa:	f003 0306 	and.w	r3, r3, #6
   b88ae:	2b06      	cmp	r3, #6
   b88b0:	bf03      	ittte	eq
   b88b2:	9b00      	ldreq	r3, [sp, #0]
   b88b4:	602b      	streq	r3, [r5, #0]
   b88b6:	2001      	moveq	r0, #1
   b88b8:	4620      	movne	r0, r4
   b88ba:	b004      	add	sp, #16
   b88bc:	bd70      	pop	{r4, r5, r6, pc}

000b88be <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b88be:	9800      	ldr	r0, [sp, #0]
   b88c0:	4290      	cmp	r0, r2
   b88c2:	bf14      	ite	ne
   b88c4:	2001      	movne	r0, #1
   b88c6:	2006      	moveq	r0, #6
   b88c8:	4770      	bx	lr
	...

000b88cc <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b88cc:	b510      	push	{r4, lr}
   b88ce:	4b03      	ldr	r3, [pc, #12]	; (b88dc <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b88d0:	6003      	str	r3, [r0, #0]
   b88d2:	4604      	mov	r4, r0
   b88d4:	f000 f8cd 	bl	b8a72 <_ZNSt9type_infoD1Ev>
   b88d8:	4620      	mov	r0, r4
   b88da:	bd10      	pop	{r4, pc}
   b88dc:	000ba028 	.word	0x000ba028

000b88e0 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b88e0:	b510      	push	{r4, lr}
   b88e2:	4604      	mov	r4, r0
   b88e4:	f7ff fff2 	bl	b88cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b88e8:	4620      	mov	r0, r4
   b88ea:	2108      	movs	r1, #8
   b88ec:	f7fc f9ff 	bl	b4cee <_ZdlPvj>
   b88f0:	4620      	mov	r0, r4
   b88f2:	bd10      	pop	{r4, pc}

000b88f4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b88f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b88f8:	461f      	mov	r7, r3
   b88fa:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b88fe:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b8902:	4598      	cmp	r8, r3
   b8904:	4606      	mov	r6, r0
   b8906:	4615      	mov	r5, r2
   b8908:	d107      	bne.n	b891a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b890a:	9907      	ldr	r1, [sp, #28]
   b890c:	f000 f8b4 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b8910:	b118      	cbz	r0, b891a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b8912:	7165      	strb	r5, [r4, #5]
   b8914:	2000      	movs	r0, #0
   b8916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b891a:	4639      	mov	r1, r7
   b891c:	4630      	mov	r0, r6
   b891e:	f000 f8ab 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b8922:	2800      	cmp	r0, #0
   b8924:	d0f6      	beq.n	b8914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b8926:	2301      	movs	r3, #1
   b8928:	f8c4 8000 	str.w	r8, [r4]
   b892c:	7125      	strb	r5, [r4, #4]
   b892e:	71a3      	strb	r3, [r4, #6]
   b8930:	e7f0      	b.n	b8914 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b8932 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b8932:	b538      	push	{r3, r4, r5, lr}
   b8934:	4615      	mov	r5, r2
   b8936:	461c      	mov	r4, r3
   b8938:	f000 f89e 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b893c:	b120      	cbz	r0, b8948 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b893e:	2308      	movs	r3, #8
   b8940:	60e3      	str	r3, [r4, #12]
   b8942:	2306      	movs	r3, #6
   b8944:	6025      	str	r5, [r4, #0]
   b8946:	7123      	strb	r3, [r4, #4]
   b8948:	bd38      	pop	{r3, r4, r5, pc}

000b894a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b894a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b894c:	4605      	mov	r5, r0
   b894e:	460c      	mov	r4, r1
   b8950:	9201      	str	r2, [sp, #4]
   b8952:	461e      	mov	r6, r3
   b8954:	f000 f890 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b8958:	b950      	cbnz	r0, b8970 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b895a:	2e03      	cmp	r6, #3
   b895c:	d808      	bhi.n	b8970 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b895e:	6823      	ldr	r3, [r4, #0]
   b8960:	9a01      	ldr	r2, [sp, #4]
   b8962:	695b      	ldr	r3, [r3, #20]
   b8964:	4629      	mov	r1, r5
   b8966:	4620      	mov	r0, r4
   b8968:	b002      	add	sp, #8
   b896a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b896e:	4718      	bx	r3
   b8970:	b002      	add	sp, #8
   b8972:	bd70      	pop	{r4, r5, r6, pc}

000b8974 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b8974:	b510      	push	{r4, lr}
   b8976:	4b03      	ldr	r3, [pc, #12]	; (b8984 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b8978:	6003      	str	r3, [r0, #0]
   b897a:	4604      	mov	r4, r0
   b897c:	f7ff ffa6 	bl	b88cc <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b8980:	4620      	mov	r0, r4
   b8982:	bd10      	pop	{r4, pc}
   b8984:	000ba088 	.word	0x000ba088

000b8988 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b8988:	b510      	push	{r4, lr}
   b898a:	4604      	mov	r4, r0
   b898c:	f7ff fff2 	bl	b8974 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b8990:	4620      	mov	r0, r4
   b8992:	210c      	movs	r1, #12
   b8994:	f7fc f9ab 	bl	b4cee <_ZdlPvj>
   b8998:	4620      	mov	r0, r4
   b899a:	bd10      	pop	{r4, pc}

000b899c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b899c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b899e:	9f08      	ldr	r7, [sp, #32]
   b89a0:	4297      	cmp	r7, r2
   b89a2:	4605      	mov	r5, r0
   b89a4:	460e      	mov	r6, r1
   b89a6:	4614      	mov	r4, r2
   b89a8:	d00a      	beq.n	b89c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b89aa:	68a8      	ldr	r0, [r5, #8]
   b89ac:	6802      	ldr	r2, [r0, #0]
   b89ae:	9708      	str	r7, [sp, #32]
   b89b0:	6a15      	ldr	r5, [r2, #32]
   b89b2:	4631      	mov	r1, r6
   b89b4:	4622      	mov	r2, r4
   b89b6:	46ac      	mov	ip, r5
   b89b8:	b003      	add	sp, #12
   b89ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b89be:	4760      	bx	ip
   b89c0:	4619      	mov	r1, r3
   b89c2:	9301      	str	r3, [sp, #4]
   b89c4:	f000 f858 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b89c8:	9b01      	ldr	r3, [sp, #4]
   b89ca:	2800      	cmp	r0, #0
   b89cc:	d0ed      	beq.n	b89aa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b89ce:	2006      	movs	r0, #6
   b89d0:	b003      	add	sp, #12
   b89d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b89d4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b89d4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b89d8:	460d      	mov	r5, r1
   b89da:	4619      	mov	r1, r3
   b89dc:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b89e0:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b89e4:	4681      	mov	r9, r0
   b89e6:	4617      	mov	r7, r2
   b89e8:	4698      	mov	r8, r3
   b89ea:	f000 f845 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b89ee:	b190      	cbz	r0, b8a16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b89f0:	2d00      	cmp	r5, #0
   b89f2:	6034      	str	r4, [r6, #0]
   b89f4:	7137      	strb	r7, [r6, #4]
   b89f6:	db09      	blt.n	b8a0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b89f8:	1961      	adds	r1, r4, r5
   b89fa:	458a      	cmp	sl, r1
   b89fc:	bf0c      	ite	eq
   b89fe:	2106      	moveq	r1, #6
   b8a00:	2101      	movne	r1, #1
   b8a02:	71b1      	strb	r1, [r6, #6]
   b8a04:	2000      	movs	r0, #0
   b8a06:	b001      	add	sp, #4
   b8a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8a0c:	3502      	adds	r5, #2
   b8a0e:	d1f9      	bne.n	b8a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8a10:	2301      	movs	r3, #1
   b8a12:	71b3      	strb	r3, [r6, #6]
   b8a14:	e7f6      	b.n	b8a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8a16:	4554      	cmp	r4, sl
   b8a18:	d106      	bne.n	b8a28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8a1a:	4659      	mov	r1, fp
   b8a1c:	4648      	mov	r0, r9
   b8a1e:	f000 f82b 	bl	b8a78 <_ZNKSt9type_infoeqERKS_>
   b8a22:	b108      	cbz	r0, b8a28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b8a24:	7177      	strb	r7, [r6, #5]
   b8a26:	e7ed      	b.n	b8a04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b8a28:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b8a2c:	6803      	ldr	r3, [r0, #0]
   b8a2e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b8a32:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b8a36:	69dc      	ldr	r4, [r3, #28]
   b8a38:	463a      	mov	r2, r7
   b8a3a:	4643      	mov	r3, r8
   b8a3c:	4629      	mov	r1, r5
   b8a3e:	46a4      	mov	ip, r4
   b8a40:	b001      	add	sp, #4
   b8a42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8a46:	4760      	bx	ip

000b8a48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b8a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8a4c:	4607      	mov	r7, r0
   b8a4e:	460c      	mov	r4, r1
   b8a50:	4615      	mov	r5, r2
   b8a52:	461e      	mov	r6, r3
   b8a54:	f7ff ff6d 	bl	b8932 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b8a58:	b948      	cbnz	r0, b8a6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b8a5a:	68b8      	ldr	r0, [r7, #8]
   b8a5c:	6803      	ldr	r3, [r0, #0]
   b8a5e:	699f      	ldr	r7, [r3, #24]
   b8a60:	462a      	mov	r2, r5
   b8a62:	4633      	mov	r3, r6
   b8a64:	4621      	mov	r1, r4
   b8a66:	46bc      	mov	ip, r7
   b8a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b8a6c:	4760      	bx	ip
   b8a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b8a72 <_ZNSt9type_infoD1Ev>:
   b8a72:	4770      	bx	lr

000b8a74 <_ZNKSt9type_info14__is_pointer_pEv>:
   b8a74:	2000      	movs	r0, #0
   b8a76:	4770      	bx	lr

000b8a78 <_ZNKSt9type_infoeqERKS_>:
   b8a78:	4281      	cmp	r1, r0
   b8a7a:	b508      	push	{r3, lr}
   b8a7c:	d00e      	beq.n	b8a9c <_ZNKSt9type_infoeqERKS_+0x24>
   b8a7e:	6840      	ldr	r0, [r0, #4]
   b8a80:	7803      	ldrb	r3, [r0, #0]
   b8a82:	2b2a      	cmp	r3, #42	; 0x2a
   b8a84:	d00c      	beq.n	b8aa0 <_ZNKSt9type_infoeqERKS_+0x28>
   b8a86:	6849      	ldr	r1, [r1, #4]
   b8a88:	780b      	ldrb	r3, [r1, #0]
   b8a8a:	2b2a      	cmp	r3, #42	; 0x2a
   b8a8c:	bf08      	it	eq
   b8a8e:	3101      	addeq	r1, #1
   b8a90:	f7fc f8dc 	bl	b4c4c <strcmp>
   b8a94:	fab0 f080 	clz	r0, r0
   b8a98:	0940      	lsrs	r0, r0, #5
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	2001      	movs	r0, #1
   b8a9e:	e7fc      	b.n	b8a9a <_ZNKSt9type_infoeqERKS_+0x22>
   b8aa0:	2000      	movs	r0, #0
   b8aa2:	e7fa      	b.n	b8a9a <_ZNKSt9type_infoeqERKS_+0x22>

000b8aa4 <atexit>:
   b8aa4:	2300      	movs	r3, #0
   b8aa6:	4601      	mov	r1, r0
   b8aa8:	461a      	mov	r2, r3
   b8aaa:	4618      	mov	r0, r3
   b8aac:	f000 b8ec 	b.w	b8c88 <__register_exitproc>

000b8ab0 <atoi>:
   b8ab0:	220a      	movs	r2, #10
   b8ab2:	2100      	movs	r1, #0
   b8ab4:	f000 b8de 	b.w	b8c74 <strtol>

000b8ab8 <atol>:
   b8ab8:	220a      	movs	r2, #10
   b8aba:	2100      	movs	r1, #0
   b8abc:	f000 b8da 	b.w	b8c74 <strtol>

000b8ac0 <memcpy>:
   b8ac0:	440a      	add	r2, r1
   b8ac2:	4291      	cmp	r1, r2
   b8ac4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8ac8:	d100      	bne.n	b8acc <memcpy+0xc>
   b8aca:	4770      	bx	lr
   b8acc:	b510      	push	{r4, lr}
   b8ace:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8ad6:	4291      	cmp	r1, r2
   b8ad8:	d1f9      	bne.n	b8ace <memcpy+0xe>
   b8ada:	bd10      	pop	{r4, pc}

000b8adc <memset>:
   b8adc:	4402      	add	r2, r0
   b8ade:	4603      	mov	r3, r0
   b8ae0:	4293      	cmp	r3, r2
   b8ae2:	d100      	bne.n	b8ae6 <memset+0xa>
   b8ae4:	4770      	bx	lr
   b8ae6:	f803 1b01 	strb.w	r1, [r3], #1
   b8aea:	e7f9      	b.n	b8ae0 <memset+0x4>

000b8aec <srand>:
   b8aec:	b538      	push	{r3, r4, r5, lr}
   b8aee:	4b10      	ldr	r3, [pc, #64]	; (b8b30 <srand+0x44>)
   b8af0:	681d      	ldr	r5, [r3, #0]
   b8af2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8af4:	4604      	mov	r4, r0
   b8af6:	b9b3      	cbnz	r3, b8b26 <srand+0x3a>
   b8af8:	2018      	movs	r0, #24
   b8afa:	f7fe fbfb 	bl	b72f4 <malloc>
   b8afe:	4602      	mov	r2, r0
   b8b00:	63a8      	str	r0, [r5, #56]	; 0x38
   b8b02:	b920      	cbnz	r0, b8b0e <srand+0x22>
   b8b04:	4b0b      	ldr	r3, [pc, #44]	; (b8b34 <srand+0x48>)
   b8b06:	480c      	ldr	r0, [pc, #48]	; (b8b38 <srand+0x4c>)
   b8b08:	2142      	movs	r1, #66	; 0x42
   b8b0a:	f7fe fc2b 	bl	b7364 <__assert_func>
   b8b0e:	490b      	ldr	r1, [pc, #44]	; (b8b3c <srand+0x50>)
   b8b10:	4b0b      	ldr	r3, [pc, #44]	; (b8b40 <srand+0x54>)
   b8b12:	e9c0 1300 	strd	r1, r3, [r0]
   b8b16:	4b0b      	ldr	r3, [pc, #44]	; (b8b44 <srand+0x58>)
   b8b18:	6083      	str	r3, [r0, #8]
   b8b1a:	230b      	movs	r3, #11
   b8b1c:	8183      	strh	r3, [r0, #12]
   b8b1e:	2100      	movs	r1, #0
   b8b20:	2001      	movs	r0, #1
   b8b22:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8b26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8b28:	2200      	movs	r2, #0
   b8b2a:	611c      	str	r4, [r3, #16]
   b8b2c:	615a      	str	r2, [r3, #20]
   b8b2e:	bd38      	pop	{r3, r4, r5, pc}
   b8b30:	2003e554 	.word	0x2003e554
   b8b34:	000ba0c1 	.word	0x000ba0c1
   b8b38:	000ba0d8 	.word	0x000ba0d8
   b8b3c:	abcd330e 	.word	0xabcd330e
   b8b40:	e66d1234 	.word	0xe66d1234
   b8b44:	0005deec 	.word	0x0005deec

000b8b48 <strncpy>:
   b8b48:	b510      	push	{r4, lr}
   b8b4a:	3901      	subs	r1, #1
   b8b4c:	4603      	mov	r3, r0
   b8b4e:	b132      	cbz	r2, b8b5e <strncpy+0x16>
   b8b50:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8b54:	f803 4b01 	strb.w	r4, [r3], #1
   b8b58:	3a01      	subs	r2, #1
   b8b5a:	2c00      	cmp	r4, #0
   b8b5c:	d1f7      	bne.n	b8b4e <strncpy+0x6>
   b8b5e:	441a      	add	r2, r3
   b8b60:	2100      	movs	r1, #0
   b8b62:	4293      	cmp	r3, r2
   b8b64:	d100      	bne.n	b8b68 <strncpy+0x20>
   b8b66:	bd10      	pop	{r4, pc}
   b8b68:	f803 1b01 	strb.w	r1, [r3], #1
   b8b6c:	e7f9      	b.n	b8b62 <strncpy+0x1a>
	...

000b8b70 <_strtol_l.constprop.0>:
   b8b70:	2b01      	cmp	r3, #1
   b8b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b8b76:	d001      	beq.n	b8b7c <_strtol_l.constprop.0+0xc>
   b8b78:	2b24      	cmp	r3, #36	; 0x24
   b8b7a:	d906      	bls.n	b8b8a <_strtol_l.constprop.0+0x1a>
   b8b7c:	f7fe fbea 	bl	b7354 <__errno>
   b8b80:	2316      	movs	r3, #22
   b8b82:	6003      	str	r3, [r0, #0]
   b8b84:	2000      	movs	r0, #0
   b8b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b8b8a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; b8c70 <_strtol_l.constprop.0+0x100>
   b8b8e:	460d      	mov	r5, r1
   b8b90:	462e      	mov	r6, r5
   b8b92:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8b96:	f814 700c 	ldrb.w	r7, [r4, ip]
   b8b9a:	f017 0708 	ands.w	r7, r7, #8
   b8b9e:	d1f7      	bne.n	b8b90 <_strtol_l.constprop.0+0x20>
   b8ba0:	2c2d      	cmp	r4, #45	; 0x2d
   b8ba2:	d132      	bne.n	b8c0a <_strtol_l.constprop.0+0x9a>
   b8ba4:	782c      	ldrb	r4, [r5, #0]
   b8ba6:	2701      	movs	r7, #1
   b8ba8:	1cb5      	adds	r5, r6, #2
   b8baa:	2b00      	cmp	r3, #0
   b8bac:	d05b      	beq.n	b8c66 <_strtol_l.constprop.0+0xf6>
   b8bae:	2b10      	cmp	r3, #16
   b8bb0:	d109      	bne.n	b8bc6 <_strtol_l.constprop.0+0x56>
   b8bb2:	2c30      	cmp	r4, #48	; 0x30
   b8bb4:	d107      	bne.n	b8bc6 <_strtol_l.constprop.0+0x56>
   b8bb6:	782c      	ldrb	r4, [r5, #0]
   b8bb8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   b8bbc:	2c58      	cmp	r4, #88	; 0x58
   b8bbe:	d14d      	bne.n	b8c5c <_strtol_l.constprop.0+0xec>
   b8bc0:	786c      	ldrb	r4, [r5, #1]
   b8bc2:	2310      	movs	r3, #16
   b8bc4:	3502      	adds	r5, #2
   b8bc6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   b8bca:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b8bce:	f04f 0c00 	mov.w	ip, #0
   b8bd2:	fbb8 f9f3 	udiv	r9, r8, r3
   b8bd6:	4666      	mov	r6, ip
   b8bd8:	fb03 8a19 	mls	sl, r3, r9, r8
   b8bdc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   b8be0:	f1be 0f09 	cmp.w	lr, #9
   b8be4:	d816      	bhi.n	b8c14 <_strtol_l.constprop.0+0xa4>
   b8be6:	4674      	mov	r4, lr
   b8be8:	42a3      	cmp	r3, r4
   b8bea:	dd24      	ble.n	b8c36 <_strtol_l.constprop.0+0xc6>
   b8bec:	f1bc 0f00 	cmp.w	ip, #0
   b8bf0:	db1e      	blt.n	b8c30 <_strtol_l.constprop.0+0xc0>
   b8bf2:	45b1      	cmp	r9, r6
   b8bf4:	d31c      	bcc.n	b8c30 <_strtol_l.constprop.0+0xc0>
   b8bf6:	d101      	bne.n	b8bfc <_strtol_l.constprop.0+0x8c>
   b8bf8:	45a2      	cmp	sl, r4
   b8bfa:	db19      	blt.n	b8c30 <_strtol_l.constprop.0+0xc0>
   b8bfc:	fb06 4603 	mla	r6, r6, r3, r4
   b8c00:	f04f 0c01 	mov.w	ip, #1
   b8c04:	f815 4b01 	ldrb.w	r4, [r5], #1
   b8c08:	e7e8      	b.n	b8bdc <_strtol_l.constprop.0+0x6c>
   b8c0a:	2c2b      	cmp	r4, #43	; 0x2b
   b8c0c:	bf04      	itt	eq
   b8c0e:	782c      	ldrbeq	r4, [r5, #0]
   b8c10:	1cb5      	addeq	r5, r6, #2
   b8c12:	e7ca      	b.n	b8baa <_strtol_l.constprop.0+0x3a>
   b8c14:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   b8c18:	f1be 0f19 	cmp.w	lr, #25
   b8c1c:	d801      	bhi.n	b8c22 <_strtol_l.constprop.0+0xb2>
   b8c1e:	3c37      	subs	r4, #55	; 0x37
   b8c20:	e7e2      	b.n	b8be8 <_strtol_l.constprop.0+0x78>
   b8c22:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   b8c26:	f1be 0f19 	cmp.w	lr, #25
   b8c2a:	d804      	bhi.n	b8c36 <_strtol_l.constprop.0+0xc6>
   b8c2c:	3c57      	subs	r4, #87	; 0x57
   b8c2e:	e7db      	b.n	b8be8 <_strtol_l.constprop.0+0x78>
   b8c30:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8c34:	e7e6      	b.n	b8c04 <_strtol_l.constprop.0+0x94>
   b8c36:	f1bc 0f00 	cmp.w	ip, #0
   b8c3a:	da05      	bge.n	b8c48 <_strtol_l.constprop.0+0xd8>
   b8c3c:	2322      	movs	r3, #34	; 0x22
   b8c3e:	6003      	str	r3, [r0, #0]
   b8c40:	4646      	mov	r6, r8
   b8c42:	b942      	cbnz	r2, b8c56 <_strtol_l.constprop.0+0xe6>
   b8c44:	4630      	mov	r0, r6
   b8c46:	e79e      	b.n	b8b86 <_strtol_l.constprop.0+0x16>
   b8c48:	b107      	cbz	r7, b8c4c <_strtol_l.constprop.0+0xdc>
   b8c4a:	4276      	negs	r6, r6
   b8c4c:	2a00      	cmp	r2, #0
   b8c4e:	d0f9      	beq.n	b8c44 <_strtol_l.constprop.0+0xd4>
   b8c50:	f1bc 0f00 	cmp.w	ip, #0
   b8c54:	d000      	beq.n	b8c58 <_strtol_l.constprop.0+0xe8>
   b8c56:	1e69      	subs	r1, r5, #1
   b8c58:	6011      	str	r1, [r2, #0]
   b8c5a:	e7f3      	b.n	b8c44 <_strtol_l.constprop.0+0xd4>
   b8c5c:	2430      	movs	r4, #48	; 0x30
   b8c5e:	2b00      	cmp	r3, #0
   b8c60:	d1b1      	bne.n	b8bc6 <_strtol_l.constprop.0+0x56>
   b8c62:	2308      	movs	r3, #8
   b8c64:	e7af      	b.n	b8bc6 <_strtol_l.constprop.0+0x56>
   b8c66:	2c30      	cmp	r4, #48	; 0x30
   b8c68:	d0a5      	beq.n	b8bb6 <_strtol_l.constprop.0+0x46>
   b8c6a:	230a      	movs	r3, #10
   b8c6c:	e7ab      	b.n	b8bc6 <_strtol_l.constprop.0+0x56>
   b8c6e:	bf00      	nop
   b8c70:	000ba132 	.word	0x000ba132

000b8c74 <strtol>:
   b8c74:	4613      	mov	r3, r2
   b8c76:	460a      	mov	r2, r1
   b8c78:	4601      	mov	r1, r0
   b8c7a:	4802      	ldr	r0, [pc, #8]	; (b8c84 <strtol+0x10>)
   b8c7c:	6800      	ldr	r0, [r0, #0]
   b8c7e:	f7ff bf77 	b.w	b8b70 <_strtol_l.constprop.0>
   b8c82:	bf00      	nop
   b8c84:	2003e554 	.word	0x2003e554

000b8c88 <__register_exitproc>:
   b8c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8c8c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8d48 <__register_exitproc+0xc0>
   b8c90:	4606      	mov	r6, r0
   b8c92:	f8d8 0000 	ldr.w	r0, [r8]
   b8c96:	461f      	mov	r7, r3
   b8c98:	460d      	mov	r5, r1
   b8c9a:	4691      	mov	r9, r2
   b8c9c:	f000 f856 	bl	b8d4c <__retarget_lock_acquire_recursive>
   b8ca0:	4b25      	ldr	r3, [pc, #148]	; (b8d38 <__register_exitproc+0xb0>)
   b8ca2:	681c      	ldr	r4, [r3, #0]
   b8ca4:	b934      	cbnz	r4, b8cb4 <__register_exitproc+0x2c>
   b8ca6:	4c25      	ldr	r4, [pc, #148]	; (b8d3c <__register_exitproc+0xb4>)
   b8ca8:	601c      	str	r4, [r3, #0]
   b8caa:	4b25      	ldr	r3, [pc, #148]	; (b8d40 <__register_exitproc+0xb8>)
   b8cac:	b113      	cbz	r3, b8cb4 <__register_exitproc+0x2c>
   b8cae:	681b      	ldr	r3, [r3, #0]
   b8cb0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8cb4:	6863      	ldr	r3, [r4, #4]
   b8cb6:	2b1f      	cmp	r3, #31
   b8cb8:	dd07      	ble.n	b8cca <__register_exitproc+0x42>
   b8cba:	f8d8 0000 	ldr.w	r0, [r8]
   b8cbe:	f000 f847 	bl	b8d50 <__retarget_lock_release_recursive>
   b8cc2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8cca:	b34e      	cbz	r6, b8d20 <__register_exitproc+0x98>
   b8ccc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8cd0:	b988      	cbnz	r0, b8cf6 <__register_exitproc+0x6e>
   b8cd2:	4b1c      	ldr	r3, [pc, #112]	; (b8d44 <__register_exitproc+0xbc>)
   b8cd4:	b923      	cbnz	r3, b8ce0 <__register_exitproc+0x58>
   b8cd6:	f8d8 0000 	ldr.w	r0, [r8]
   b8cda:	f000 f838 	bl	b8d4e <__retarget_lock_release>
   b8cde:	e7f0      	b.n	b8cc2 <__register_exitproc+0x3a>
   b8ce0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8ce4:	f7fe fb06 	bl	b72f4 <malloc>
   b8ce8:	2800      	cmp	r0, #0
   b8cea:	d0f4      	beq.n	b8cd6 <__register_exitproc+0x4e>
   b8cec:	2300      	movs	r3, #0
   b8cee:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8cf2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8cf6:	6863      	ldr	r3, [r4, #4]
   b8cf8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8cfc:	2201      	movs	r2, #1
   b8cfe:	409a      	lsls	r2, r3
   b8d00:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8d04:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8d08:	4313      	orrs	r3, r2
   b8d0a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8d0e:	2e02      	cmp	r6, #2
   b8d10:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8d14:	bf02      	ittt	eq
   b8d16:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8d1a:	4313      	orreq	r3, r2
   b8d1c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8d20:	6863      	ldr	r3, [r4, #4]
   b8d22:	f8d8 0000 	ldr.w	r0, [r8]
   b8d26:	1c5a      	adds	r2, r3, #1
   b8d28:	3302      	adds	r3, #2
   b8d2a:	6062      	str	r2, [r4, #4]
   b8d2c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8d30:	f000 f80e 	bl	b8d50 <__retarget_lock_release_recursive>
   b8d34:	2000      	movs	r0, #0
   b8d36:	e7c6      	b.n	b8cc6 <__register_exitproc+0x3e>
   b8d38:	2003e7ec 	.word	0x2003e7ec
   b8d3c:	2003e760 	.word	0x2003e760
   b8d40:	00000000 	.word	0x00000000
   b8d44:	000b72f5 	.word	0x000b72f5
   b8d48:	2003e5b8 	.word	0x2003e5b8

000b8d4c <__retarget_lock_acquire_recursive>:
   b8d4c:	4770      	bx	lr

000b8d4e <__retarget_lock_release>:
   b8d4e:	4770      	bx	lr

000b8d50 <__retarget_lock_release_recursive>:
   b8d50:	4770      	bx	lr

000b8d52 <link_code_end>:
	...

000b8d54 <dynalib_user>:
   b8d54:	4c71 000b 4cad 000b 4cd5 000b 4cd9 000b     qL...L...L...L..
   b8d64:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b8d74:	7620 7269 7574 6c61 2500 0069 6c25 0069      virtual.%i.%li.
   b8d84:	6576 7463 726f 3a3a 4d5f 725f 6165 6c6c     vector::_M_reall
   b8d94:	636f 695f 736e 7265 0074 6e69 6f00 7475     oc_insert.in.out
   b8da4:	7000 6d77 6400 0077 7761 7400 706d 006c     .pwm.dw.aw.tmpl.
   b8db4:	4d54 4c50 6232 6859 4e69 526b 0065 7776     TMPL2bYhiNkRe.vw
   b8dc4:	2500 2e32 6637 5400 6d65 6570 6172 7574     .%2.7f.Temperatu
   b8dd4:	6572 4120 656c 7472 0021 4162 635f 696c     re Alert!.bA_cli
   b8de4:	6b63 6465 5300 6e65 2074 6f4e 6974 6966     cked.Sent Notifi
   b8df4:	6163 6974 6e6f 7900 3531 3143 4e4e 744a     cation.y15C1NNJt
   b8e04:	4a56 3430 5a47 496f 6f41 4d49 4531 7541     VJ04GZoIAoIM1EAu
   b8e14:	6c5f 4669 6950 006c 6c62 6e79 2e6b 6c63     _liFPil.blynk.cl
   b8e24:	756f 0064                                   oud.

000b8e28 <_ZZN8BlynkApiI13BlynkProtocolI22BlynkTransportParticleEE8sendInfoEvE7profile>:
   b8e28:	6c62 6b6e 6e69 0066 6576 0072 2e31 2e31     blnkinf.ver.1.1.
   b8e38:	0030 2d68 6562 7461 3400 0035 7562 6666     0.h-beat.45.buff
   b8e48:	692d 006e 3031 3432 6400 7665 5000 7261     -in.1024.dev.Par
   b8e58:	6974 6c63 2065 7241 6f67 006e 7766 742d     ticle Argon.fw-t
   b8e68:	7079 0065 4d54 4c50 6232 6859 4e69 526b     ype.TMPL2bYhiNkR
   b8e78:	0065 7562 6c69 0064 754a 206e 3932 3220     e.build.Jun 29 2
   b8e88:	3230 2033 3831 323a 3a34 3633 0000           023 18:24:36...

000b8e97 <_ZL4font>:
   b8e97:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b8ea7:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b8eb7:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b8ec7:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b8ed7:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b8ee7:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b8ef7:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b8f07:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b8f17:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b8f27:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b8f37:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b8f47:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b8f57:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b8f67:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b8f77:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b8f87:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b8f97:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b8fa7:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b8fb7:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b8fc7:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b8fd7:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b8fe7:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b8ff7:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b9007:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b9017:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b9027:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b9037:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b9047:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b9057:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b9067:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b9077:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b9087:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b9097:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b90a7:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b90b7:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b90c7:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b90d7:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b90e7:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b90f7:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b9107:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b9117:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b9127:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b9137:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b9147:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b9157:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b9167:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b9177:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b9187:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b9197:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b91a7:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b91b7:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b91c7:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b91d7:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b91e7:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b91f7:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b9207:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b9217:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b9227:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b9237:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b9247:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b9257:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b9267:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b9277:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b9287:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b9297:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b92a7:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b92b7:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b92c7:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b92d7:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b92e7:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b92f7:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b9307:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b9317:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b9327:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b9337:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b9347:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b9357:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b9367:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b9377:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b9387:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....
	...

000b9398 <_ZTV12Adafruit_GFX>:
	...
   b93a8:	6145 000b 776d 000b 4cf5 000b 5b4b 000b     Ea..mw...L..K[..
   b93b8:	5b4d 000b 5b7f 000b 5b5b 000b 5b6d 000b     M[...[..[[..m[..
   b93c8:	5a8d 000b 5b4b 000b 5d77 000b 5d75 000b     .Z..K[..w]..u]..
   b93d8:	5b97 000b 5bd5 000b 5c0f 000b 5c55 000b     .[...[...\..U\..
   b93e8:	5c71 000b 5cf5 000b 6564 6166 6c75 2074     q\...\..default 
   b93f8:	4d00 4253 4c00 4253 3c00 5053 5349 7465     .MSB.LSB.<SPISet
   b9408:	6974 676e 2073 6564 6166 6c75 3e74 3c00     tings default>.<
   b9418:	5053 5349 7465 6974 676e 2073 7325 7525     SPISettings %s%u
   b9428:	2520 2073 4f4d 4544 7525 003e                %s MODE%u>.

000b9434 <_ZTVN8particle11SPISettingsE>:
	...
   b943c:	6281 000b 6253 000b 6255 000b               .b..Sb..Ub..

000b9448 <_ZL12splash1_data>:
   b9448:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b9458:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b9468:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b9478:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b9488:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b9498:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b94b0:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b94c0:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b94d0:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b94e0:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b94f0:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b9500:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b9510:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b9520:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b9530:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b9540:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b9550:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b9560:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b9570:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b9580:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b9590:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b95a0:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b95b0:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b95c0:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b95d8:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b95f0:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b9600:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b9610:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b9620:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b9630:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b9640:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b9650:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b9660:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b9670:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b9680:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b9690:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b96a0:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b96b0:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b96c0:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b96d0:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b96e0:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b96f0:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b9700:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b9708 <_ZL12splash2_data>:
   b9708:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b9718:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b9728:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b9744:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b9754:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b9764:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b9774:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b9784:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b9794:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b97a4:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b97b4:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b97c4:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b97d4:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b97e4:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b97f4:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b9804:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b9814:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b9824:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b9834:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b9844:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b9854:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b9864:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b9874:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b9884:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b989c:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b98ac:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b98bc:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b98cc:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b98dc:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b98e8 <_ZTV16Adafruit_SSD1306>:
	...
   b98f0:	62d5 000b 62ed 000b 6145 000b 776d 000b     .b...b..Ea..mw..
   b9900:	6301 000b 5b4b 000b 5b4d 000b 5b7f 000b     .c..K[..M[...[..
   b9910:	5b5b 000b 5b6d 000b 5a8d 000b 5b4b 000b     [[..m[...Z..K[..
   b9920:	5d77 000b 649f 000b 6a47 000b 69f9 000b     w]...d..Gj...i..
   b9930:	5c0f 000b 5c55 000b 5c71 000b 5cf5 000b     .\..U\..q\...\..

000b9940 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b9940:	8000 e0c0 f8f0 fefc                         ........

000b9948 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b9948:	0100 0703 1f0f 7f3f                         ......?.

000b9950 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b9950:	d5ae a880                                   ....

000b9954 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b9954:	00d3 8d40                                   ..@.

000b9958 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b9958:	0020 c8a1                                    ...

000b995c <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b995c:	40db a6a4 af2e                              .@....

000b9962 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b9962:	02da 8f81                                   ....

000b9966 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b9966:	12da                                         ...

000b9969 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b9969:	02da                                         ...

000b996c <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b996c:	0022 21ff 0000 0000                         "..!....

000b9974 <_ZTV16OledWingAdafruit>:
	...
   b997c:	6c7d 000b 6c9d 000b 6145 000b 776d 000b     }l...l..Ea..mw..
   b998c:	6301 000b 5b4b 000b 5b4d 000b 5b7f 000b     .c..K[..M[...[..
   b999c:	5b5b 000b 5b6d 000b 5a8d 000b 5b4b 000b     [[..m[...Z..K[..
   b99ac:	5d77 000b 649f 000b 6a47 000b 69f9 000b     w]...d..Gj...i..
   b99bc:	5c0f 000b 5c55 000b 5c71 000b 5cf5 000b     .\..U\..q\...\..

000b99cc <_ZL22BlynkReadHandlerVector>:
   b99cc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b99dc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b99ec:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b99fc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a0c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a1c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a2c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a3c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a4c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a5c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a6c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a7c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a8c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9a9c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9aac:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9abc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9acc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9adc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9aec:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9afc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b0c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b1c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b2c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b3c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b4c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b5c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b6c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b7c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b8c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9b9c:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9bac:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..
   b9bbc:	6dad 000b 6dad 000b 6dad 000b 6dad 000b     .m...m...m...m..

000b9bcc <_ZL23BlynkWriteHandlerVector>:
   b9bcc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9bdc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9bec:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9bfc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c0c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c1c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c2c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c3c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c4c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c5c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c6c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c7c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c8c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9c9c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9cac:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9cbc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9ccc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9cdc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9cec:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9cfc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d0c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d1c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d2c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d3c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d4c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d5c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d6c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d7c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d8c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9d9c:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9dac:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..
   b9dbc:	6daf 000b 6daf 000b 6daf 000b 6daf 000b     .m...m...m...m..

000b9dcc <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...

000b9dd4 <_ZTVN5spark13EthernetClassE>:
	...
   b9ddc:	73fb 000b 73f1 000b 73e7 000b 73dd 000b     .s...s...s...s..
   b9dec:	73d1 000b 73c5 000b 7649 000b 7651 000b     .s...s..Iv..Qv..
   b9dfc:	73b9 000b 73b1 000b 73a7 000b 739d 000b     .s...s...s...s..
   b9e0c:	7681 000b                                   .v..

000b9e10 <_ZTV7TwoWire>:
	...
   b9e18:	7419 000b 7463 000b 743b 000b 741b 000b     .t..ct..;t...t..
   b9e28:	7443 000b 744b 000b 7453 000b 745b 000b     Ct..Kt..St..[t..

000b9e38 <_ZTV9IPAddress>:
	...
   b9e40:	74ed 000b 74dd 000b 74df 000b 7061 0070     .t...t...t..app.

000b9e50 <_ZTVN5spark12NetworkClassE>:
	...
   b9e58:	7609 000b 7613 000b 761d 000b 7627 000b     .v...v...v..'v..
   b9e68:	7631 000b 763d 000b 7649 000b 7651 000b     1v..=v..Iv..Qv..
   b9e78:	7659 000b 7665 000b 766d 000b 7677 000b     Yv..ev..mv..wv..
   b9e88:	7681 000b                                   .v..

000b9e8c <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b9e8c:	0800 1810 2820 3830 6977 6972 676e 7200     .... (08wiring.r
   b9e9c:	6365 2076 7265 6f72 2072 203d 6425 0000     ecv error = %d..

000b9eac <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b9eb4:	7ccd 000b 7cf1 000b 8223 000b 7cff 000b     .|...|..#....|..
   b9ec4:	7cd1 000b                                   .|..

000b9ec8 <_ZTV9TCPClient>:
	...
   b9ed0:	7d7d 000b 7db1 000b 7c49 000b 7c63 000b     }}...}..I|..c|..
   b9ee0:	80b9 000b 7c8d 000b 7f2f 000b 7cc1 000b     .....|../....|..
   b9ef0:	7fc1 000b 7e01 000b 7f5d 000b 816d 000b     .....~..]...m...
   b9f00:	7efd 000b 7cc3 000b 7c75 000b 7d05 000b     .~...|..u|...}..
   b9f10:	7de1 000b 5925 252d 2d6d 6425 2554 3a48     .}..%Y-%m-%dT%H:
   b9f20:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b9f30 <_ZTV11USARTSerial>:
	...
   b9f38:	823d 000b 82a9 000b 8281 000b 776d 000b     =...........mw..
   b9f48:	8251 000b 826d 000b 825f 000b 827b 000b     Q...m..._...{...
   b9f58:	823f 000b 8243 000b                         ?...C...

000b9f60 <_ZTV9USBSerial>:
	...
   b9f68:	82e7 000b 834f 000b 8325 000b 776d 000b     ....O...%...mw..
   b9f78:	8317 000b 82e9 000b 82f9 000b 8349 000b     ............I...
   b9f88:	8309 000b 82e1 000b                         ........

000b9f90 <_ZTVN5spark9WiFiClassE>:
	...
   b9f98:	843f 000b 8435 000b 842b 000b 83e1 000b     ?...5...+.......
   b9fa8:	841f 000b 8413 000b 7649 000b 7651 000b     ........Iv..Qv..
   b9fb8:	8407 000b 83ff 000b 83f5 000b 83eb 000b     ................
   b9fc8:	7681 000b                                   .v..

000b9fcc <_ZSt7nothrow>:
	...

000b9fcd <_ZTSSt19_Sp_make_shared_tag>:
   b9fcd:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b9fdd:	6572 5f64 6174 0067 0000                     red_tag....

000b9fe8 <_ZTISt19_Sp_make_shared_tag>:
   b9fe8:	a028 000b 9fcd 000b                         (.......

000b9ff0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b9ff0:	a088 000b 9ffc 000b a0ac 000b               ............

000b9ffc <_ZTSN10__cxxabiv117__class_type_infoE>:
   b9ffc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   ba00c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   ba01c:	0045 0000                                   E...

000ba020 <_ZTVN10__cxxabiv117__class_type_infoE>:
   ba020:	0000 0000 9ff0 000b 88cd 000b 88e1 000b     ................
   ba030:	8a75 000b 8a75 000b 894b 000b 888d 000b     u...u...K.......
   ba040:	8933 000b 88f5 000b 88bf 000b               3...........

000ba04c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   ba04c:	a088 000b a058 000b 9ff0 000b               ....X.......

000ba058 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   ba058:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   ba068:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   ba078:	666e 456f 0000 0000                         nfoE....

000ba080 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   ba080:	0000 0000 a04c 000b 8975 000b 8989 000b     ....L...u.......
   ba090:	8a75 000b 8a75 000b 894b 000b 888d 000b     u...u...K.......
   ba0a0:	8a49 000b 89d5 000b 899d 000b               I...........

000ba0ac <_ZTISt9type_info>:
   ba0ac:	a028 000b a0b4 000b                         (.......

000ba0b4 <_ZTSSt9type_info>:
   ba0b4:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   ba0c4:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   ba0d4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   ba0e4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   ba0f4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   ba104:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   ba114:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   ba124:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000ba131 <_ctype_>:
   ba131:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   ba141:	2020 2020 2020 2020 2020 2020 2020 2020                     
   ba151:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   ba161:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   ba171:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   ba181:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   ba191:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   ba1a1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   ba1b1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000ba232 <link_const_data_end>:
	...

000ba234 <link_constructors_location>:
   ba234:	000b5a39 	.word	0x000b5a39
   ba238:	000b738d 	.word	0x000b738d
   ba23c:	000b7405 	.word	0x000b7405
   ba240:	000b75f9 	.word	0x000b75f9
   ba244:	000b7759 	.word	0x000b7759
   ba248:	000b7895 	.word	0x000b7895
   ba24c:	000b7c25 	.word	0x000b7c25
   ba250:	000b8229 	.word	0x000b8229
   ba254:	000b8449 	.word	0x000b8449
